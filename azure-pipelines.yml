trigger:
  branches:
    include:
      - master
      - refs/tags/*.*.*
      - refs/tags/*.*.*.*
    exclude:
      - refs/tags/*-ci*

resources:
- repo: self

variables:
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    iscibuild: ${{ true }}
    docker_tags: 'prerelease'

  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    isreleasebuild: ${{ true }}
    tag: $[ replace(variables['Build.SourceBranch'], 'refs/tags/', '') ]
    docker_tags: 'v3 v3.2 latest'

  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    civersion: '3.2.0'
    tag: $[ format('$(civersion)-ci{0:yyyyMMdd}{1}', pipeline.startTime, counter(format('{0:yyyyMMdd}', pipeline.startTime), 100)) ]

  docker_repo: 'rnwood/smtp4dev'
  docker_registry: 'dockerhub-rnwood'
  netcoresdk_version: '6.0.300'

stages:
- stage: Init
  displayName: Init
  jobs:
  - job: Init
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - checkout: none
    - powershell: Write-Host "$(tag) $(Build.BuildNumber)"
      displayName: Display build number
    - powershell: Write-Host "##vso[build.updatebuildnumber]$(tag) $(Build.BuildNumber)"
      displayName: Update build number

- stage: Build
  displayName: Build
  condition: succeeded()
  jobs:

  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core SDK v$(netcoresdk_version)
      inputs:
        packageType: sdk
        version: $(netcoresdk_version)
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core Global Tool
      inputs:
        command: custom
        custom: pack
        arguments: '-c Release -p:PackAsTool=true -p:version=$(tag) -o "$(Build.ArtifactStagingDirectory)/dotnetglobaltool" Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj'
    - publish: $(Build.ArtifactStagingDirectory)/dotnetglobaltool
      artifact: dotnetglobaltool
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - no runtime
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -p:version=$(tag) -o "$(Build.ArtifactStagingDirectory)/noruntime"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/noruntime/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/noruntime/Rnwood.Smtp4dev-noruntime-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/noruntime
      artifact: noruntime
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - win-x64
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -r win-x64 -p:version=$(tag) -o "$(Build.ArtifactStagingDirectory)/win-x64"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/win-x64/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/win-x64/Rnwood.Smtp4dev-win-x64-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/win-x64
      artifact: win-x64
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - linux-x64
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -r linux-x64 -p:version=$(tag)  -o "$(Build.ArtifactStagingDirectory)/linux-x64"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/linux-x64/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/linux-x64/Rnwood.Smtp4dev-linux-x64-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/linux-x64
      artifact: linux-x64

    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - linux-musl-x64
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -r linux-musl-x64 -p:version=$(tag)  -o "$(Build.ArtifactStagingDirectory)/linux-musl-x64"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/linux-musl-x64/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/linux-musl-x64/Rnwood.Smtp4dev-linux-musl-x64-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/linux-musl-x64
      artifact: linux-musl-x64

    # - task: DotNetCoreCLI@2
    #   displayName: Build .NET Core - osx-x64
    #   inputs:
    #     command: publish
    #     projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
    #     arguments: '-c Release -r osx-x64 -p:version=$(tag)  -o "$(Build.ArtifactStagingDirectory)/osx-x64"'
    # - powershell: move-item $(Build.ArtifactStagingDirectory)/osx-x64/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/osx-x64/Rnwood.Smtp4dev-osx-x64-$(tag).zip
    #   displayName: Rename artifact
    # - publish: $(Build.ArtifactStagingDirectory)/osx-x64
    #   artifact: osx-x64
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - win-arm
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -r win-arm -p:version=$(tag)  -o "$(Build.ArtifactStagingDirectory)/win-arm"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/win-arm/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/win-arm/Rnwood.Smtp4dev-win-arm-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/win-arm
      artifact: win-arm
    - task: DotNetCoreCLI@2
      displayName: Build .NET Core - linux-arm
      inputs:
        command: publish
        projects: Rnwood.Smtp4dev/Rnwood.Smtp4dev.csproj
        arguments: '-c Release -r linux-arm -p:version=$(tag)  -o "$(Build.ArtifactStagingDirectory)/linux-arm"'
    - powershell: move-item $(Build.ArtifactStagingDirectory)/linux-arm/Rnwood.Smtp4dev.zip $(Build.ArtifactStagingDirectory)/linux-arm/Rnwood.Smtp4dev-linux-arm-$(tag).zip
      displayName: Rename artifact
    - publish: $(Build.ArtifactStagingDirectory)/linux-arm
      artifact: linux-arm
  - job: DockerBuildLinux
    displayName: DockerBuild - Linux
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        dockerfile: '**/Dockerfile.linux'
        arguments: '--build-arg version=$(tag) -t $(docker_repo):linux-amd64-$(tag)'
    - task: Docker@2
      displayName: Push image
      condition: or(variables['isreleasebuild'], variables['iscibuild'])
      inputs:
        containerRegistry: $(docker_registry)
        repository: $(docker_repo)
        command: push
        tags: |
          linux-amd64-$(tag)
  - job: DockerBuildLinuxArm64
    displayName: DockerBuild - Linux - ARM64
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: Docker@2
        displayName: Build image
        inputs:
          command: build
          dockerfile: '**/Dockerfile.linux.arm64'
          arguments: '--build-arg version=$(tag) -t $(docker_repo):linux-arm64-$(tag)'
      - task: Docker@2
        displayName: Push image
        condition: or(variables['isreleasebuild'], variables['iscibuild'])
        inputs:
          containerRegistry: $(docker_registry)
          repository: $(docker_repo)
          command: push
          tags: |
            linux-arm64-$(tag)
  - job: DockerBuildWindows
    displayName: DockerBuild - Windows
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        dockerfile: '**/Dockerfile.windows'
        arguments: '--build-arg version=$(tag) -t $(docker_repo):windows-amd64-$(tag)'
    - task: Docker@2
      displayName: Push image
      condition: or(variables['isreleasebuild'], variables['iscibuild'])
      inputs:
        containerRegistry: $(docker_registry)
        repository: $(docker_repo)
        command: push
        tags: |
          windows-amd64-$(tag)
  - job: DockerManifest
    displayName: Docker Create Manifest
    condition: or(variables['isreleasebuild'], variables['iscibuild'])
    dependsOn:
    - DockerBuildLinux
    - DockerBuildLinuxArm64
    - DockerBuildWindows
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: Docker@2
      displayName: Login.
      inputs:
        containerRegistry: $(docker_registry)
        repository: $(docker_repo)
        command: login
    - task: PowerShell@2
      displayName: Create cross platform manifest
      inputs:
        targetType: inline
        script: |
          docker manifest create $(docker_repo):$(tag) $(docker_repo):windows-amd64-$(tag) $(docker_repo):linux-amd64-$(tag) $(docker_repo):linux-arm64-$(tag)
          docker manifest push $(docker_repo):$(tag)

- stage: Test
  displayName: Test
  condition:  succeeded()
  jobs:
  - job: TestOnWindows
    displayName: Test - Windows
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core SDK v$(netcoresdk_version)
      inputs:
        packageType: sdk
        version: $(netcoresdk_version)
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
  - job: TestOnLinux
    displayName: Test - Linux
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core SDK v$(netcoresdk_version)
      inputs:
        packageType: sdk
        version: $(netcoresdk_version)
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
  - job: TestOnMacOSX
    displayName: Test - MacOSX
    pool:
      vmImage: 'macOS-10.15'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core SDK v$(netcoresdk_version)
      inputs:
        packageType: sdk
        version: $(netcoresdk_version)
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test

- stage: Release
  condition:  and(succeeded(), or(variables['isreleasebuild'], variables['iscibuild']))
  displayName: Release
  jobs:
  - job: Release
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        path: $(Build.ArtifactStagingDirectory)
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/dotnetglobaltool/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'nuget_rnwood'


    - task: GitHubRelease@1
      inputs:
        gitHubConnection: github.com_rnwood
        repositoryName: rnwood/smtp4dev
        action: create
        title: $(tag)
        tag: $(tag)
        tagSource: userSpecifiedTag
        isDraft: false

        ${{ if variables['isreleasebuild'] }}:
          isPreRelease: false
          changeLogCompareToRelease: lastFullRelease
        ${{ if not(variables['isreleasebuild']) }}:
          isPreRelease: true
          changeLogCompareToRelease: lastNonDraftRelease

        assets: $(Build.ArtifactStagingDirectory)/**/*.zip

  - job: DockerReleaseTagLinux
    displayName: Docker Release Tag - Linux
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - checkout: none
    - task: Docker@2
      displayName: Login.
      inputs:
        containerRegistry: $(docker_registry)
        repository: $(docker_repo)
        command: login
    - task: PowerShell@2
      displayName: Tag release
      inputs:
        targetType: inline
        script: |
          docker pull $(docker_repo):linux-amd64-$(tag)

          ("$(docker_tags)".Split(" ", [StringSplitOptions]::RemoveEmptyEntries)) | foreach-object {
            docker tag $(docker_repo):linux-amd64-$(tag) $(docker_repo):linux-amd64-$_
            docker push $(docker_repo):linux-amd64-$_
          }

          docker pull $(docker_repo):linux-arm64-$(tag)

          ("$(docker_tags)".Split(" ", [StringSplitOptions]::RemoveEmptyEntries)) | foreach-object {
            docker tag $(docker_repo):linux-arm64-$(tag) $(docker_repo):linux-arm64-$_
            docker push $(docker_repo):linux-arm64-$_
          }

  - job: DockerRelease
    displayName: Docker Release
    dependsOn: DockerReleaseTagLinux
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: none
    - task: Docker@2
      displayName: Login
      inputs:
        containerRegistry: $(docker_registry)
        repository: $(docker_repo)
        command: login
    - task: PowerShell@2
      displayName: Tag release
      inputs:
        targetType: inline
        script: |
          docker pull $(docker_repo):windows-amd64-$(tag)

          ("$(docker_tags)".Split(" ", [StringSplitOptions]::RemoveEmptyEntries)) | foreach-object {
            docker tag $(docker_repo):windows-amd64-$(tag) $(docker_repo):windows-amd64-$_
            docker push $(docker_repo):windows-amd64-$_
          }

          docker manifest create $(docker_repo):$(tag) $(docker_repo):windows-amd64-$(tag) $(docker_repo):linux-amd64-$(tag) $(docker_repo):linux-arm64-$(tag)
          docker manifest push $(docker_repo):$(tag)

          ("$(docker_tags)".Split(" ", [StringSplitOptions]::RemoveEmptyEntries)) | foreach-object {
            docker manifest create $(docker_repo):$_ $(docker_repo):windows-amd64-$_ $(docker_repo):linux-amd64-$_ $(docker_repo):linux-arm64-$_
            docker manifest push $(docker_repo):$_
          }


