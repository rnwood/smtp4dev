02/01/2009
- [SharpMimeMessageStream] SaveTo: Skip trailing line break.

01/26/2009
 - [SharpMimeMessageStream] Add SaveTo method.
 - [SharpMimeMessage] DumpBody: save binary parts without messing with actual content.
 - [SharpMimeTools] rfc2047decode: Some chars were missing
 - [SharpMimeHeader]: extra spaces must be ignored.

12/16/2007
 - [SharpMimeTools] parseHeaderFieldBody: extra spaces must be ignored.

08/22/2007
 - [SharpMimeMessage] DumpBody: Allow dumping the raw content of parts even when they have other parts nested.

08/16/2007
 - [SharpDecodeOptions] Added NotRecursiveRfc822 option.
 - [SharpMessage] If SharpDecodeOptions.NotRecursiveRfc822 is set, nested messages are exposed as attachments.

11/29/2006
 - [SharpTnefMessage] When file name of the first attachment was before data in the stream, it wasn't being assigned.

07/21/2006
 - Version number set to 0.7
 - [SharpMimeTools] QuotedPrintable2Unicode: rewritten to play with with multibyte encodings. It's also a significant performance improvement.
 - [SharpMimeTools] QuotedPrintable2Unicode: stop using ref paramenter.
 - [SharpMimeTools] parseCharSet: Add log statement for unsupported or malformed encoding string.
 - [SharpMimeTools] parseCharSet: Avoid exceptions when there's no data to parse.

07/05/2006
 - Released as version 0.6b [685] r261.

06/16/2006
 - [SharpMessage] Improve examples in documentation.
 - [SharpMessage] Add three more constructors for easier use (they don't need to supply the mime types, they're inferred from the options one).
 - [SharpMessage] After decoding a tnef part to disk, the read-only stream was left open giving sharing violations under windows.
 - [SharpMimeMessage] Minor performance improvement while using boundary strings.
 - [doc] Update todo.txt and readme.txt with more accurate info.
 - [nant] Set the copyright notice's year in the documentation base on the current date.

06/02/2006
 - [SharpAttachment] Added Size property.
 - [SharpMessage] Set Size property for attachment instances once they are saved.
 - [SharpTnefMessage] Set Size property for attachment instances once they are saved.
 - [SharpAttachment] Added Inline property.
 - [SharpMessage] Set Inline property for attachment instances.

06/01/2006
 - [SharpDecodeOptions] Added CreateFolder option.
 - [SharpMessage] If SharpDecodeOptions.CreateFolder is set, create destination folder for attachments if it does not exist (only if there is at least one attachment). 

05/10/2006
 - [SharpMimeTools] Added GetFileName method to unify the SharpMessage and SharpMimeMessage Name properties behavior.
 - [SharpMimeMessage] Use the above in Name property.
 - [SharpMessage] Use GetFileName method when asigning Name property to ensure the value is usable in the target filesystem. If it's not, try to use the extension can be used with the old name.
 - [SharpTnefMessage] Honour OemCodepage attribute if it's present in the stream and the system supports it. Otherwise fallback to SharpMimeHeader.EncodingDefault.

04/21/2006
 - [SharpMimeTools] Added Rfc2392Url method to prepare Message-ID and Content-ID values for url inclusion.
 - [SharpMimeHeader] Added ContentID property.
 - [SharpMessage] Mark each html body part that has a Content-ID header with a named anchor.
 - [SharpMessage] Added SetUrlBase method to provide access for mid: and cid: referenced message parts in the body (RFC2392).
 - [SharpAttachment] Added ContentID property.
 - [SharpDecodeOptions] Added SharpDecodeOptions enumeration.
 - [SharpMessage] Use the above for message's decoding options. Now tnef, uudecode and named anchors are conditionally done.
 
04/17/2006
 - [SharpMimeTools] Added UuDecode and UuDecodeLine methods to handle uuencoded content.
 - [SharpMessage] Extract uuencoded attachments from the body.
 - [SharpMimeHeader] Avoid the StartsWith use to improve performance.
 - [SharpTnefMessage] Initial implementation. It's a ms-tnef decoder, though in this initial form it only decodes attachments.
 - [SharpMessage] Use the above to extract attachments from ms-tnef parts and add them as regular attachments.

04/16/2006
 - [SharpAttachment] Remove invalid chars from Name before setting the value.
 - [SharpAttachment] Add CreationTime and LastWriteTime properties to store the dates associated with the attachment. Then set them to the file while saving it.
 - [SharpMessage] Get creation and modification dates from Content-Disposition header for the SharpAttachment instance.
 - [SharpMimeMessage] DumpBody was setting dates before the file was written.

04/10/2006
 - All the logging code is now conditionally compiled using the LOG define.
 - [nant] The default release target excludes all logging code so there is no external dependency.
 - [nant] Added release-log target which is equivalent to the old release target.
 - [nant] Remove documentation build from release target.
 - [nant] Added release-doc target which calls release before building the documentation.
 - Fixed the fsf address on all .cs files.
 - Fixed the license name and version in AssemblyInfo.cs.
 - Fixed the key path in AssemblyInfo.cs.

04/06/2006
 - Updated MonoDevelop project to 0.10 release.
 - [SF FR - 1397831] SharpMessage now allows preferring a specific text subtype when decoding multipart/alternative text bodies. When it's not found, it takes the otherwise preferred one.

04/04/2006
 - Updated copyright notice.
 - Replaced #Develop 1.x project files with 2.x ones.
 - Added MonoDevelop project files.

11/19/2005
 - Version number set to 0.6
 - [SharpMessage] When there is a text/plain part before the first html part, the previous plain ones
   are enclosed in <pre> elements.
 - [SharpAttachment] Added TopLevelMediaType and SubType properties.

10/29/2005
 - Released as version 0.5b [595]

10/28/2005
 - Version number set to 0.5
 - [SharpMessage] Bugfix: when there were multiple alternative parts, all of them were used.
 - [SharpMimeHeader] MimeTopLevelMediaType values didn't allow bitwise operations.
 - [SharpMessage] When a text part is dumped as an attachment, the mime-type check must be performed
   as if it were a application part.
 - [SharpMimeMessage] The content of Name property must be allowed by the constructor of FileInfo
   for later use, so now it's tested beforehand and if it fails, return a null value.
 - [SharpMimeMessage] DumpBody now handles properly the failure to create the file.

10/19/2005
 - [SF BUG - 1331793] parseHeaderFieldBody didn't handle properly spaces between parameter name
   and parameter value.
 - Update SharpMessage.Attachments documentation.
 - Released as version 0.4b [560]

10/15/2005
 - [SharpMessage] Added HasHtmlBody property.
 - [SharpAttachment] Initial implementation. It contains the relevant information about an
   attachment.
 - [SharpMessage] Changed de content of Attachments property from a collection of MemoryStream
   objects to SharpAttachment instances.
 - [SharpMessage] It is now possible to automatically save attachments to a given location.
   The SharpAttachment instances will contain the info about the saved files.
 - [SharpMessage] Added new constructors to allow the above.
 - [SharpMessage] When there is more than one text part, and there is html content, the plain ones
   are enclosed in <pre> elements.

09/29/2005
 - Version number set to 0.4
 - Bugfix: rfc2047decode wasn't decoding properly multiple encoded-words in the same field.

09/25/2005
 - Updated readme.txt
 - Released as version 0.3b [518]

09/24/2005
 - [SharpMimeHeader] Removed the instance of the encoding used to read the headers. Use the 
   static one instead.
 - [SharpMimeHeader] Added GetHeaderField method to give simple and flexible access to header
   fields.
 - [SharpMimeHeader] Rewrite all the properties that give access to header fields to use the
   above method.
 - [SharpMessage] Added GetHeaderField method to give direct access to decoded header fields.
 - [SharpMimeMessageStream] Rename the Encoding property as it had a typo.
 - [MimeTopLevelMediaType] Now can be used as bit maps.
 - [SharpMessage] Allow defining which Mime-Types are allowed.
 - [SharpMessage] Forbidding html content is now possible in the constructor.
 - [SharpMessage] Forbidding attachments is now possible in the constructor.
 - [SharpMimeHeader] Fixed bug introduced in ContentTransferEncoding earlier today.
 - [SharpMessage] Added some log statements.
 - [SharpMimeHeader] Added EncodingDefault property that allows setting the default encoding
   used. This allows violating RFC 2045 defaults, but as some MS software doesn't care conforming
   to this, there is the need to read their emails.

09/11/2005
 - [SharpMimeMessageStream] Rewritten the ReadLine method to bypass the StreamReader
   implementation. This allows the parsing of files saved in UNIX format. The
   new implementation also gives a significant performance boost.

09/08/2005
 - [SharpMimeMessage] Added more debug info to DumpBody method.
 - Added Makefile for linux compatibility.

07/26/2005
 - [SharpMimeTools] QuotedPrintable2Unicode: If the encoded equal sign is decoded too early then
   we can end up with incorrect decodes. Thanks bittercoder for the heads up.
 - [SharpMimeMessageStream] Discard buffered data if there is a new seek.

07/18/2005
 - [SharpMessage] There may be no Received field.
 - [SharpMimeTools] Date formats are always the same, so is faster to use a static array
   for them.
 - [SharpMimeTools] parseDate: Skip date parsing on empty strings sooner.
 - [SharpMimeTools] parseDate: Remove AM/PM string if found.
 - [SharpMimeTools] parseDate: The log message in case of exception while parsing, now encloses
   the date string so we know exact content.
 - [SharpMimeTools] uncommentString: Skip parsing on empty strings sooner.
 - [SharpMimeTools] uncommentString: Skip parsing strings without brackets as those aren't commented.
 - [SharpMimeMessageStream] Buffer last read line when discarding a read operation to avoid some
   unnecessary seeks/buffer discards in the stream. This should give a performance boost reading headers.
 - [SharpMimeMessageStream] Discard line data when it's a dot.
 - [SharpMimeMessageStream] When reading several lines, record the start point of the read operation
   properly.
 - [SharpMimeMessageStream] When reading folded lines, use lazy StringBuffer allocation. Then single line reads
   (not folded) should be faster.
 - [SharpMimeMessage] Do not remove trailing dot when reading body as this is handled in the stream.
 - Version number set to 0.3

07/16/2005
 - Implemented the SharpMessage as a general purpose parser. It only exposes
   the basic content: Subject, from, body, attachments, etc. All the mime complexity
   is handled internally and all the content is exposed parsed and decoded.
 - Generated a key pair and referenced in AssemblyInfo.cs so the compiled dll has
   strong name.
 - Version number set to 0.2
 - Released as version 0.2b (489)

07/10/2005
 - QuotedPrintable2Unicode is now rewritten using a StringBuilder. This should improve
   the performance when there are lots of replacements to do. It also avoids partial decodes.
 - [SF BUG - 1234080] QuotedPrintable2Unicode now takes care of the different possible sizes
   that a replaced item can have. Thanks Zvika Rap for the heads up.

06/12/2005
 - Bugfix: rfc2047decode wasn't following section 5 rule (1) properly.
   Thanks Christophe Delaforge for taking this to my attention.
 - [nant] Reorganized the documenter settings and changed the output format to Web.
   (the .chm file was failing due to some unknown issue)

05/04/2005
 - Bugfix: While decoding malformed base64 parts exceptions must be caught.
 - SharpMimeMessage: Added Close method. It clears the parts references.

04/22/2005
 - Bugfix: The message top level mime type was not being handled properly while parsing.

01/23/2005
 - Adjusted part of the ABNF syntax to a equivalent but more readable one.
 - Added the ABNF definition for comment.
 - Bugfix: The ABNF definition for dcontent had a missing ].
 - Removed redundant brackets and quantifiers to several ABNF items.
 - Other minor improvements to the ABNF items to get better performance.
 - Added static Regex for address definition.
 - Use the above in SharpMimeAddressCollection constructor.
 
01/02/2005
 - Update copyright notice.
 - [nant] Define build simbols RELEASE, NET_1_1, NET_2_0, MONO_1_0, MONO_2_0, API_1_1 and API_2_0.

12/19/2004
 - Added Contains method to header class.
 - When a header with the same name is found more than once, concatenate the content
   with CRLF separation.

12/18/2004
 - Bugfix: ABNF definition of atom was missing the CFWS part.

12/12/2004
 - .NET 2.0 Regex parser did not like an ABNF entry.
 - Added nant build targets for .NET 2.0 and Mono 2.0
 - Build the documentation for Mono now that it works.
 - Build different documentation for each framework version.

11/08/2004
 - Added nant build file.

10/15/2004
 - Bugfix: Actual ABNF definition of mailbox (RFC 2822 Section 3.2.6) was too
   hard for .NET regex engine. Thanks Chris Slatt for taking this to my attention
   and helping in the debug process.

08/14/2004
 - Fixed a difference in the way mono handles timezones in the date parser.
   It is caused by MS not following there own spec.

08/04/2004
 - Fixed the quoted-printable decoder definition
 - Bugfix: double dot at the beginning of lines where not being handled.
   Not sure how this code disappeared.

07/10/2004
 - Added more ABNF definitions for RFC 2822 and make all groups without
   capture
 - Bugfix: Address list parsing was a bit simplistic, now it is based on
   a regex

06/30/2004
 - Added Copyright notice to all source files
 - Added initial comments to public members

06/23/2004
 - Bugfix: Content-Transfer-Encoding was not being considered case
   insensitive

05/28/2004
 - Filled readme.txt

05/21/2004
 - Avoid several errors compiling with mono 0.91

05/11/2004
 - Minor cleanups
 - Skip the status response from servers if it is there
 - Bugfix: An extra CRLF was being added when reading bodies at the
   begining

05/10/2004
 - Added ReleaseMono and DebugMono configs to project
 - Cleanup some unused code
 
05/09/2004
 - Name Property removes Invalid Chars
 - Autogenerate attachment filename when there is no valid one
 - addr_spec ABNF definition added
 - Better cleanup of temp files when decoding attachments

05/04/2004
 - It is possible to write a part into a folder if there
   is a name present in headers
 - Added docs (readme and todo) to project

05/01/2004
 - Now ussing SharpDevelop

04/27/2004
 - Added ReturnPath property
 - Merged SharpMimeDecoders and SharpMimeParsers into SharpMimeTools

04/26/2004
 - Added doc folder, todo.txt and readme.txt to project
 - Project branded as SharpMimeTools
 - Namespace branded as anmar.SharpMimeTools

04/25/2004
 - Name property tries to discard any folder information. If disallowed
   characters are found, Name returns null

04/23/2004
 - Comments removed by default from Header object properties. Raw text is
   accessible from the indexer

04/18/2004 
 - Implemented Content-Transfer-Encoding quoted-printable on attachments
 - Name property takes into account Content-Location value

04/17/2004
 - Added some log4net statements
 - Code cleanups of debug info
 - Implemented enumerable Address parser that can be bound to controls

04/14/2004
 - Implemented Content-Transfer-Encoding 7bit, 8bit and binary
 - Some cleanups of old code
 - Renamed some Properties
 - Redefined the accessibility level of some classes, methods, etc.
 - Use System.String.Empty instead of ""

04/13/2004
 - Minor fixes

04/12/2004
 - Always apply RFC 2047 decoding when parsing header fields

04/10/2004
 - Fixed a bug in the quoted-printable decoder
 - Size property of message part implemented
 
04/09/2004
 - Fixed a bug in the quoted-printable decoder
 - Fixed a bug in the From field parser
 - Fixed a bug in the Name property

04/08/2004
 - Generic header field body parsing
 - Content-Disposition and Content-Location parsed when the headers are parsed
 - Name property of message part implemented
 - Parts property of message part implemented
 - It is possible to write a body into a stream

04/06/2004
  - Minor fixes
 
04/05/2004
 - Minor fixes

04/04/2004
- Fixed a bug in the rfc2047 decoder
- Added Assembly info

04/03/2004
 - Buffered reading improves performance in 50% when decoding
   messages linearly

03/31/2004
 - The parser is now recursive
 - Now the date parser is also compatible with RFC 822

03/30/2004
 - Some improvements to the parser

03/29/2004
 - Project forked from the existing codebase in CTNWebMail.NET
 - Reorganization of the files
 - Mayor rewrite of the code. It now looks much better :)
 - Added license.txt
