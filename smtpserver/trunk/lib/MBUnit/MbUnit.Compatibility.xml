<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MbUnit.Compatibility</name>
    </assembly>
    <members>
        <member name="T:MbUnit.Framework.OldArrayAssert">
            <summary>
            Array Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldArrayAssert.AreEqual(System.Boolean[],System.Boolean[])">
            <summary>
            Verifies that both array have the same dimension and elements.
            </summary>
            <param name="expected">The expected values.</param>
            <param name="actual">The actual values.</param>
        </member>
        <member name="M:MbUnit.Framework.OldArrayAssert.IsArrayType(System.Object)">
            <summary>
            Checks whether an object is of an <see cref="T:System.Array"/> type.
            </summary>
            <param name="obj">Object instance to check as an array.</param>
            <returns>True if <see cref="T:System.Array"/> Type, False otherwise.</returns>
        </member>
        <member name="T:MbUnit.Framework.OldAssert">
            <summary>
            Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This
            implementation makes sure there is no mistake in calling this function
            as part of Assert.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>true if the object is a numeric type.</returns>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Used to compare numeric types.  Comparisons between
            same types are fine (Int32 to Int32, or Int64 to Int64),
            but the Equals method fails across different types.
            This method was added to allow any numeric type to
            be handled correctly, by using <c>ToString</c> and
            comparing the result
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns></returns>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition.</param>
            <param name="format">
            The format of the message to display if the condition is false,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition.</param>
            <param name="format">
            The format of the message to display if the condition is false,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual.</param>
            <param name="message">The message printed out upon failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure.</param>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimals are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure.</param>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure.</param>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are equal. If
            they are not equals then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected.</param>
            <param name="actual">The actual value.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The message to display if objects are not equal.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreValueEqual(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
            <summary>
            Verifies that the value of the property described by <paramref name="pi"/> is the same
            in both ojects.
            </summary>
            <param name="pi">
            Property describing the value to test
            </param>
            <param name="expected">
            Reference object
            </param>
            <param name="actual">
            Actual object
            </param>
            <param name="indices">
            Index of the property.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message to be displayed when the objects are the same.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown with the message that is passed in.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
            <param name="message">The message to initialize the <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown with the message that is passed in.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
            <param name="message">The message to initialize the <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="message">The message to be printed when the two objects are not the same object.</param>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with the message that is
            passed in. This is used by the other Assert functions.
            </summary>
            <param name="format">
            The format of the message to initialize the <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with the message that is
            passed in. This is used by the other Assert functions.
            </summary>
            <param name="message">The message to initialize the <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Fail">
            <summary>
            Throws an <see cref="T:Gallio.Framework.Assertions.AssertionException"/> with the message that is
            passed in. This is used by the other Assert functions.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.LowerEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less.</param>
            <param name="arg2">The second value, expected to be greater.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:Gallio.Framework.Assertions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater.</param>
            <param name="arg2">The second value, expected to be less.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.GreaterEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.IComparable,System.IComparable,System.IComparable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.Between(System.IComparable,System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotBetween(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IDictionary)">
            <summary>
            Asserts that <paramref name="test"/> is in the dic <paramref name="dic"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IDictionary,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the dic <paramref name="dic"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IList)">
            <summary>
            Asserts that <paramref name="test"/> is in the list <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IList,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the list <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the enumerable collection <paramref name="enumerable"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.In(System.Object,System.Collections.IEnumerable)">
            <summary>
            Asserts that <paramref name="test"/> is in the enumerable collection <paramref name="enumerable"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IDictionary,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the dic <paramref name="dic"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IDictionary)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the dic <paramref name="dic"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IList,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the list <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IList)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the list <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the enumerable collection <paramref name="enumerable"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.NotIn(System.Object,System.Collections.IEnumerable)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the enumerable collection <paramref name="enumerable"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested.</param>
            <param name="message">The message to be displayed when the object is not null.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested.</param>
            <param name="message">The message to be displayed when the object is not null.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNaN(System.Double)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:Gallio.Framework.Assertions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
            <param name="message">The messge to display in case of failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
            <param name="message">The message to display in case of failure.</param>
            <param name="args">Array of objects to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
            <param name="message">The messge to display in case of failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination.</param>
            <param name="message">The message to display in case of failure.</param>
            <param name="args">Array of objects to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
            <param name="message">A message to display in case of failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
            <param name="message">A message to display in case of failure.</param>
            <param name="args">An array of objects to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
            <param name="message">A message to display in case of failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object being examined.</param>
            <param name="message">A message to display in case of failure.</param>
            <param name="args">An array of objects to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.FailNotEquals(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            This method is called when two objects have been compared and found to be
            different. This prints a nice message to the screen.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldAssert.FailNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
             This method is called when the two objects are not the same.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="T:MbUnit.Framework.OldCollectionAssert">
            <summary>
            Assertion helper for the <see cref="T:System.Collections.ICollection"/> class.
            </summary>
            <remarks>
            <para>
            This class contains static helper methods to verify assertions on the
            <see cref="T:System.Collections.ICollection"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreSyncRootEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreSyncRootEqual(System.Object,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsSynchronized(System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsNotSynchronized(System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreIsSynchronizedEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreIsSynchronizedEqual(System.Boolean,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreCountEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.Count"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreCountEqual(System.Int32,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.Count"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsCountCorrect(System.Collections.ICollection)">
            <summary>
            Verifies that the <see cref="P:System.Collections.ICollection.Count"/> property
            is synchronized with the number of iterated elements.
            </summary>
            <param name="col">
            Collection to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="col"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that <paramref name="expected"/> and <paramref name="actual"/>
            are equal collections. Element count and element wize equality is verified.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreElementsEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that <paramref name="expected"/> and <paramref name="actual"/>
            are equal collections. Element count and element wize equality is verified.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.ElementsEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String@)">
            <summary>
            Verifies that <paramref name="expected"/> and <paramref name="actual"/>
            are equal collections. Element count and element wize equality is verified.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
            <param name="failMessage">
            Reason for unequality.
            </param> 
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered.</param>
            <param name="actual">The second ICollection of objects to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object to be found within collection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object to be found within collection.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object to be found within collection.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object that cannot exist within collection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object that cannot exist within collection.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered.</param>
            <param name="actual">Object that cannot exist within collection.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that subset is not a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that subset is not a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that subset is not a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that subset is a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that subset is a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that subset is a subset of superset.
            </summary>
            <param name="subset">The ICollection subset to be considered.</param>
            <param name="superset">The ICollection superset to be considered.</param>
            <param name="message">The message that will be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldCollectionAssert.CheckItemInCollection(System.Collections.ICollection,System.Object)">
            <summary>
            Checks an item if included in a given collection.
            </summary>
            <param name="collection">The collection to check from.</param>
            <param name="item">The item to be checked.</param>
            <returns>True if item is included, False otherwise.</returns>
        </member>
        <member name="T:MbUnit.Framework.OldGenericAssert">
            <summary>
            Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
            <param name="args">Arguments to be used in formatting the message.</param>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
            <param name="message">The message to be displayed on failure.</param>
        </member>
        <member name="M:MbUnit.Framework.OldGenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection.</param>
        </member>
        <member name="T:MbUnit.Framework.OldReflectionAssert">
            <summary>
            Reflection Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Asserts whether an instance of the <paramref name="parent"/> 
            can be assigned from an instance of <paramref name="child"/>.
            </summary>
            <param name="parent">
            Parent <see cref="T:System.Type"/> instance.
            </param>
            <param name="child">
            Child <see cref="T:System.Type"/> instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts whether <paramref name="child"/> is an instance of the 
            <paramref name="type"/>.
            </summary>
            <param name="type">
            <see cref="T:System.Type"/> instance.
            </param>
            <param name="child">
            Child instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasDefaultConstructor(System.Type)">
            <summary>
            Asserts that the type has a default public constructor
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasConstructor(System.Type,System.Type[])">
            <summary>
            Asserts that the type has a public instance constructor with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Asserts that the type has a constructor, with the specified bindind flags, with a signature defined by parameters.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasMethod(System.Type,System.String,System.Type[])">
            <summary>
            Asserts that the type has a public instance method with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[])">
            <summary>
            Asserts that the type has a method, with the specified bindind flags, with a signature defined by parameters.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasField(System.Type,System.String)">
            <summary>
            Asserts that the type has a public field method with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.OldReflectionAssert.HasField(System.Type,System.Reflection.BindingFlags,System.String)">
            <summary>
            Asserts that the type has a field, with the specified bindind flags, with a signature defined by parameters.
            </summary>								
        </member>
        <member name="T:MbUnit.Framework.OldStringAssert">
            <summary>
            String Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.AreEqualIgnoreCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, ignoring the case
            </summary>
            <param name="s1">
            Expected string.
            </param>
            <param name="s2">
            Actual string.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.IsEmpty(System.String)">
            <summary>
            Asserts that the string is non null and empty
            </summary>
            <param name="s">
            String to test.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.IsNonEmpty(System.String)">
            <summary>
            Asserts that the string is non null and non empty
            </summary>
            <param name="s">
            String to test.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.FullMatch(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a full match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
             <summary>
             Asserts the regular expression regex makes a full match on
            <paramref name="s"/>.
             </summary>		
             <param name="s">
             String to test.
             </param>
             <param name="regex">
             Regular expression.
             </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.Like(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.Like(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Asserts the regular expression regex makes a match on s
            </summary>	
            <param name="s">
            String to test.
            </param>
            <param name="regex">
            A <see cref="T:System.Text.RegularExpressions.Regex"/> instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.NotLike(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Asserts the regular expression regex makes a match on s
            </summary>		
            <param name="s">
            String to test.
            </param>
            <param name="regex">
            A <see cref="T:System.Text.RegularExpressions.Regex"/> instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.OldStringAssert.DoesNotContain(System.String,System.Char[])">
            <summary>
            Asserts the string does not contain c
            </summary>	
            <param name="s">
            String to test.
            </param>
            <param name="anyOf">
            Variable list of characeters.
            </param> 			
        </member>
        <member name="T:MbUnit.Framework.Reflection.AccessModifier">
            <summary>
             Access modifier of a class or class member.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.AccessModifier.Public">
            <summary>
             Public.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.AccessModifier.NonPublic">
            <summary>
             Protected, internal, private.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.AccessModifier.Static">
            <summary>
            Static.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.AccessModifier.Default">
            <summary>
            Default that includes public, protected, internal, private, and static.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Reflection.MemberType">
            <summary>
             Member types of a class.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.MemberType.Method">
            <summary>
             Method.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.MemberType.Field">
            <summary>
            Field or variable.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Reflection.MemberType.Property">
            <summary>
             Property.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Reflection.NamespaceDoc">
            <summary>
            The MbUnit.Framework.Reflection namespace provides helpers for accessing
            non-public members of types from test code.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Reflection.ReflectionException">
            <summary>
            Indicates that a reflection operation performed by <see cref="T:MbUnit.Framework.Reflection.Reflector"/> failed.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor">
            <summary>
            Creates an exception.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.String)">
            <summary>
            Creates an exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from serialization info.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:MbUnit.Framework.Reflection.Reflector">
            <summary>
             Helper class to test non-public classes and class members.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.Object)">
            <summary>
            Constructor for object.
            </summary>
            <param name="obj">Object to be referred to in methods.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.String,System.String)">
            <summary>
            Use this constructor if you plan to test default constructor of a non-public class.
            </summary>
            <param name="assemblyName">Assembly name.</param>
            <param name="typeName">Type name.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Use this constructor if you plan to test constructor with arguments of a non-public class.
            </summary>
            <param name="assemblyName">Assembly name.</param>
            <param name="typeName">Type name.</param>
            <param name="args">Parameters for a constructor.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String)">
            <summary>
            Gets the public, non-public, or static field value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="access">Specify field access modifier.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier,System.Boolean)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="access">Specify field access modifier.</param>
            <param name="lookInBase">Specify if need to look in Base classes.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Field Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Field Value.</param>
            <param name="access">Specify field access modifier.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.String)">
            <summary>
            Gets the property value
            </summary>
            <param name="propertyName">Property Name.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String)">
            <summary>
            Get the property value
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="propertyName">Property Name.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Boolean)">
            <summary>
            Get the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="propertyName">Property Name.</param>
            <param name="lookInBase">Specify if need to look in Base classes.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="propertyName">Property Name.</param>
            <param name="propertyValue">Property Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="propertyName">Property Name.</param>
            <param name="propertyValue">Property Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String)">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="methodName">Method to call.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String,System.Object[])">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="methodName">Method to call.</param>
            <param name="methodParams">Method's parameters.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object[])">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="methodName">Method to call.</param>
            <param name="access">Specify method access modifier.</param>
            <param name="methodParams">Method's parameters.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String)">
            <summary>
            Creates an instance
            </summary>
            <param name="assemblyName">Full assembly path.</param>
            <param name="typeName">Type Name such as (System.String).</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            Creates an instance
            </summary>
            <param name="assemblyName">Full assembly path.</param>
            <param name="typeName">Type Name such as (System.String)</param>
            <param name="args">Constructor parameters.</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.Object,System.String)">
            <summary>
            Gets the public, non-public, or static field value.
            </summary>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="access">Specify field access modifier.</param>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
            <summary>
            Gets the field value.
            </summary>
            <param name="access">Specify field access modifier.</param>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field name.</param>
            <param name="lookInBase">Specify if need to look in Base classes.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.Object,System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Field Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="access">Specify field access modifier.</param>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Field Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the field value.
            </summary>
            <param name="access">Specify field access modifier.</param>
            <param name="obj">Object where field is defined.</param>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Field Value.</param>
            <param name="lookInBase">Specify if need to look in Base classes.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="obj">Object where property is defined.</param>
            <param name="propertyName">Property Name.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="obj">Object that has the property.</param>
            <param name="propertyName">Property Name.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
            <summary>
            Gets the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="obj">Object that has the property.</param>
            <param name="propertyName">Property Name.</param>
            <param name="lookInBase">Set to true if need look for the property in base classes.</param>
            <returns>Property Value.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="obj">Object where property is defined.</param>
            <param name="propertyName">Property Name.</param>
            <param name="propertyValue">Property Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="obj">Object where property is defined.</param>
            <param name="propertyName">Property Name.</param>
            <param name="propertyValue">Property Value.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="access">Specify property access modifier.</param>
            <param name="obj">Object where property is defined.</param>
            <param name="propertyName">Property Name.</param>
            <param name="propertyValue">Property Value.</param>
            <param name="lookInBase">Set to true if need look for the property in base classes.</param>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String)">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="obj">Object where method is defined.</param>
            <param name="methodName">Method to call.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="obj">Object where method is defined.</param>
            <param name="methodName">Method to call.</param>
            <param name="methodParams">Method's parameters.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object[])">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="access">Specify method access modifier.</param>
            <param name="obj">Object where method is defined.</param>
            <param name="methodName">Method to call.</param>
            <param name="methodParams">Method's parameters.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean,System.Object[])">
            <summary>
            Executes a non-public method with arguments on a object
            </summary>
            <param name="access">Specify method access modifier.</param>
            <param name="obj">Object where method is defined.</param>
            <param name="methodName">Method to call.</param>
            <param name="lookInBase">Speicifies if to search for the method in the base classes or not.</param>
            <param name="methodParams">Method's parameters.</param>
            <returns>The object the method should return.</returns>
        </member>
        <member name="T:MbUnit.Framework.RowTestAttribute">
            <summary>
            Provides compatibility with MbUnit v2 row test feature.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.OldSecurityAssert">
            <summary>
            Security Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.IsAuthenticated(System.Security.Principal.IIdentity)">
            <summary>
            Asserts that <paramref name="identity"/> is authenticated.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.IsNotAuthenticated(System.Security.Principal.IIdentity)">
            <summary>
            Asserts that <paramref name="identity"/> is not authenticated.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowIsAuthenticated">
            <summary>
            Asserts that the current windows identity is authenticated.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowIsNotAuthenticated">
            <summary>
            Asserts that the current windows identity is not authenticated.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowsIsInRole(System.Security.Principal.WindowsBuiltInRole)">
            <summary>
            Asserts that the current windows identity is in <param name="role"/>.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowsIsInAdministrator">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.Administrator"/> role.
            </summary>						
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowsIsInGuest">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.Guest"/> role.
            </summary>								
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowsIsInPowerUser">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.PowerUser"/> role.
            </summary>								
        </member>
        <member name="M:MbUnit.Framework.OldSecurityAssert.WindowsIsInUser">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.User"/> role.
            </summary>								
        </member>
        <member name="T:MbUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Provides compatibility with MbUnit v2 test fixture set up.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Provides compatibility with MbUnit v2 test fixture tear down.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.OldXmlAssert">
            <summary>
            Class containing generic assert methods for XML markup
            </summary>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlEquals(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            Asserts that two pieces of XML are similar.
            </summary>
            <param name="controlTextReader">The control text reader.</param>
            <param name="testTextReader">The test text reader.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlEquals(System.String,System.String)">
            <summary>
            Asserts that two pieces of XML are similar.
            </summary>
            <param name="controlText">The control text.</param>
            <param name="testText">The test text.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlEquals(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
            <summary>
            Asserts that two pieces of XML are similar.
            </summary>
            <param name="controlInput">The control input.</param>
            <param name="testInput">The test input.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlIdentical(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            Asserts that two pieces of XML are identical.
            </summary>
            <param name="controlTextReader">The control text reader.</param>
            <param name="testTextReader">The test text reader.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlIdentical(System.String,System.String)">
            <summary>
            Asserts that two pieces of XML are identical.
            </summary>
            <param name="controlText">The control text.</param>
            <param name="testText">The test text.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlIdentical(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
            <summary>
            Asserts that two pieces of XML are identical.
            </summary>
            <param name="controlInput">The control input.</param>
            <param name="testInput">The test input.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlEquals(MbUnit.Framework.Xml.XmlDiff)">
            <summary>
            Asserts that two pieces of XMl are similar given their diff
            </summary>
            <param name="xmlDiff">The XML diff.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlNotEquals(MbUnit.Framework.Xml.XmlDiff)">
            <summary>
            Asserts that two pieces of XMl are not similar given their diff
            </summary>
            <param name="xmlDiff">The XML diff.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlEquals(MbUnit.Framework.Xml.XmlDiff,System.Boolean)">
            <summary>
            Asserts that two pieces of XML are similar (or not) given their diff and a boolean value
            </summary>
            <param name="xmlDiff">The XML diff.</param>
            <param name="equal">if set to <c>true</c> the assert passes if the XML is similar.
            if <c>false</c>, the assert passes if the XML is not similar.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlIdentical(MbUnit.Framework.Xml.XmlDiff)">
            <summary>
            Asserts that two pieces of XML are identical given their diff
            </summary>
            <param name="xmlDiff">The XML diff.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlNotIdentical(MbUnit.Framework.Xml.XmlDiff)">
            <summary>
            Asserts that two pieces of XML are not identical given their diff
            </summary>
            <param name="xmlDiff">The XML diff.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlIdentical(MbUnit.Framework.Xml.XmlDiff,System.Boolean)">
            <summary>
            Asserts that two pieces of XML are identical (or not) given their diff and a boolean value
            </summary>
            <param name="xmlDiff">The XML diff.</param>
            <param name="identical">if set to <c>true</c> the assert passes if the XML is identical.
            if <c>false</c>, the assert passes if the XML is not identical.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(System.String)">
            <summary>
            Asserts that <paramref name="someXml"/> is valid XML.
            </summary>
            <param name="someXml">The XMl to test.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(System.String,System.String)">
            <summary>
            Asserts that <paramref name="someXml"/> is valid XML given a <paramref name="baseURI"/>
            </summary>
            <param name="someXml">The XML to test.</param>
            <param name="baseURI">The base URI.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(System.IO.TextReader)">
            <summary>
            Asserts that some XML is valid.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> pointing to the XML to test.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(System.IO.TextReader,System.String)">
            <summary>
            Asserts that some XML is valid given a <paramref name="baseURI"/>
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> pointing to the XML to test.</param>
            <param name="baseURI">The base URI.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(MbUnit.Framework.Xml.XmlInput)">
            <summary>
            Asserts that some XML is valid.
            </summary>
            <param name="xmlInput">The XML input.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XmlValid(MbUnit.Framework.Xml.Validator)">
            <summary>
            Asserts that some XML is valid.
            </summary>
            <param name="validator">A <see cref="T:MbUnit.Framework.Xml.Validator"/> object containing the XML to validate.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathExists(System.String,System.String)">
            <summary>
            Assert that an XPath expression matches at least one node in someXml
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">The XML being tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathExists(System.String,System.IO.TextReader)">
            <summary>
            Assert that an XPath expression matches at least one node in someXml
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">A reader ontot eh XML being tested.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathExists(System.String,MbUnit.Framework.Xml.XmlInput)">
            <summary>
            Assert that an XPath expression matches at least one node in someXml
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">The XML to test.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathEvaluatesTo(System.String,System.String,System.String)">
            <summary>
            Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value 
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">The XML to test.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathEvaluatesTo(System.String,System.IO.TextReader,System.String)">
            <summary>
            Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value 
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">The XML to test.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XPathEvaluatesTo(System.String,MbUnit.Framework.Xml.XmlInput,System.String)">
            <summary>
            Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value 
            </summary>
            <param name="anXPathExpression">An X path expression.</param>
            <param name="inXml">The XML to test.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XslTransformResults(System.String,System.String,System.String)">
            <summary>
            Asserts that the results of an XSL transform on some XML are the expected result
            </summary>
            <param name="xslTransform">The XSL transform.</param>
            <param name="xmlToTransform">The XML to transform.</param>
            <param name="expectedResult">The expected result.</param>
        </member>
        <member name="M:MbUnit.Framework.OldXmlAssert.XslTransformResults(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
            <summary>
            Asserts that the results of an XSL transform on some XML are the expected result
            </summary>
            <param name="xslTransform">The XSL transform.</param>
            <param name="xmlToTransform">The XML to transform.</param>
            <param name="expectedResult">The expected result.</param>
        </member>
        <member name="T:MbUnit.Framework.Xml.Differences">
            <summary>
            Utilities for manipulating differences.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Xml.Differences.IsMajorDifference(MbUnit.Framework.Xml.DifferenceType)">
            <summary>
            Returns true is a difference is considered significant.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Xml.DifferenceType">
            <summary>
            Describes the type of difference found.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeValueExplicitlySpecified">
            <summary>
            Comparing an implied attribute value against an explicit value 
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeNameNotFound">
            <summary>
            Comparing 2 elements and one has an attribute the other does not
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeValue">
            <summary>
            Comparing 2 attributes with the same name but different values
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeSequence">
            <summary>
            Comparing 2 attribute lists with the same attributes in different sequence
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.CDATAValue">
            <summary>
            Comparing 2 CDATA sections with different values
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.CommentValue">
            <summary>
            Comparing 2 comments with different values
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.DOCTYPE_NAME_ID">
            <summary>
            Comparing 2 document types with different names
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.DocTypePublicID">
            <summary>
            Comparing 2 document types with different public identifiers
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.DocTypeSystemID">
            <summary>
            Comparing 2 document types with different system identifiers
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.ElementTagName">
            <summary>
            Comparing 2 elements with different tag names
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.ELEMENT_NUM_ATTRIBUTES_ID">
            <summary>
            Comparing 2 elements with different number of attributes
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.PROCESSING_INSTRUCTION_TARGET_ID">
            <summary>
            Comparing 2 processing instructions with different targets
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.PROCESSING_INSTRUCTION_DATA_ID">
            <summary>
            Comparing 2 processing instructions with different instructions
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.TEXT_VALUE_ID">
            <summary>
            Comparing 2 different text values
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.NAMESPACE_PREFIX_ID">
            <summary>
            Comparing 2 nodes with different namespace prefixes
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.NAMESPACE_URI_ID">
            <summary>
            Comparing 2 nodes with different namespace URIs
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.NODE_TYPE_ID">
            <summary>
            Comparing 2 nodes with different node types
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_CHILD_NODES_ID">
            <summary>
            Comparing 2 nodes but only one has any children
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.CHILD_NODELIST_LENGTH_ID">
            <summary>
            Comparing 2 nodes with different numbers of children
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.CHILD_NODELIST_SEQUENCE_ID">
            <summary>
            Comparing 2 nodes with children whose nodes are in different sequence
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_DOCTYPE_DECLARATION_ID">
            <summary>
            Comparing 2 Documents only one of which has a doctype
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_XML_DECLARATION_PREFIX_ID">
            <summary>
            Comparing 2 Documents only one of which has an XML Prefix Declaration
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Xml.NamespaceDoc">
            <summary>
            The MbUnit.Framework.Xml namespace contains types for comparing Xml documents.
            </summary>
        </member>
    </members>
</doc>
