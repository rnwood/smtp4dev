<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gallio35</name>
    </assembly>
    <members>
        <member name="T:Gallio.Common.Linq.ActionExtensions">
            <summary>
            Extension methods for <see cref="T:Gallio.Common.Action"/> delegates.
            </summary>
        </member>
        <member name="M:Gallio.Common.Linq.ActionExtensions.AsUnitFunc(System.Action)">
            <summary>
            Wraps an action as a function that returns a dummy <see cref="T:Gallio.Common.Unit"/> value.
            </summary>
            <returns>The function.</returns>
        </member>
        <member name="T:Gallio.Common.Linq.ExpressionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionExtensions.Bind``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Binds the arguments of a function expression.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="expr">The expression.</param>
            <param name="arg">The argument value.</param>
            <returns>The bound function.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionExtensions.Bind``3(System.Linq.Expressions.Expression{System.Func{``0,``2}},``0,``1)">
            <summary>
            Binds the arguments of a function expression.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="expr">The expression.</param>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The bound function.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionExtensions.IsCapturedVariable(System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the expression represents a captured variable within a closure.
            </summary>
            <param name="expr">The expression.</param>
            <returns>True if the expression represents a captured variable.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionExtensions.IsCapturedVariable(System.Linq.Expressions.MemberExpression)">
            <summary>
            Returns true if the expression represents a captured variable within a closure.
            </summary>
            <param name="expr">The expression.</param>
            <returns>True if the expression represents a captured variable.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionExtensions.IsCapturedVariableOrParameter(System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the expression represents a captured variable or a parameter.
            </summary>
            <param name="expr">The expression.</param>
            <returns>True if the expression represents a captured variable or a parameter.</returns>
        </member>
        <member name="T:Gallio.Common.Linq.ExpressionInstrumentor">
            <summary>
            Instuments an <see cref="T:System.Linq.Expressions.Expression`1"/> to intercept intermediate results
            from each sub-expression.
            </summary>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionInstrumentor.Compile``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Compiles an expression to introduce trace points.
            </summary>
            <typeparam name="T">The expression type.</typeparam>
            <param name="expr">The expression tree.</param>
            <returns>The compiled delegate representing expression.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expr"/> is null.</exception>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionInstrumentor.Rewrite``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Rewrites an expression tree to introduce trace points.
            </summary>
            <typeparam name="T">The expression type.</typeparam>
            <param name="expr">The expression tree.</param>
            <returns>The compiled delegate representing expression.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expr"/> is null.</exception>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionInstrumentor.Intercept``1(System.Linq.Expressions.Expression,System.Func{``0})">
            <summary>
            Evaluates a sub-expression and collects trace information.
            </summary>
            <typeparam name="T">The return type of the sub-expression.</typeparam>
            <param name="expr">The sub-expression to evaluate.</param>
            <param name="continuation">The continuation that evaluates the sub-expression.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="T:Gallio.Common.Linq.ExpressionVisitor`1">
            <summary>
            Performs different actions depending on the type of <see cref="T:System.Linq.Expressions.Expression"/> visited.
            </summary>
            <typeparam name="T">The visitor result type.</typeparam>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a unary expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a call expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a conditional expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an invocation expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a lambda expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits an list init expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a member access expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a member init expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a new expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a new array expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a parameter expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a type binary expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Gallio.Common.Linq.ExpressionVisitor`1.VisitAny(System.Linq.Expressions.Expression)">
            <summary>
            <para>
            Visits an expression of any type that does not have other special behavior.
            </para>
            <para>
            The default implementation throws <see cref="T:System.NotSupportedException"/>.
            </para>
            </summary>
            <param name="expr">The expression.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Gallio.Common.Linq.NamespaceDoc">
            <summary>
            The Gallio.Common.Linq namespace contains types for manipulating Linq expressions. 
            </summary>
        </member>
        <member name="T:Gallio.Framework.Assertions.AssertionConditionEvaluator">
            <summary>
            Evaluates a conditional expression.  If the condition evaluates differently
            than expected, returns a detailed <see cref="T:Gallio.Framework.Assertions.AssertionFailure"/> that
            describes the formatted values of relevant sub-expressions within the condtion.
            </summary>
        </member>
        <member name="M:Gallio.Framework.Assertions.AssertionConditionEvaluator.Eval(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean,System.String,System.Object[])">
            <summary>
            Evaluates a conditional expression.
            </summary>
            <param name="condition">The conditional expression.</param>
            <param name="expectedResult">The expected result.</param>
            <param name="messageFormat">The custom assertion message format, or null if none.</param>
            <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
            <returns>The assertion failure if the conditional expression evaluated
            to a different result than was expected or threw an exception, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="condition"/> is null.</exception>
        </member>
        <member name="T:Gallio.Runtime.Formatting.ExpressionFormattingRule">
            <summary>
            A formatting rule for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <remarks>
            <para>
            Formats expression trees using a more familiar C#-like syntax than
            the default.  Also recognizes captured variables and displays them
            naturally to conceal the implied field access to an anonymous class.
            </para>
            <para>
            Made-up syntax for nodes that cannot be directly represented in C#.
            <list type="bullet">
            <item>Power operator: **, as in a ** b</item>
            <item>Quote expression: `...`, as in `a + b`</item>
            <item>Constants: formatted recursively using other formatters, which may yield unusual syntax</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Gallio.Runtime.Formatting.ExpressionFormattingRule.GetPriority(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gallio.Runtime.Formatting.ExpressionFormattingRule.Format(System.Object,Gallio.Runtime.Formatting.IFormatter)">
            <inheritdoc />
        </member>
        <member name="T:Gallio.Runtime.Formatting.FormatterExtensions">
            <summary>
            Extensions methods for formatting.
            </summary>
        </member>
        <member name="M:Gallio.Runtime.Formatting.FormatterExtensions.Format(System.Object)">
            <summary>
            Formats an object using the default <see cref="T:Gallio.Runtime.Formatting.IFormatter"/>.
            </summary>
            <param name="obj">The object to format.</param>
            <returns>The formatted object.</returns>
        </member>
        <member name="M:Gallio.Runtime.Formatting.FormatterExtensions.Format(System.Object,Gallio.Runtime.Formatting.IFormatter)">
            <summary>
            Formats an object using the specified <see cref="T:Gallio.Runtime.Formatting.IFormatter"/>.
            </summary>
            <param name="obj">The object to format.</param>
            <param name="formatter">The formatter to use, or null for the default.</param>
            <returns>The formatted object.</returns>
        </member>
    </members>
</doc>
