<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSBuild.Community.Tasks</name>
    </assembly>
    <members>
        <member name="T:MSBuild.Community.Tasks.AspNet.InstallAspNet">
            <summary>
            Installs and register script mappings for ASP.NET
            </summary>
            <remarks>Uses the aspnet_regiis.exe tool included with the .NET Framework.</remarks>
            <example>
      Install the latest version of ASP.NET on the server:
      <code>
        <![CDATA[ <InstallAspNet /> ]]>
      </code>
    </example><example>
      Install the latest version of ASP.NET on the server, but do not update script maps:
      <code>
        <![CDATA[ <InstallAspNet ApplyScriptMaps="Never" /> ]]>
      </code>
    </example><example>
      Install the script maps for ASP.NET 2.0 on a web directory on the default website:
      <code>
        <![CDATA[ <InstallAspNet Path="MyApplication" Version="Version20" /> ]]>
      </code>
    </example><example>
      Install the script maps for ASP.NET 1.1 on a web directory on a non-default website:
      <code>
        <![CDATA[ <InstallAspNet Path="MyApplication" Version="W3SVC/3/Root/Version11" /> ]]>
      </code>
    </example><example>
      Install client side script only for the latest version:
      <code>
        <![CDATA[ <InstallAspNet ClientScriptsOnly="True" /> ]]>
      </code>
    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.AspNet.InstallAspNet.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.AspNet.InstallAspNet.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments 
            to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass 
            directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.AspNet.InstallAspNet.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.AspNet.InstallAspNet.IsValidPropertyCombinations">
            <summary>
            Determines if the current property values can be used together
            </summary>
            <returns><see langword="true"/> when properties can be used together.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Version">
            <summary>
            The version of ASP.NET to install
            </summary>
            <remarks>
            The default behavior is to use the latest version of ASP.NET available on the computer.
            <list type="table">
            <listheader><term>Version</term></listheader>
            <item><term>Version11</term><description>ASP.NET v1.1</description></item>
            <item><term>Version20</term><description>ASP.NET v2.0</description></item>
            <item><term>VersionLatest</term><description>The latest version of ASP.NET available</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.ApplyScriptMaps">
            <summary>
            The method used to determine if ASP.NET script mappings should be applied
            </summary>
            <remarks>
            The default behavior is to register script mappings on all sites except those with a newer version of ASP.NET.
            <list type="table">
            <listheader><term>Value</term></listheader>
            <item><term>Never</term><description>Register ASP.NET on the computer without updating any script mappings.</description></item>
            <item><term>IfNoneExist</term><description>Register script mappings only on for sites that do not have any existing ASP.NET script mappings (not available for ASP.NET v1.1)</description></item>
            <item><term>UnlessNewerExist</term><description>Register script mappings on all sites except those with a newer version of ASP.NET.</description></item>
            <item><term>Always</term><description>Register script mappings on all sites, even if they already have a newer version of ASP.NET.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.ClientScriptsOnly">
            <summary>
            When <see langword="true"/>, the aspnet_client scripts will be installed. No script mappings will be updated.
            </summary>
            <remarks>This cannot be <see langword="true"/> if a value for <see cref="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Path"/> or <see cref="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.ApplyScriptMaps"/> has been specified.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Path">
            <summary>
            The web application that should have its script maps updated.
            </summary>
            <remarks>
            The path must be of the form W3SVC/[instance]/Root/[webdirectory], for example W3SVC/1/Root/SampleApp1.
            As a shortcut, you can specify just the web directory name,
            if the web directory is installed in the default website instance (W3SVC/1/Root).
            <para>You should not specify a value for <see cref="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.ApplyScriptMaps"/> when specifying a path.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Recursive">
            <summary>
            When <see langword="true"/>, script maps are applied recursively under <see cref="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Path"/>.
            </summary>
            <remarks>This property is only valid when specifying a value for <see cref="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.Path"/>. It is <see langword="true"/> by default.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.AspNet.InstallAspNet.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.AssemblyInfo">
            <summary>
            Generates an AssemblyInfo files
            </summary>
            <example>
            <para>Generates a common version file.</para>
            <code><![CDATA[
            <AssemblyInfo CodeLanguage="CS"  
                OutputFile="VersionInfo.cs" 
                AssemblyVersion="1.0.0.0" 
                AssemblyFileVersion="1.0.0.0" />
            ]]></code>
            <para>Generates a complete version file.</para>
            <code><![CDATA[
            <AssemblyInfo CodeLanguage="CS"  
                OutputFile="$(MSBuildProjectDirectory)\Test\GlobalInfo.cs" 
                AssemblyTitle="AssemblyInfoTask" 
                AssemblyDescription="AssemblyInfo Description"
                AssemblyConfiguration=""
                AssemblyCompany="Company Name, LLC"
                AssemblyProduct="AssemblyInfoTask"
                AssemblyCopyright="Copyright (c) Company Name, LLC 2006"
                AssemblyTrademark=""
                ComVisible="false"
                CLSCompliant="true"
                Guid="d038566a-1937-478a-b5c5-b79c4afb253d"
                AssemblyVersion="1.0.0.0" 
                AssemblyFileVersion="1.0.0.0" />
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.Community.Tasks.AssemblyInfo.DEFAULT_OUTPUT_FILE">
            <summary>
            The default value of <see cref="P:MSBuild.Community.Tasks.AssemblyInfo.OutputFile"/>.
            The value is <c>"AssemblyInfo.cs"</c>.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.AssemblyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AssemblyInfo"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.AssemblyInfo.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.CodeLanguage">
            <summary>
            Gets or sets the code language.
            </summary>
            <value>The code language.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.ComVisible">
            <summary>
            Gets or sets a value indicating whether [COMVisible].
            </summary>
            <value><c>true</c> if [COMVisible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.CLSCompliant">
            <summary>
            Gets or sets a value indicating whether [CLSCompliant].
            </summary>
            <value><c>true</c> if [CLSCompliant]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyTitle">
            <summary>
            Gets or sets the assembly title.
            </summary>
            <value>The assembly title.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyDescription">
            <summary>
            Gets or sets the assembly description.
            </summary>
            <value>The assembly description.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyConfiguration">
            <summary>
            Gets or sets the assembly configuration.
            </summary>
            <value>The assembly configuration.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyCompany">
            <summary>
            Gets or sets the assembly company.
            </summary>
            <value>The assembly company.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyProduct">
            <summary>
            Gets or sets the assembly product.
            </summary>
            <value>The assembly product.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyCopyright">
            <summary>
            Gets or sets the assembly copyright.
            </summary>
            <value>The assembly copyright.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyTrademark">
            <summary>
            Gets or sets the assembly trademark.
            </summary>
            <value>The assembly trademark.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyCulture">
            <summary>
            Gets or sets the assembly culture.
            </summary>
            <value>The assembly culture.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyVersion">
            <summary>
            Gets or sets the assembly version.
            </summary>
            <value>The assembly version.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyFileVersion">
            <summary>
            Gets or sets the assembly file version.
            </summary>
            <value>The assembly file version.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyInformationalVersion">
            <summary>
            Gets or sets the assembly informational version.
            </summary>
            <value>The assembly informational version.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyKeyFile">
            <summary>
            Gets or sets the assembly key file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyKeyName">
            <summary>
            Gets or sets the assembly key name.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.AssemblyDelaySign">
            <summary>
            Gets or sets the assembly delay sign value.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.GenerateClass">
            <summary>
            Gets or sets a value indicating whether to generate the ThisAssmebly class.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.AssemblyInfo.OutputFile">
            <summary>
            Gets or sets the output file.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.Attrib">
            <summary>
            Changes the attributes of files and/or directories
            </summary>
            <example>
            <para>Make file Readonly, Hidden and System.</para>
            <code><![CDATA[
            <Attrib Files="Test\version.txt" 
                ReadOnly="true" Hidden="true" System="true"/>
            ]]></code>
            <para>Clear Hidden and System attributes.</para>
            <code><![CDATA[
            <Attrib Files="Test\version.txt" 
                Hidden="false" System="false"/>
            ]]></code>
            <para>Make file Normal.</para>
            <code><![CDATA[
            <Attrib Files="Test\version.txt" 
                Normal="true"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Attrib.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Files">
            <summary>
            Gets or sets the list of files to change attributes on.
            </summary>
            <value>The files to change attributes on.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Directories">
            <summary>
            Gets or sets the list of directories to change attributes on.
            </summary>
            <value>The directories to change attributes on.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Archive">
            <summary>
            Gets or sets file's archive status.
            </summary>
            <value><c>true</c> if archive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Compressed">
            <summary>
            Gets or sets a value indicating file is compressed.
            </summary>
            <value><c>true</c> if compressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Encrypted">
            <summary>
            Gets or sets a value indicating file is encrypted.
            </summary>
            <value><c>true</c> if encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Hidden">
            <summary>
            Gets or sets a value indicating file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
            <value><c>true</c> if hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.Normal">
            <summary>
            Gets or sets a value indicating file is normal and has no other attributes set.
            </summary>
            <value><c>true</c> if normal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.ReadOnly">
            <summary>
            Gets or sets a value indicating file is read-only.
            </summary>
            <value><c>true</c> if read-only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Attrib.System">
            <summary>
            Gets or sets a value indicating file is a system file.
            </summary>
            <value><c>true</c> if system; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.GacUtilCommands">
            <summary>
            The list of the commans available to the GacUtil Task
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.GacUtilCommands.Install">
            <summary>Install the list of assemblies into the GAC.</summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.GacUtilCommands.Uninstall">
            <summary>Uninstall the list of assembly names from the GAC.</summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.GacUtil">
            <summary>
            MSBuild task to install and uninstall asseblies into the GAC
            </summary>
            <example>Install a dll into the GAC.
            <code><![CDATA[
                <GacUtil 
                    Command="Install" 
                    Assemblies="MSBuild.Community.Tasks.dll" 
                    Force="true" />
            ]]></code>
            </example>
            <example>Uninstall a dll from the GAC.
            <code><![CDATA[
                <GacUtil 
                    Command="Uninstall" 
                    Assemblies="MSBuild.Community.Tasks" 
                    Force="true" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.GacUtil.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.GacUtil.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.GacUtil.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.GacUtil.Execute">
            <summary>
            Runs the exectuable file with the specified task parameters.
            </summary>
            <returns>
            true if the task runs successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.GacUtil.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
            <enum cref="T:MSBuild.Community.Tasks.GacUtilCommands"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.GacUtil.Force">
            <summary>
            Gets or sets a value indicating whether to force reinstall of an assembly.
            </summary>
            <value><c>true</c> if force; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.GacUtil.Assemblies">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.GacUtil.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.GacUtil.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.JavaScript.JSCompress">
            <summary>
            Compresses JavaScript source by removing comments and unnecessary 
            whitespace. It typically reduces the size of the script by half, 
            resulting in faster downloads and code that is harder to read.
            </summary>
            <remarks>
            This task does not change the behavior of the program that it is 
            compressing. The resulting code will be harder to debug as well as
            harder to read.
            </remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.JavaScript.JSCompress.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.JavaScript.JSCompress.Files">
            <summary>
            Gets or sets the files to source-compress.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.JavaScript.JSCompress.Encoding">
            <summary>
            Encoding to use to read and write files.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.JavaScript.JSCompress.CompressedFiles">
            <summary>
            Gets the files that were successfully source-compressed.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnCopy">
            <summary>
            Copy a file or folder in Subversion
            </summary>
            <remarks>
            This is most useful for automatically tagging your source code during a build. 
            You can create a tag by copying a path from one server location to another.
            </remarks>
            <example>Create a tag of the trunk with the current Cruise Control build number:
            <code><![CDATA[
            <Target Name="TagTheBuild">
              <SvnCopy SourcePath="file:///d:/svn/repo/Test/trunk"
                       DestinationPath="file:///d:/svn/repo/Test/tags/BUILD-$(CCNetLabel)" 
                       Message="Automatic build of $(CCNetProject)" />      
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnClient">
            <summary>
            Subversion client base class
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.GenerateSvnCommand">
            <summary>
            Generates the SVN command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.GenerateSvnArguments">
            <summary>
            Generates the SVN arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.LogEventsFromTextOutput(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Logs the events from text output.
            </summary>
            <param name="singleLine">The single line.</param>
            <param name="messageImportance">The message importance.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnClient.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Verbose">
            <summary>
            Gets or sets the verbose.
            </summary>
            <value>The verbose.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Force">
            <summary>
            Gets or sets the force.
            </summary>
            <value>The force.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.RepositoryPath">
            <summary>
            Gets or sets the repository path.
            </summary>
            <value>The repository path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.LocalPath">
            <summary>
            Gets or sets the local path.
            </summary>
            <value>The local path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Targets">
            <summary>
            Gets or sets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.Revision">
            <summary>
            Gets or sets the revision.
            </summary>
            <value>The revision.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.CommandSwitches">
            <summary>
            Gets or sets the command switchs.
            </summary>
            <value>The command switchs.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnClient.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCopy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MSBuild.Community.Tasks.Subversion.SvnCopy"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCopy.GenerateSvnCommand">
            <summary>
            Generates the SVN command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCopy.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnCopy.SourcePath">
            <summary>
            The path of the source file or folder that should be copied
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnCopy.DestinationPath">
            <summary>
            The path to which the SourcePath should be copied
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Tfs.IServer">
            <summary>
            Describes the behavior of a Team Foundation Server
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.IServer.GetLatestChangesetId(System.String,System.Net.ICredentials)">
            <summary>
            Retrieves the latest changeset ID associated with a path
            </summary>
            <param name="localPath">A path on the local filesystem</param>
            <param name="credentials">Credentials used to authenticate against the serer</param>
            <returns></returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Tfs.TeamFoundationServer">
            <summary>
            Handles all communication with the Team Foundation Server
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.TeamFoundationServer.#ctor(System.String)">
            <summary>
            Creates an instace of the TeamFoundationServer class
            </summary>
            <param name="clientLocation">The local file path containing the TFS libraries. null if TFS is in the GAC.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.TeamFoundationServer.GetLatestChangesetId(System.String,System.Net.ICredentials)">
            <summary>
            Retrieves the latest changeset ID associated with a path
            </summary>
            <param name="localPath">A path on the local filesystem</param>
            <param name="credentials">Credentials used to authenticate against the serer</param>
            <returns></returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Tfs.TeamFoundationServerException">
            <summary>
            Exceptions returned by the Team Foundation Server
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.TeamFoundationServerException.#ctor">
            <summary>
            Creates a new instance of the exception
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.TeamFoundationServerException.#ctor(System.String)">
            <summary>
            Creates a new instance of the exception
            </summary>
            <param name="message">A description of the exception</param>
        </member>
        <member name="T:MSBuild.Community.Tasks.Tfs.TfsVersion">
            <summary>
            Determines the changeset in a local Team Foundation Server workspace
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Tfs.TfsVersion.Execute">
            <summary>
            Runs the exectuable file with the specified task parameters.
            </summary>
            <returns>
            true if the task runs successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.Username">
            <summary>
            The user to authenticate on the server
            </summary>
            <remarks>Leave empty to use the credentials of the current user.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.Password">
            <summary>
            The password for the user to authenticate on the server
            </summary>
            <remarks>Leave empty to use the credentials of the current user.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.Domain">
            <summary>
            The domain of the user to authenticate on the server
            </summary>
            <remarks>Leave empty to use the credentials of the current user.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.LocalPath">
            <summary>Path to local working copy.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.Changeset">
            <summary>
            The latest changeset ID in the local path
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Tfs.TfsVersion.TfsLibraryLocation">
            <summary>
            The location of the Team Foundation Server client assemblies. Leave empty when the client is installed in the Global Assembly Cache.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Xml.XmlMassUpdate">
            <summary>
            Performs multiple updates on an XML file
            </summary>
            <remarks>
      XmlMassUpdate allows to to specify multiple changes to make to an XML file (the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentFile"/>. By default, the changes are applied to the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentFile"/>, but you can create a new file by providing the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.MergedFile"/> attribute.  The change instructions are specified using XML in the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile"/>. If the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile"/> does not mirror the structure of the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentFile"/> exactly, you can specify the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentRoot"/> and <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsRoot"/> XPath expressions which determine how the files should be mapped to each other.
      <para>Any element within the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsRoot"/> will find the corresponding element in the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentRoot"/>. If it does not exist, it will be created with all of its attributes. If it does exist, the attributes will be added or updated as specified.</para>
      <para>
        Any attribute declared within the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.UpdateControlNamespace"/> will not be copied to the modified file. Valid attributes are <c>key</c> and <c>action</c>. The <c>key</c> attribute allows you to define an attribute to use as the identifying attribute when you only want to update a single element, and multiple elements with the same name exist. You can also use the <c>action="remove"</c> attribute to specify that an element should be deleted instead of updated.
      </para>
  </remarks><example>
      <para>These examples will demonstrate how to make multiple updates to a XML file named web.config. It looks like:
      <code>
        <![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<appSettings>
		<add key="ItemsPerPage" value="10" />
		<add key="EnableCaching" value="true" />
		<add key="DefaultServer" value="TIGRIS" />
	</appSettings>
    <system.web>
        <compilation defaultLanguage="c#" debug="true" />
        <customErrors mode="Off" />
        <trace enabled="true" requestLimit="10" pageOutput="true" />
        <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    </system.web>
</configuration> ]]>
      </code>
      </para>
    </example><example>
      You can update the file using instructions from an external file (specified as the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile"/>):
      <code>
        <![CDATA[<XmlMassUpdate ContentFile="web.config" SubstitutionsFile="changes.xml" ContentRoot="/configuration/system.web" SubstitutionsRoot="/system.web" /> ]]>
      </code>
      The <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile"/> is named changes.xml and contains:
      <code>
      <![CDATA[<system.web>
        <compilation debug="false" />
        <customErrors mode="RemoteOnly" defaultRedirect="Error.htm">
          <error statusCode="401" redirect="AccessDenied.aspx" />
        </customErrors>
        <trace enabled="false" />
      </system.web> ]]>
      </code>
    </example><example>
      You can also provide the update instructions within the MSBuild project file itself. It takes advantage of the MSBuild ProjectExtensions element which allows you to add XML to a project file that will be ignored by the MSBuild engine. This example also demonstrates how to use <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.NamespaceDefinitions"/>:
      <code>
        <![CDATA[<ProjectExtensions>
  <system.web>
    <compilation debug="false" />
    <trace enabled="false" />
  </system.web>
</ProjectExtensions>
<Target Name="SubstituteFromProj">
  <XmlMassUpdate ContentFile="web.config" ContentRoot="/configuration/system.web"
    NamespaceDefinitions="msb=http://schemas.microsoft.com/developer/msbuild/2003"
    SubstitutionsFile="$(MSBuildProjectFullPath)"
    SubstitutionsRoot="/msb:Project/msb:ProjectExtensions/msb:system.web" />
</Target> ]]>
      </code>
    </example><example>
      The following example demonstrates how to deal with "keyed" elements. When you need to update an element, and multiple elements exist with the same name, it must be be differentied by one of its attributes. You designate the differentiating attribute using the "key" attribute declared in the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.UpdateControlNamespace"/>.
      If an element matching the keyed attribute is not found, a new element will be created (DefaultSort in the example). This example also demonstrates creating a new file with the merged changes instead of modifying the original file.
      <code>
        <![CDATA[ <XmlMassUpdate ContentFile="web.config" SubstitutionsFile="changes.xml" MergedFile="web.config.keyed.xml"  /> ]]>
      </code>
      Using a changes.xml file with the following contents:
      <code>
        <![CDATA[<configuration xmlns:xmu="urn:msbuildcommunitytasks-xmlmassupdate">
  <appSettings>
        <add xmu:key="key" key="EnableCaching" value="false" />
        <add xmu:key="key" key="DefaultSort" value="LastName" />
  </appSettings>
</configuration> ]]>
    </code>
  </example><example>
      Use a changes.xml file with the following contents to demonstrate how to remove an element from the updated file:
      <code>
        <![CDATA[<configuration xmlns:xmu="urn:msbuildcommunitytasks-xmlmassupdate">
  <appSettings>
        <add xmu:key="key" key="ItemsPerPage" xmu:action="remove" />
        <trace xmu:action="remove" />
  </appSettings>
</configuration> ]]>
      </code>
    </example><example>
      You can also specify the changes to apply from within the target document. By making use of the <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsRoot"/> property, you can store multiple sets of changes to apply based on runtime conditions.
      Consider the following source web.config file:
      <code>
        <![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <system.web>
        <compilation defaultLanguage="c#" debug="true" />
        <customErrors mode="Off" />
        <trace enabled="true" requestLimit="10" pageOutput="true" />
        <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    </system.web>
    <substitutions>
      <test>
        <system.web>
          <compilation debug="false" />
          <trace enabled="true" />
        </system.web>
      </test>
      <prod>
        <system.web>
          <compilation debug="false" />
          <trace enabled="false" />
        </system.web>
      </prod>
    </substitutions>
</configuration> ]]>
      </code>
      You could use the following task definition, which relies on a property "TargetEnvironment" to determine which set of changes to apply:
      <code>
        <![CDATA[ <XmlMassUpdate ContentFile="web.config" ContentRoot="/configuration" SubstitutionsRoot="/configuration/substitutions/$(TargetEnvironment)" /> ]]>
      </code>
      You will need to provide a value of "test" or "prod" to the TargetEnvironment property. The property can be defined in a PropertyGroup section of the MSBuild file, or passed as a command-line parameter.
      <code>
        <![CDATA[ msbuild build.proj /p:TargetEnvironment=prod ]]>
      </code>

    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlMassUpdate.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlMassUpdate.LoadSubstitutionsDocument">
            <summary>
            Returns <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile"/> as an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <remarks>This method is not intended for use by consumers. It is exposed for testing purposes.</remarks>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlMassUpdate.LoadContentDocument">
            <summary>
            Returns <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentFile"/> as an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <remarks>This method is not intended for use by consumers. It is exposed for testing purposes.</remarks>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SaveMergedDocument(System.Xml.XmlDocument)">
            <summary>
            Creates <see cref="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.MergedFile"/> from the specified <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <param name="mergedDocument">The XML to save to a file</param>
            <remarks>This method is not intended for use by consumers. It is exposed for testing purposes.</remarks>
            <returns></returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentFile">
            <summary>
            The original file whose content is to be updated
            </summary>
            <remarks>This task is currently under construction and not necessarily feature complete.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsFile">
            <summary>
            The file containing the list of updates to perform
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.MergedFile">
            <summary>
            The file created after performing the updates
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsRoot">
            <summary>
            The XPath expression used to locate the list of substitutions to perform
            </summary>
            <remarks>When not specified, the default is the document root: <c>/</c>
            <para>When there is a set of elements with the same name, and you want to update
            a single element which can be identified by one of its attributes, you need to include an attribute
            named 'key' in the namespace <c>urn:msbuildcommunitytasks-xmlmassupdate</c>. The value of the
            attribute is the name of the attribute that should be used as the unique identifier.</para></remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentRoot">
            <summary>
            The XPath expression identifying root node that substitions are relative to
            </summary>
            <remarks>When not specified, the default is the document root: <c>/</c></remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.NamespaceDefinitions">
            <summary>
            A collection of prefix=namespace definitions used to query the XML documents
            </summary>
            <example>
      Defining multiple namespaces:
      <code>
        <![CDATA[
<XmlMassUpdate ContentFile="web.config"
  SubstitutionsRoot="/configuration/substitutions"
 	NamespaceDefinitions = "soap=http://www.w3.org/2001/12/soap-envelope;x=http://www.w3.org/1999/XSL/Transform">
/>]]>
      </code>
    </example>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.ContentPathUsedByTask">
            <summary>
            The full path of the file containing content updated by the task
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.SubstitutionsPathUsedByTask">
            <summary>
            The full path of the file containing substitutions used by the task
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.MergedPathUsedByTask">
            <summary>
            The full path of the file containing the results of the task
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlMassUpdate.UpdateControlNamespace">
            <summary>
            The namespace used for XmlMassUpdate pre-defined attributes
            </summary>
            <remarks>Evaluates to: <c>urn:msbuildcommunitytasks-xmlmassupdate</c>
            <para>Attributes decorated with this namespace are used to control how a substitutions element
            or attribute is handled during the update. For example, the key attribute is used to identify the
            attribute on an element that uniquely identifies the element in a set.</para></remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap">
            <summary>
            Sets an application mapping for a filename extension on an existing web directory.
            </summary>
            <example>Map the .axd extension to the lastest version of ASP.NET:
            <code><![CDATA[
            <WebDirectoryScriptMap VirtualDirectoryName="MyWeb" Extension=".axd" MapToAspNet="True" VerifyFileExists="False" />
            ]]></code>
            </example>
            <example>Map GET requests to the .rss extension to a specific executable:
            <code><![CDATA[
            <WebDirectoryScriptMap VirtualDirectoryName="MyWeb" Extension=".rss" Verbs="GET" ExecutablePath="$(WINDIR)\Microsoft.Net\Framework\1.0.3705\aspnet_isapi.dll" />
            ]]></code>
            </example>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebBase">
            <summary>
            Base task for any IIS-related task.
            </summary>
            <remarks>Stores the base logic for gathering the IIS version and server and port checking.  This
            base task also stores common properties for other related tasks.</remarks>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.mIISVersion">
            <summary>
            IIS version.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebBase.GetIISVersion">
            <summary>
            Gets the IIS version.
            </summary>
            <returns>The <see cref="T:MSBuild.Community.Tasks.IIS.WebBase.IISVersion"/> for IIS.</returns>
            <exclude/>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebBase.GetRemoteOSVersion">
            <summary>
            Gets the remote machine OS version.
            </summary>
            <returns>Returns a <see cref="T:System.Version"/> of the operating system.</returns>
            <exclude/>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebBase.VerifyIISRoot">
            <summary>
            Verifies that the IIS root exists based on the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.ServerName"/> and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.ServerPort"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebBase.VerifyServerPortExists(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Helper method for <see cref="M:MSBuild.Community.Tasks.IIS.WebBase.VerifyIISRoot"/> that verifies the server port exists.
            </summary>
            <param name="site">The site to verify the port.</param>
            <returns>Boolean value indicating the status of the port check.</returns>
            <exclude/>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.ServerName">
            <summary>
            Gets or sets the name of the server.  The default value is 'localhost'.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.ServerPort">
            <summary>
            Gets or sets the server port.
            </summary>
            <value>The server port.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.IISServerPath">
            <summary>
            Gets or sets the IIS server path.
            </summary>
            <remarks>Is in the form 'IIS://localhost/W3SVC/1/Root'.</remarks>
            <value>The IIS server path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.IISApplicationPath">
            <summary>
            Gets or sets the application path.
            </summary>
            <remarks>Is in the form '/LM/W3SVC/1/Root'.</remarks>
            <value>The application path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.IISAppPoolPath">
            <summary>
            Gets or sets the IIS application pool path.
            </summary>
            <remarks>Is in the form 'IIS://localhost/W3SVC/AppPools'.</remarks>
            <value>The IIS application pool path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.Username">
            <summary>
            Gets or sets the username for the account the task will run under.  This property
            is needed if you specified a <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.ServerName"/> for a remote machine.
            </summary>
            <value>The username of the account.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebBase.Password">
            <summary>
            Gets or sets the password for the account the task will run under.  This property
            is needed if you specified a <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.ServerName"/> for a remote machine.
            </summary>
            <value>The password of the account.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebBase.IISVersion">
            <summary>
            Defines the possible IIS versions supported by the task.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.IISVersion.Four">
            <summary>
            IIS version 4.x
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.IISVersion.Five">
            <summary>
            IIS version 5.x
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.IISVersion.Six">
            <summary>
            IIS version 6.x
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolAction">
            <summary>
            Defines the possible application pool actions to be performed.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolAction.Recycle">
            <summary>
            Recycles an application pool.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolAction.Restart">
            <summary>
            Stops and restarts the application pool.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolAction.Start">
            <summary>
            Starts the application pool.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolAction.Stop">
            <summary>
            Stops the application pool.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolState">
            <summary>
            Defines the current application pool state.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolState.Starting">
            <summary>
            The application pool is starting.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolState.Started">
            <summary>
            The application pool has started.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolState.Stopping">
            <summary>
            The application pool is stopping.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.WebBase.ApplicationPoolState.Stopped">
            <summary>
            The application pool has stopped.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.VirtualDirectoryName">
            <summary>
            Gets or sets the name of the virtual directory.
            </summary>
            <value>The name of the virtual directory.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.Extension">
            <summary>
            The filename extension that will be mapped to an executable.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.ExecutablePath">
            <summary>
            The full path to the executable used to respond to requests for a Uri ending with <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.Extension"/>
            </summary>
            <remarks>This property is required when <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.MapToAspNet"/> is <c>false</c> (the default).</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.MapToAspNet">
            <summary>
            Indicates whether <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.Extension"/> should be mapped to the ASP.NET runtime.
            </summary>
            <remarks>When <c>true</c>, <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.ExecutablePath"/> is set to aspnet_isapi.dll
            in the installation folder of the latest version of the .NET Framework.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.Verbs">
            <summary>
            A comma-separated list of the HTTP verbs to include in the application mapping.
            </summary>
            <remarks>The default behavior (when this property is empty or unspecified) is to map all verbs.
            <para>A semi-colon-separated list will also be recognized, allowing you to use an MSBuild Item.</para></remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.EnableScriptEngine">
            <summary>
            Set to <c>true</c> when you want the application to run in a directory without Execute permissions.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryScriptMap.VerifyFileExists">
            <summary>
            Set to <c>true</c> to instruct the Web server to verify the existence of the requested script file and to ensure that the requesting user has access permission for that script file.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebDirectorySetting">
            <summary>
            Reads and modifies a web directory configuration setting.
            </summary>
            <example>Display the file system path of the MyWeb web directory:
            <code><![CDATA[
            <WebDirectorySetting VirtualDirectoryName="MyWeb" SettingName="Path">
                <Output TaskParameter="SettingValue" PropertyName="LocalPath" />
            </WebDirectorySetting>
            <Message Text="MyWeb is located at $(LocalPath)" />
            ]]></code>
            </example>
            <example>Set the default document for the MyWeb directory to Default.aspx:
            <code><![CDATA[
            <WebDirectorySetting VirtualDirectoryName="MyWeb" SettingName="DefaultDoc" SettingValue="Default.aspx" />
            <WebDirectorySetting VirtualDirectoryName="MyWeb" SettingName="EnableDefaultDoc" SettingValue="True" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebDirectorySetting.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectorySetting.VirtualDirectoryName">
            <summary>
            Gets or sets the name of the virtual directory.
            </summary>
            <value>The name of the virtual directory.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectorySetting.SettingName">
            <summary>
            Gets or sets the configuration setting to read or modify.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectorySetting.SettingValue">
            <summary>
            Gets or sets the value of <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectorySetting.SettingName"/> on the web directory
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.ILMerge">
             <summary>
             A wrapper for the ILMerge tool.
             </summary>
             <remarks>
             <para>
             The ILMerge tool itself must be installed separately.
             It is available <a href="http://research.microsoft.com/~mbarnett/ILMerge.aspx">here</a>.
             </para>
             <para>
             The command line options "/wildcards" and "/lib" of ILMerge are not supported,
             because MSBuild is in charge of expanding wildcards for item groups.
             </para>
             </remarks>
             <example>
             This example merges two assemblies A.dll and B.dll into one:
             <code><![CDATA[
             <PropertyGroup>
                 <outputFile>$(testDir)\ilmergetest.dll</outputFile>
                 <keyFile>$(testDir)\keypair.snk</keyFile>
                 <excludeFile>$(testDir)\ExcludeTypes.txt</excludeFile>
                 <logFile>$(testDir)\ilmergetest.log</logFile>
             </PropertyGroup>
            
             <ItemGroup>
                 <inputAssemblies Include="$(testDir)\A.dll" />
                 <inputAssemblies Include="$(testDir)\B.dll" />
            
                 <allowDuplicates Include="ClassAB" />
             </ItemGroup>
            
             <Target Name="merge" >
                <ILMerge InputAssemblies="@(inputAssemblies)" 
                    AllowDuplicateTypes="@(allowDuplicates)"
                    ExcludeFile="$(excludeFile)"
                    OutputFile="$(outputFile)" LogFile="$(logFile)"
                    DebugInfo="true" XmlDocumentation="true" 
                    KeyFile="$(keyFile)" DelaySign="true" />
             </Target>]]></code>
             </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.ILMerge.GenerateFullPathToTool">
            <summary>
            Gets the standard installation path of ILMerge.exe.
            </summary>
            <remarks>
            If ILMerge is not installed at its standard installation path,
            provide its location to <see cref="P:Microsoft.Build.Utilities.ToolTask.ToolPath"/>.
            </remarks>
            <returns>Returns [ProgramFiles]\Microsoft\ILMerge.exe.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.ILMerge.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments
            to pass directly to the executable file.
            </summary>
            <returns>
            Returns a string value containing the command line arguments 
            to pass directly to the executable file.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.AllowDuplicateTypes">
            <summary>
            Gets or sets the names of public types
            to be renamed when they are duplicates.
            </summary>
            <remarks>
            <para>Set to an empty item group to allow all public types to be renamed.</para>
            <para>Don't provide this parameter if no duplicates of public types are allowed.</para>
            <para>Corresponds to command line option "/allowDup".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.AllowZeroPeKind">
            <summary>
            Gets or sets the flag to treat an assembly 
            with a zero PeKind flag 
            (this is the value of the field listed as .corflags in the Manifest)
            as if it was ILonly.
            </summary>
            <remarks>
            <para>Corresponds to command line option "/zeroPeKind".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.AttributeFile">
            <summary>
            Gets or sets the attribute assembly
            from whre to get all of the assembly-level attributes
            such as Culture, Version, etc.
            It will also be used to get the Win32 Resources from.
            </summary>
            <remarks>
            <para>This property is mutually exclusive with <see cref="P:MSBuild.Community.Tasks.ILMerge.CopyAttributes"/>.</para>
            <para>
            When not specified, then the Win32 Resources from the primary assembly 
            are copied over into the target assembly.
            </para>
            <para>Corresponds to command line option "/attr".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.Closed">
            <summary>
            Gets or sets the flag to indicate
            whether to augment the list of input assemblies
            to its "transitive closure".
            </summary>
            <remarks>
            <para>
            An assembly is considered part of the transitive closure if it is referenced,
            either directly or indirectly, 
            from one of the originally specified input assemblies 
            and it has an external reference to one of the input assemblies, 
            or one of the assemblies that has such a reference.
            </para>
            <para>Corresponds to command line option "/closed".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.CopyAttributes">
            <summary>
            Gets or sets the flag to indicate
            whether to copy the assembly level attributes
            of each input assembly over into the target assembly.
            </summary>
            <remarks>
            <para>
            Any duplicate attribute overwrites a previously copied attribute.
            The input assemblies are processed in the order they are specified.
            </para>
            <para>This parameter is mutually exclusive with <see cref="P:MSBuild.Community.Tasks.ILMerge.AttributeFile"/>.</para>
            <para>Corresponds to command line option "/copyattrs".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.DebugInfo">
            <summary>
            Gets or sets the flag to indicate
            whether to preserve any .pdb files
            that are found for the input assemblies
            into a .pdb file for the target assembly.
            </summary>
            <remarks>
            <para>Corresponds to command line option "/ndebug".</para>
            <para>The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.DelaySign">
            <summary>
            Gets or sets the flag to indicate
            whether the target assembly will be delay signed.
            </summary>
            <remarks>
            <para>This property can be set only in conjunction with <see cref="P:MSBuild.Community.Tasks.ILMerge.KeyFile"/>.</para>
            <para>Corresponds to command line option "/delaysign".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.ExcludeFile">
            <summary>
            Gets or sets the file
            that will be used to identify types
            that are not to have their visibility modified.
            </summary>
            <remarks>
            <para>
            If an empty item group is provided, 
            then all types in any assembly other than the primary assembly are made non-public.
            </para>
            <para>Omit this parameter to prevent ILMerge from modifying the visibility of any types.</para>
            <para>
            The contents of the file should be one <see cref="T:System.Text.RegularExpressions.Regex"/> per line. 
            The regular expressions are matched against each type's full name, 
            e.g., <c>System.Collections.IList</c>. 
            If the match fails, it is tried again with the assembly name (surrounded by square brackets) 
            prepended to the type name. 
            Thus, the pattern <c>\[A\].*</c> excludes all types in assembly <c>A</c> from being made non-public. 
            The pattern <c>N.T</c> will match all types named <c>T</c> in the namespace named <c>N</c>
            no matter what assembly they are defined in.
            </para>
            <para>Corresponds to command line option "/internalize".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.InputAssemblies">
            <summary>
            Gets or sets the input assemblies to merge.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.KeyFile">
            <summary>
            Gets or sets the .snk file
            to sign the target assembly.
            </summary>
            <remarks>
            <para>Can be used with <see cref="P:MSBuild.Community.Tasks.ILMerge.DelaySign"/>.</para>
            <para>Corresponds to command line option "/keyfile".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.LogFile">
            <summary>
            Gets or sets a log file
            to write log messages to.
            </summary>
            <remarks>
            <para>
            If an empty item group is provided,
            then log messages are writte to <see cref="P:System.Console.Out"/>.
            </para>
            <para>Corresponds to command line option "/log".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.OutputFile">
            <summary>
            Gets or sets the target assembly.
            </summary>
            <remarks>
            <para>Corresponds to command line option "/out".</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.PublicKeyTokens">
            <summary>
            Gets or sets the flag to indicate
            whether external assembly references in the manifest
            of the target assembly will use public keys (<c>false</c>)
            or public key tokens (<c>true</c>).
            </summary>
            <remarks>
            <para>Corresponds to command line option "/publickeytokens".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.TargetPlatformVersion">
            <summary>
            Gets or sets the .NET framework version for the target assembly.
            </summary>
            <remarks>
            <para>Valid values are "v1", "v1.1", "v2".</para>
            <para>Corresponds to the first part of command line option "/targetplatform".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.TargetPlatformDirectory">
            <summary>
            Gets or sets the directory in which <c>mscorlib.dll</c> is to be found.
            </summary>
            <remarks>
            <para>Can only be used in conjunction with <see cref="P:MSBuild.Community.Tasks.ILMerge.TargetPlatformVersion"/>.</para>
            <para>Corresponds to the second part of command line option "/targetplatform".</para>
            <para>The default value is <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.TargetKind">
            <summary>
            Gets or sets the indicator
            whether the target assembly is created as a library (<c>Dll</c>),
            a console application (<c>Exe</c>) or as a Windows application (<c>WinExe</c>).
            </summary>
            <remarks>
            <para>Corresponds to command line option "/target".</para>
            <para>The default value is the same kind as that of the primary assembly.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.Version">
            <summary>
            Gets or sets the version number of the target assembly.
            </summary>
            <remarks>
            <para>The parameter should look like <c>6.2.1.3</c>.</para>
            <para>Corresponds to command line option "/ver".</para>
            <para>The default value is null.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.XmlDocumentation">
            <summary>
            Gets or sets the flag to indicate
            whether to merge XML documentation files
            into one for the target assembly.
            </summary>
            <remarks>
            <para>Corresponds to command line option "/xmldocs".</para>
            <para>The default value is <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.ILMerge.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Install.InstallAssembly">
             <summary>
             Installs assemblies.
             </summary>
            <remarks>
             Uses InstallUtil.exe to execute the 
             <see href="http://msdn2.microsoft.com/system.configuration.install.installer.install.aspx">Install</see>
             method of
             <see href="http://msdn2.microsoft.com/system.configuration.install.installer.aspx">Installer</see>
             classes contained within specified assemblies.
             </remarks>
             <example>
      Install multiple assemblies by specifying the file names:
      <code>
        <![CDATA[
<InstallAssembly AssemblyFiles="Engine.dll;Presenter.dll" />
]]>
      </code>
    </example><example>
      Install an assembly using the assembly name. Also disable the log file by setting it to a single space:
      <code>
        <![CDATA[
<InstallAssembly AssemblyNames="Engine,Version=1.5.0.0,Culture=neutral" LogFile=" "/>
]]>
      </code>
    </example><example>
      You can easily chain an install to the result of a build:
      <code>
        <![CDATA[
<MSBuild Projects="Project1.csproj;Project2.csproj">
 <Output TaskParameter="TargetOutputs" ItemName="ProjectBinaries" />
</MSBuild>
<InstallAssembly AssemblyFiles="@(ProjectBinaries)" />
]]>
      </code>
    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Install.InstallAssembly.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Install.InstallAssembly.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments 
            to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass 
            directly to the executable file.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.AssemblyNames">
            <summary>
            The assemblies to process, identified by their assembly name.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.AssemblyFiles">
            <summary>
            The assemblies to process, identified by their filename.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.LogFile">
            <summary>
            The file to write installation progress to.
            </summary>
            <remarks>Set to a single space to disable logging to a file.
            <para>
            If not specified, the default is to log to [assemblyname].installLog
            </para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.ShowCallStack">
            <summary>
             If an exception occurs at any point during installation, the call
             stack will be printed to the log.
             </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.IsUninstall">
            <summary>
            Determines whether assemblies are installed or uninstalled.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.InstallAssembly.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Install.UninstallAssembly">
            <summary>Uninstalls assemblies.</summary>    
            <remarks>
            Uses InstallUtil.exe to execute the 
            <see href="http://msdn2.microsoft.com/system.configuration.install.installer.uninstall.aspx">Uninstall</see>
            method of
            <see href="http://msdn2.microsoft.com/system.configuration.install.installer.aspx">Installer</see>
            classes contained within specified assemblies.
            </remarks>
            <example>Uninstall multiple assemblies by specifying the file names:
            <code><![CDATA[
            <UninstallAssembly AssemblyFiles="Engine.dll;Presenter.dll" />
            ]]></code>
            </example>
            <example>Unnstall an assembly using the assembly name. Also disable the log file by setting it to a single space:
            <code><![CDATA[
            <UninstallAssembly AssemblyNames="Engine,Version=1.5.0.0,Culture=neutral" LogFile=" "/>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.Community.Tasks.Install.UninstallAssembly.IsUninstall">
            <summary>
            Determines whether assemblies are installed or uninstalled.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.Modulo">
            <summary>
            Performs the modulo operation on numbers.
            </summary>
            <remarks>
      The modulo operation finds the remainder of the division of one number by another.
      <para>When the second number (modulus) is a fractional value, the result can be a fractional value.</para>
      <para>
        Equivalent to the % operator in C# or the Mod operator in Visual Basic.
      </para>
    </remarks><example>
      Numbers evenly divide:
      <code>
        <![CDATA[
<Math.Modulo Numbers="12;4">
    <Output TaskParameter="Result" PropertyName="Result" />
</Math.Modulo>
<Message Text="12 modulo 4 = $(Result)"/>
]]>
      </code>
      Above example will display:
      <code>12 modulo 4 = 0</code>
    </example><example>
      Division on the numbers produces a remainder:
      <code>
        <![CDATA[
<Math.Modulo Numbers="14;4">
    <Output TaskParameter="Result" PropertyName="Result" />
</Math.Modulo>
<Message Text="14 modulo 4 = $(Result)"/>
]]>
      </code>
      Above example will display:
      <code>14 modulo 4 = 2</code>
    </example><example>
      Modulus is a fractional value:
      <code>
        <![CDATA[
<Math.Modulo Numbers="12;3.5">
    <Output TaskParameter="Result" PropertyName="Result" />
</Math.Modulo>
<Message Text="12 modulo 3.5 = $(Result)"/>
]]>
      </code>
      Above example will display:
      <code>12 modulo 3.5 = 1.5</code>
    </example>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.MathBase">
            <summary>
            Math task base class
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.MathBase.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.MathBase.StringArrayToDecimalArray(System.String[])">
            <summary>
            Strings array to decimal array.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns></returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Math.MathBase.Numbers">
            <summary>
            Gets or sets the numbers to work with.
            </summary>
            <value>The numbers.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Math.MathBase.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Math.MathBase.NumericFormat">
            <summary>
            Gets or sets the numeric format.
            </summary>
            <value>The numeric format.</value>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.Modulo.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Prompt">
            <summary>
            Displays a message on the console and waits for user input.
            </summary>
            <remarks>It is important to note that the message is not written to the MSBuild logger, 
            it is always written to the console, no matter which logger is configured.
            <para>This task requires user input from the console. Do not use this task for projects
            that will be executed unattended. It is recommended that you always add a Condtion so that
            this task is only enabled when a custom property is set through the command line.
            This will ensure that the other users do not attempt to execute the task in unattended mode.
            </para></remarks>
            <example>Pause the build if the interactive property is set:
            <code><![CDATA[
            <!-- Pause when invoked with the interactive property: msbuild myproject.proj /property:interactive=true -->
            
            <Prompt Text="You can now attach the debugger to the msbuild.exe process..." Condition="'$(Interactive)' == 'True'" />
            ]]></code>
            </example>
            <example>Obtain user input during the build: 
            (Note: in most cases, it is recommended that users instead provide custom values to your build through the /property argument of msbuild.exe)
            <code><![CDATA[
            <Prompt Text="Tell me your name:" Condition="'$(Interactive)' == 'True'" >
              <Output TaskParameter="UserInput" PropertyName="PersonName" />
            </Prompt>
            <Message Text="Hello $(PersonName)" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Prompt.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Prompt.Text">
            <summary>
            The message to display in the console.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Prompt.UserInput">
            <summary>
            The text entered at the console.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.RegexBase">
            <summary>
            Base class for Regex tasks
            Handles public properties for Input, Expression, Options and Output
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexBase.Expression">
            <summary>
            Regex expression
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexBase.Input">
            <summary>
            Input, list of items to perform the regex on
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexBase.Options">
            <summary>
            Regex options as strings corresponding to the RegexOptions enum:
                Compiled
                CultureInvariant
                ECMAScript 
                ExplicitCapture
                IgnoreCase
                IgnorePatternWhitespace
                Multiline
                None
                RightToLeft
                Singleline
            </summary>
            <enum cref="T:System.Text.RegularExpressions.RegexOptions"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexBase.Output">
            <summary>
            Results of the Regex transformation.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexBase.ExpressionOptions">
            <summary>
            Options converted to RegexOptions enum
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.RegexMatch">
            <summary>
            Task to filter an Input list with a Regex expression.
            Output list contains items from Input list that matched given expression
            </summary>
            <example>Matches from TestGroup those names ending in a, b or c
            <code><![CDATA[
            <ItemGroup>
               <TestGroup Include="foo.my.foo.foo.test.o" />
               <TestGroup Include="foo.my.faa.foo.test.a" />
               <TestGroup Include="foo.my.fbb.foo.test.b" />
               <TestGroup Include="foo.my.fcc.foo.test.c" />
               <TestGroup Include="foo.my.fdd.foo.test.d" />
               <TestGroup Include="foo.my.fee.foo.test.e" />
               <TestGroup Include="foo.my.fff.foo.test.f" />
            </ItemGroup>
            <Target Name="Test">
               <!-- Outputs only items that end with a, b or c -->
               <RegexMatch Input="@(TestGroup)" Expression="[a-c]$">
                  <Output ItemName ="MatchReturn" TaskParameter="Output" />
               </RegexMatch>
               <Message Text="&#xA;Output Match:&#xA;@(MatchReturn, '&#xA;')" />
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegexMatch.Execute">
            <summary>
            Performs the Match task
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.RegexReplace">
            <summary>
            Task to replace portions of strings within the Input list
            Output list contains all the elements of the Input list after
            performing the Regex Replace.
            </summary>
            <example>
            1st example replaces first occurance of "foo." with empty string
            2nd example replaces occurance of "foo." after character 6 with "oop." string
            <code><![CDATA[
            <ItemGroup>
               <TestGroup Include="foo.my.foo.foo.test.o" />
               <TestGroup Include="foo.my.faa.foo.test.a" />
               <TestGroup Include="foo.my.fbb.foo.test.b" />
               <TestGroup Include="foo.my.fcc.foo.test.c" />
               <TestGroup Include="foo.my.fdd.foo.test.d" />
               <TestGroup Include="foo.my.fee.foo.test.e" />
               <TestGroup Include="foo.my.fff.foo.test.f" />
            </ItemGroup>
            <Target Name="Test">
               <Message Text="Input:&#xA;@(TestGroup, '&#xA;')"/>
               <!-- Replaces first occurance of "foo." with empty string-->
               <RegexReplace Input="@(TestGroup)" Expression="foo\." Replacement="" Count="1">
                  <Output ItemName ="ReplaceReturn1" TaskParameter="Output" />
               </RegexReplace>
               <Message Text="&#xA;Output Replace 1:&#xA;@(ReplaceReturn1, '&#xA;')" />
               <!-- Replaces occurance of "foo." after character 6 with "oop." string-->
               <RegexReplace Input="@(TestGroup)" Expression="foo\." Replacement="oop" Startat="6">
                  <Output ItemName ="ReplaceReturn2" TaskParameter="Output" />
               </RegexReplace>
               <Message Text="&#xA;Output Replace 2:&#xA;@(ReplaceReturn2, '&#xA;')" />
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegexReplace.Execute">
            <summary>
            Performs the Replace task
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexReplace.Replacement">
            <summary>
            String replacing matching expression strings in input list.
            If left empty matches in the input list are removed (replaced with empty string)
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexReplace.Count">
            <summary>
            Number of matches to allow on each input item.
            -1 indicates to perform matches on all matches within input item
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegexReplace.StartAt">
            <summary>
            Position within the input item to start matching
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType">
            <summary>
            Different ways to specify the assembly in a UsingTask element.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType.AssemblyFileName">
            <summary>
            Assembly file name (Default): &lt;UsingTask AssemblyFile=&quot;foo.dll&quot; /&gt;
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType.AssemblyFileFullPath">
            <summary>
            Assembly location: &lt;UsingTask AssemblyName=&quot;foo&quot; /&gt;
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType.AssemblyName">
            <summary>
            Assembly Name: &lt;UsingTask AssemblyFile=&quot;bin\debug\foo.dll&quot; /&gt;
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType.AssemblyFullName">
            <summary>
            Assembly fully qualified name: &lt;UsingTask AssemblyName=&quot;foo.dll,version ....&quot; /&gt;
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Schema.TaskSchema">
            <summary>
            A Task that generates a XSD schema of the tasks in an assembly.
            </summary>
            <example>
            <para>Creates schema for MSBuild Community Task project</para>
            <code><![CDATA[
            <TaskSchema Assemblies="Build\MSBuild.Community.Tasks.dll" 
                OutputPath="Build" 
                CreateTaskList="true" 
                IgnoreMsBuildSchema="true"
                Includes="Microsoft.Build.Commontypes.xsd"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Schema.TaskSchema.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.Assemblies">
            <summary>
            Gets or sets the list of <see cref="T:System.Reflection.Assembly"/> path to analyse.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.OutputPath">
            <summary>
            Gets or sets the output path for the generated files.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.Schemas">
            <summary>
            Gets the list of path to the generated XSD schema.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.CreateTaskList">
            <summary>
            Gets or sets a value indicating if the task list (using UsingTask)
            has to be genereted.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.TaskListAssemblyFormat">
            <summary>
            Gets or sets a value indicating how the assembly is specified in the
            UsingTask element.
            </summary>
            <enum cref="T:MSBuild.Community.Tasks.Schema.TaskListAssemblyFormatType"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.IgnoreDocumentation">
            <summary>
            Gets or sets a value indicating wheter documentation should be ignored
            even if available (Default is false).
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.TaskLists">
            <summary>
            Gets the path to the task list if it was generated.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.IgnoreMsBuildSchema">
            <summary>
            Gets or sets a value indicating if the 
            MsBuild schema inclusing should be ignored
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Schema.TaskSchema.Includes">
            <summary>
            Gets or sets a list of included schemas
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.GetSolutionProjects">
            <summary>
            Task to get paths to projects and project names from VS2005 solution file
            </summary>
            <example>
            Returns project name and relative path from test solution
            <code><![CDATA[
              <Target Name="Test">
                  <GetSolutionProjects Solution="TestSolution.sln">
                      <Output ItemName="ProjectFiles" TaskParameter="Output"/>
                  </GetSolutionProjects>
            
                <Message Text="Solution Project paths:" />
                <Message Text="%(ProjectFiles.ProjectName) : @(ProjectFiles)" />
              </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.GetSolutionProjects.Execute">
            <summary>
            Perform task
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.GetSolutionProjects.Output">
            <summary>
            Output list contains TaskItems of project filenames contained within the given solution.
            Metadata tag "ProjectName" contains name of project.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.GetSolutionProjects.Solution">
            <summary>
            Name of Solution to get Projects from
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SqlServer.ExecuteDDL">
             <summary>
             MSBuild task to execute DDL and SQL statements.
             </summary>
             <remarks>Requires the the SQL Server libraries and dynamically loads the 
             required Microsoft.SqlServer.ConnectionInfo assembly.</remarks>
             <example>
             <code><![CDATA[
             <PropertyGroup>
            		<ConnectionString>Server=localhost;Integrated Security=True</ConnectionString>
            	</PropertyGroup>
            
             <Target Name="ExecuteDDL">
            		<ExecuteDDL ConnectionString="$(ConnectionString)" Files="SqlBatchScript.sql" ContinueOnError="false" />
             </Target>
             ]]></code>
             </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SqlServer.ExecuteDDL.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlServer.ExecuteDDL.ConnectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlServer.ExecuteDDL.Files">
            <summary>
            Gets or sets the DDL/SQL files.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlServer.ExecuteDDL.Results">
            <summary>
            Output the return count/values
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlServer.ExecuteDDL.BatchSeparator">
            <summary>
            Gets or sets the batch delimter string.
            </summary>
            <remarks>Default is "GO" for T-SQL.</remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.NodeKind">
            <summary>
            The kind of Subversion node. The names match the text output
            by "svn info".
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Subversion.NodeKind.file">
            <summary>
            Node is a file
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Subversion.NodeKind.dir">
            <summary>
            Node is a directory
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Subversion.NodeKind.unknown">
            <summary>
            Unknown node type
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.Schedule">
            <summary>
            The Subversion schedule type.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Subversion.Schedule.normal">
            <summary>
            Normal schedule
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.Subversion.Schedule.unknown">
            <summary>
            Unknown schedule.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnInfo">
            <summary>
            Run the "svn info" command and parse the output
            </summary>
            <example>
            This example will determine the Subversion repository root for
            a working directory and print it out.
            <code><![CDATA[
            <Target Name="printinfo">
              <SvnInfo LocalPath="c:\code\myapp">
                <Output TaskParameter="RepositoryRoot" PropertyName="root" />
              </SvnInfo>
              <Message Text="root: $(root)" />
            </Target>
            ]]></code>
            </example>
            <remarks>You can retrieve Subversion information for a <see cref="P:MSBuild.Community.Tasks.Subversion.SvnClient.LocalPath"/> or <see cref="P:MSBuild.Community.Tasks.Subversion.SvnClient.RepositoryPath"/>.
            If you do not provide a value for <see cref="P:MSBuild.Community.Tasks.Subversion.SvnClient.LocalPath"/> or <see cref="P:MSBuild.Community.Tasks.Subversion.SvnClient.RepositoryPath"/>, the current directory is assumed.</remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnInfo"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnInfo.ResetMemberVariables">
            <summary>
            Reset all instance variables to their default (unset) state.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnInfo.Execute">
            <summary>
            Execute the task.
            </summary>
            <returns>true if execution is successful, false if not.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnInfo.LogEventsFromTextOutput(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Logs the events from text output.
            </summary>
            <param name="singleLine">The single line.</param>
            <param name="messageImportance">The message importance.</param>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.RepositoryRoot">
            <summary>
            Return the repository root or null if not set by Subversion.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.RepositoryUuid">
            <summary>
            Return the repository UUID value from Subversion.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.NodeKind">
            <summary>
            The Subversion node kind.
            </summary>
            <enum cref="T:MSBuild.Community.Tasks.Subversion.NodeKind"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.LastChangedAuthor">
            <summary>
            The author who last changed this node.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.LastChangedRevision">
            <summary>
            The last changed revision number.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.LastChangedDate">
            <summary>
            The date this node was last changed.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnInfo.Schedule">
            <summary>
            The Subversion schedule type.
            </summary>
            <enum cref="T:MSBuild.Community.Tasks.Subversion.Schedule"/>
        </member>
        <member name="T:MSBuild.Community.Tasks.TemplateFile">
            <summary>
            MSBuild task that replaces tokens in a template file and writes out a new file.
            </summary>
            <example>
            <code><![CDATA[
            <ItemGroup>
            	<Tokens Include="Name">
            		<ReplacementValue>MSBuild Community Tasks</ReplacementValue>
            	</Tokens>
            </ItemGroup>
            
            <TemplateFile TemplateFile="ATemplateFile.template" OutputFile="ReplacedFile.txt" Tokens="@(Tokens)" />
            ]]></code>
            </example>
            <remarks>Tokens in the template file are formatted using ${var} syntax and names are not 
            case-sensitive, so ${Token} and ${TOKEN} are equivalent.</remarks>
        </member>
        <member name="F:MSBuild.Community.Tasks.TemplateFile.MetadataValueTag">
            <summary>
            Meta data tag used for token replacement
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.TemplateFile.#ctor">
            <summary>
            Default constructor. Creates a new TemplateFile task.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.TemplateFile.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>Success or failure of the task.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.TemplateFile.OutputFile">
            <summary>
            The token replaced template file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.TemplateFile.OutputFilename">
            <summary>
            The full path to the output file name.  If no filename is specified (the default) the
            output file will be the Template filename with a .out extension.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.TemplateFile.Template">
            <summary>
            The template file used.  Tokens with values of ${Name} are replaced by name.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.TemplateFile.Tokens">
            <summary>
            List of tokens to replace in the template.  Token name is taken from the TaskItem.ItemSpec and the
            replacement value comes from the ReplacementValue metadata of the item.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Time">
            <summary>
            Gets the current date and time.
            </summary>
            <remarks>
            See
            <a href="ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETDEVFX.v20.en/cpref8/html/T_System_Globalization_DateTimeFormatInfo.htm">
            DateTimeFormatInfo</a>
            for the syntax of the format string.
            </remarks>
            <example>Using the Time task to get the Month, Day,
            Year, Hour, Minute, and Second:
            <code><![CDATA[
            <Time>
              <Output TaskParameter="Month" PropertyName="Month" />
              <Output TaskParameter="Day" PropertyName="Day" />
              <Output TaskParameter="Year" PropertyName="Year" />
              <Output TaskParameter="Hour" PropertyName="Hour" />
              <Output TaskParameter="Minute" PropertyName="Minute" />
              <Output TaskParameter="Second" PropertyName="Second" />
            </Time>
            <Message Text="Current Date and Time: $(Month)/$(Day)/$(Year) $(Hour):$(Minute):$(Second)" />]]></code>
            Set property "BuildDate" to the current date and time:
            <code><![CDATA[
            <Time Format="yyyyMMddHHmmss">
                <Output TaskParameter="FormattedTime" PropertyName="buildDate" />
            </Time>]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Time.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Format">
            <summary>
            Gets or sets the format string
            for output parameter <see cref="P:MSBuild.Community.Tasks.Time.FormattedTime"/>.
            </summary>
            <remarks>
            See
            <a href="ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETDEVFX.v20.en/cpref8/html/T_System_Globalization_DateTimeFormatInfo.htm">
            DateTimeFormatInfo</a>
            for the syntax of the format string.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Month">
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Day">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Year">
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Hour">
            <summary>
            Gets the hour component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Minute">
            <summary>
            Gets the minute component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Second">
            <summary>
            Gets the seconds component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Millisecond">
            <summary>
            Gets the milliseconds component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Ticks">
            <summary>
            Gets the number of ticks that represent the date and time of this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.Kind">
            <summary>
            Gets or sets a value that indicates whether the time represented by this instance is based
            on local time, Coordinated Universal Time (UTC), or neither.
            </summary>
            <remarks>
            Possible values are:
            <list type="ul">
            <item>Local (default)</item>,
            <item>Utc</item>,
            <item>Unspecified</item>
            </list>
            </remarks>
            <enum cref="T:System.DateTimeKind"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.TimeOfDay">
            <summary>
            Gets the time of day for this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.FormattedTime">
            <summary>
            Gets the value of this instance to its equivalent string representation.
            If input parameter <see cref="P:MSBuild.Community.Tasks.Time.Format"/> is provided,
            the value is formatted according to it.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.ShortDate">
            <summary>
            Gets the value of this instance to its equivalent short date string representation.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.LongDate">
            <summary>
            Gets the value of this instance to its equivalent long date string representation.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.ShortTime">
            <summary>
            Gets the value of this instance to its equivalent short time string representation.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.LongTime">
            <summary>
            Gets the value of this instance to its equivalent long time string representation.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Time.DateTimeValue">
            <summary>
            Gets the internal time value.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem">
            <summary>
            Represents a single XmlNode selected using an XML task.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.#ctor(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Initializes a new instance of an XmlNodeTaskItem
            </summary>
            <param name="xpathNavigator">The selected XmlNode</param>
            <param name="reservedMetaDataPrefix">The prefix to attach to the reserved metadata properties.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.ToString">
            <summary>
            Returns a string representation of the XmlNodeTaskItem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.op_Explicit(MSBuild.Community.Tasks.Xml.XmlNodeTaskItem)~System.String">
            <summary>
            Returns the ItemSpec when the XmlNodeTaskItem is explicitly cast as a <see cref="T:System.String"/>
            </summary>
            <param name="taskItemToCast">The XmlNodeTaskItem</param>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.CloneCustomMetadata">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            
            </summary>
            <param name="destinationItem"></param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.GetMetadata(System.String)">
            <summary>
            
            </summary>
            <param name="metadataName"></param>
            <returns></returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.RemoveMetadata(System.String)">
            <summary>
            
            </summary>
            <param name="metadataName"></param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.SetMetadata(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="metadataName"></param>
            <param name="metadataValue"></param>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.ItemSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.MetadataCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlNodeTaskItem.MetadataNames">
            <summary>
            
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Xml.XmlQuery">
            <summary>
            Reads a value or values from lines of XML
            </summary>
            <remarks>
      Use the Lines property (possibly populated from the the ReadLinesFromFile task) if you want to perform multiple
      queries against some XML in memory. Use the XmlFileName property to query a large XML file.
      <para>
        An XPath expression can return multiple nodes in the <see cref="P:MSBuild.Community.Tasks.Xml.XmlQuery.Values"/> collection.
        The number of nodes returned is availabe in the <see cref="P:MSBuild.Community.Tasks.Xml.XmlQuery.ValuesCount"/> output TaskParameter.
      </para>
      <para>
        When the XPath expression resolves to an element node, all of the
        attributes of the element are added as metadata to the returned <see cref="T:Microsoft.Build.Framework.ITaskItem"/>.
        In addition, some reserved metadata properties are available on all element nodes.
        They are all prefixed with the <see cref="P:MSBuild.Community.Tasks.Xml.XmlQuery.ReservedMetaDataPrefix"/>,
        which is a single underscore (_) by default.
        <list type="table">
          <listheader>
            <term>Reserved Property</term>
          </listheader>
          <item>
            <term>_value</term>
            <description>The value of the node (non-xml text between the opening and closing tags).</description>
          </item>
          <item>
            <term>_innerXml</term>
            <description>The markup representing the children of this node.</description>
          </item>
          <item>
            <term>_outerXml</term>
            <description>The markup representing this node and all its child nodes.</description>
          </item>
        </list>
      </para>
    </remarks><example>
      Read an attribute value by selecting it with an XPath expression:
      <code>
        <![CDATA[
<ReadLinesFromFile File="web.config">
    <Output TaskParameter="Lines" ItemName="FileContents" />
</ReadLinesFromFile>

<XmlQuery Lines="@(FileContents)"
    XPath = "/configuration/system.web/compilation/@defaultLanguage">
	<Output TaskParameter="Values" PropertyName="CompilationLanguage" />
</XmlQuery>

<Message Text="The default language is $(CompilationLanguage)." />
]]>
      </code>
    </example><example>
      Read attribute values (from an XML file) using item metadata on a selected element node:
      <code>
        <![CDATA[
<XmlQuery XmlFileName="$(MSBuildProjectDirectory)\web.config"
    XPath = "/configuration/system.web/compilation">
	<Output TaskParameter="Values" ItemName="CompilationElement" />
</XmlQuery>

<Message Text="The default language is: $(CompilationElement.defaultLanguage)." />
<Message Text="Debug is enabled: $(CompilationElement.debug)." />
]]>
      </code>
    </example><example>
      Read an element value (requires use of the reserved metadata property "_value"):
      <code>
        <![CDATA[
<ReadLinesFromFile File="web.config">
    <Output TaskParameter="Lines" ItemName="FileContents" />
</ReadLinesFromFile>

<XmlQuery Lines="@(FileContents)"
    XPath = "/configuration/singleValue/LastName">
	<Output TaskParameter="Values" PropertyName="LastNameElement" />
</XmlQuery>

<Message Text="The last name is %(LastNameElement._value)" />
]]>
      </code>
    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlQuery.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.Lines">
            <summary>
            The lines of a valid XML document
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.XmlFileName">
            <summary>
            Gets or sets the name of an XML file to query
            </summary>
            <value>The full path of the XML file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.NamespaceDefinitions">
            <summary>
            A collection of prefix=namespace definitions used to query the XML document
            </summary>
            <example>
      Defining multiple namespaces:
      <code>
        <![CDATA[
<XmlMassUpdate ContentFile="web.config"
  SubstitutionsRoot="/configuration/substitutions"
 	NamespaceDefinitions = "soap=http://www.w3.org/2001/12/soap-envelope;x=http://www.w3.org/1999/XSL/Transform">
/>]]>
      </code>
    </example>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.XPath">
            <summary>
            The query used to identify the values in the XML document
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.Values">
            <summary>
            The values selected by <see cref="P:MSBuild.Community.Tasks.Xml.XmlQuery.XPath"/>
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.ValuesCount">
            <summary>
            The number of values returned in <see cref="P:MSBuild.Community.Tasks.Xml.XmlQuery.Values"/>
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xml.XmlQuery.ReservedMetaDataPrefix">
            <summary>
            The string that is prepended to all reserved metadata properties.
            </summary>
            <remarks>The default value is a single underscore: '_'
            <para>All attributes of an element node are added as metadata to the returned ITaskItem,
            so this property can be used to avoid clashes with the reserved properties.
            For example, if you selected the following node:
            <code><![CDATA[ <SomeNode _name="x" _value="y" /> ]]></code>
            the <c>_value</c> attribute would clash with the <c>value</c> reserved property, when using
            the default prefix. If you set the ReservedMetaDataPrefix to another value (two underscores '__')
            there would be no clash. You would be able to select the attribute using <c>%(item._value)</c>
            and the value of the node using <c>%(item.__value)</c>.</para></remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.Xml.XmlTaskHelper">
            <summary>
            Provides methods used by all of the XML tasks
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlTaskHelper.JoinItems(Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Concatenates the string value of a list of ITaskItems into a single string
            </summary>
            <param name="items">The items to concatenate</param>
            <returns>A single string containing the values from all of the items</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xml.XmlTaskHelper.LoadNamespaceDefinitionItems(System.Xml.XmlNamespaceManager,Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Uses the prefix=namespace definitions in <paramref name="definitions"/> to populate <paramref name="namespaceManager"/>
            </summary>
            <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager"/> to populate.</param>
            <param name="definitions">The prefix=namespace definitions.</param>
        </member>
        <member name="T:MSBuild.Community.Tasks.Xslt">
            <summary>
            A task to merge and transform a set of xml files.
            </summary>
            <remarks>
      <p>
        The xml files of parameter <see cref="P:MSBuild.Community.Tasks.Xslt.Inputs"/>
        are merged into one xml document,
        wrapped with a root tag <see cref="P:MSBuild.Community.Tasks.Xslt.RootTag"/>
      </p>
      <p>
        If only one input file is provided,
        merging and wrapping can be omitted
        by setting <see cref="P:MSBuild.Community.Tasks.Xslt.RootTag"/> to an empty string.
      </p>
      <p>
        The root tag can be given any number of attributes
        by providing a list of semicolon-delimited name/value pairs
        to parameter <see cref="P:MSBuild.Community.Tasks.Xslt.RootAttributes"/>.
        For example: <code>RootAttributes="foo=bar;date=$(buildDate)"</code>
      </p>
      <p>
        Parameter <see cref="P:MSBuild.Community.Tasks.Xslt.RootAttributes"/> defaults to
        one attribute with a name specified by <see cref="F:MSBuild.Community.Tasks.Xslt.CREATED_ATTRIBUTE"/>,
        and a local time stamp as value.
        To suppress the default value, an empty parameter
        <code>RootAttributes=""</code>
        must be specified explicitely.
      </p>
      <p>
        The xsl transformation file
        specified by parameter <see cref="P:MSBuild.Community.Tasks.Xslt.Xsl"/>
        is applied on the input.
      </p>
      <p>
        The <see cref="T:Microsoft.Build.Framework.ITaskItem"/> <see cref="P:MSBuild.Community.Tasks.Xslt.Xsl"/>
        can be given any number of metadata,
        which will be handed to the xsl transformation
        as parameters.
      </p>
      <p>
        The output is written to the file
        specified by parameter <see cref="P:MSBuild.Community.Tasks.Xslt.Output"/>.
      </p>
    </remarks><example>
      This example for generating a report
      from a set of NUnit xml results:
      <code>
        <![CDATA[
<ItemGroup>
    <nunitReportXslFile Include="$(MSBuildCommunityTasksPath)\$(nunitReportXsl)">
        <project>$(project)</project>
        <configuration>$(configuration)</configuration>
        <msbuildFilename>$(MSBuildProjectFullPath)</msbuildFilename>
        <msbuildBinpath>$(MSBuildBinPath)</msbuildBinpath>
        <xslFile>$(MSBuildCommunityTasksPath)\$(nunitReportXsl)</xslFile>
    </nunitReportXslFile>
</ItemGroup>

<Target Name="test-report" >
    <Xslt Inputs="@(nunitFiles)"
        RootTag="mergedroot"
        Xsl="@(nunitReportXslFile)" 
        Output="$(testDir)\TestReport.html" />
</Target>]]>
      </code>

      This examples shows all available task attributes:
      <code>
        <![CDATA[
<Time Format="yyyyMMddHHmmss">
    <Output TaskParameter="LocalTimestamp" PropertyName="buildDate" />
</Time>

<Xslt
     Inputs="@(xmlfiles)"
     RootTag="mergedroot"
     RootAttributes="foo=bar;date=$(buildDate)"
     Xsl="transformation.xsl"
     Output="report.html"
/>]]>
      </code>
    </example>
        </member>
        <member name="F:MSBuild.Community.Tasks.Xslt.CREATED_ATTRIBUTE">
            <summary>
            The name of the default attribute
            of the <see cref="P:MSBuild.Community.Tasks.Xslt.RootTag"/>.
            The value is <c>"created"</c>,
            and the attribute will contain a local time stamp.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Xslt.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            Returns <c>true</c> if the task successfully executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xslt.Inputs">
            <summary>
            Gets or sets the xml input files.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xslt.RootTag">
            <summary>
            Gets or sets the xml tag name
            of the root tag wrapped
            around the merged xml input files.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xslt.RootAttributes">
            <summary>
            Gets or sets the list of
            semicolon-delimited name/value pairs
            of the <see cref="P:MSBuild.Community.Tasks.Xslt.RootTag"/>.
            For example: <code>RootAttributes="foo=bar;date=$(buildDate)"</code>
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xslt.Xsl">
            <summary>
            Gets or sets the path of the
            xsl transformation file to apply.
            </summary>
            <remarks>
            The property can be given any number of metadata,
            which will be handed to the xsl transformation
            as parameters.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Xslt.Output">
            <summary>
            Gets or sets the path of the output file.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.FileUpdate">
            <summary>
            Replace text in file(s) using a Regular Expression.
            </summary>
            <example>Search for a version number and update the revision.
            <code><![CDATA[
            <FileUpdate Files="version.txt"
                Regex="(\d+)\.(\d+)\.(\d+)\.(\d+)"
                ReplacementText="$1.$2.$3.123" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.FileUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileUpdate"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.FileUpdate.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.Files">
            <summary>
            Gets or sets the files to update.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.Regex">
            <summary>
            Gets or sets the regex.
            </summary>
            <value>The regex.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.IgnoreCase">
            <summary>
            Gets or sets a value specifies case-insensitive matching. .
            </summary>
            <value><c>true</c> if [ignore case]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.Multiline">
            <summary>
            Gets or sets a value changing the meaning of ^ and $ so they match at the beginning and end, 
            respectively, of any line, and not just the beginning and end of the entire string.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.Singleline">
            <summary>
            Gets or sets a value changing the meaning of the dot (.) so it matches 
            every character (instead of every character except \n). 
            </summary>
            <value><c>true</c> if singleline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.ReplacementCount">
            <summary>
            Gets or sets the maximum number of times the replacement can occur.
            </summary>
            <value>The replacement count.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.ReplacementText">
            <summary>
            Gets or sets the replacement text.
            </summary>
            <value>The replacement text.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FileUpdate.Encoding">
            <summary>
            The character encoding used to read and write the file.
            </summary>
            <remarks>Any value returned by <see cref="P:System.Text.Encoding.WebName"/> is valid input.
            <para>The default is <c>utf-8</c></para></remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.FxCop">
            <summary>
            Uses FxCop to analyse managed code assemblies and reports on
            their design best-practice compliance.
            </summary>
            <example>
            <para>Shows how to analyse an assembly and use an XSLT stylesheet 
            to present the report as an HTML file. If the static anlysis fails,
            the build does not stop - this is controlled with the <c>FailOnError</c>
            parameter.</para>
            <code><![CDATA[
            <FxCop 
              TargetAssemblies="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.dll"
              RuleLibraries="@(FxCopRuleAssemblies)" 
              Rules="Microsoft.Design#CA1012;-Microsoft.Performance#CA1805"
              AnalysisReportFileName="Test.html"
              DependencyDirectories="$(MSBuildCommunityTasksPath)"
              FailOnError="False"
              ApplyOutXsl="True"
              OutputXslFileName="C:\Program Files\Microsoft FxCop 1.32\Xml\FxCopReport.xsl"
            />
            ]]></code>
            </example>
            <remarks>If you include the <c>MSBuild.Community.Tasks.Targets</c> file 
            in you build project, the ItemGroup <c>@(FxCopRuleAssemblies)</c> is defined
            with the standard FxCop Rules Assemblies.</remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.FxCop.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.FxCop.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.FxCop.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments 
            to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass 
            directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.FxCop.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid. 
            </summary>
            <returns>true if all task parameters are valid; otherwise, false</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.FxCop.GetWorkingDirectory">
            <summary>
            Returns the directory in which to run the executable file.
            </summary>
            <returns>
            The directory in which to run the executable file, 
            or a null reference (Nothing in Visual Basic) if the executable file 
            should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.ApplyOutXsl">
            <summary>
            Applies the XSL transformation specified in /outXsl to the 
            analysis report before saving the file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.DirectOutputToConsole">
            <summary>
            Directs analysis output to the console or to the 
            Output window in Visual Studio .NET. By default, 
            the XSL file FxCopConsoleOutput.xsl is applied to the 
            output before it is displayed.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.DependencyDirectories">
            <summary>
            Specifies additional directories to search for assembly dependencies. 
            FxCopCmd always searches the target assembly directory and the current 
            working directory.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.TargetAssemblies">
            <summary>
            Specifies the target assembly to analyze.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.ConsoleXslFileName">
            <summary>
            Specifies the XSL or XSLT file that contains a transformation to 
            be applied to the analysis output before it is displayed in the console.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.ImportFiles">
            <summary>
            Specifies the name of an analysis report or project file to import. 
            Any messages in the imported file that are marked as excluded are not 
            included in the analysis results.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.RuleLibraries">
            <summary>
            Specifies the filename(s) of FxCop rule assemblies
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.Rules">
            <summary>
            The list of rules to run
            </summary>
            <remarks>Rule names should be provided using the format Library#RuleNumber. For example <c>Microsoft.Design#CA1012</c>
            <para>Place a single hyphen (-) in front of the rule name to exclude it. For example <c>-Microsoft.Performance#CA1805</c></para>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.AnalysisReportFileName">
            <summary>
            Specifies the file name for the analysis report.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.OutputXslFileName">
            <summary>
            Specifies the XSL or XSLT file that is referenced by the 
            xml-stylesheet processing instruction in the analysis report.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.PlatformDirectory">
            <summary>
            Specifies the location of the version of Mscorlib.dll 
            that was used when building the target assemblies if this 
            version is not installed on the computer running FxCopCmd.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.ProjectFile">
            <summary>
            Specifies the filename of FxCop project file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.IncludeSummaryReport">
            <summary>
            Includes a summary report with the informational 
            messages returned by FxCopCmd.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.TypeList">
            <summary>
            Comma-separated list of type names to analyze.  This option disables 
            analysis of assemblies, namespaces, and resources; only the specified 
            types and their members are included in the analysis.  
            Use the wildcard character '*' at the end of the name to select multiple types.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.SaveResults">
            <summary>
            Saves the results of the analysis in the project file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
            <returns>
            The directory in which to run the executable file, or a null reference (Nothing in Visual Basic) if the executable file should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.Verbose">
            <summary>
            Gets or sets a value indicating whether the output is verbose.
            </summary>
            <value><c>true</c> if verbose; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.FailOnError">
            <summary>
            Gets or sets a value indicating whether the build should
            fail if static code analysis reports errors. Defaults to 
            <c>true</c>.
            </summary>
            <value><c>true</c> if verbose; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FxCop.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.ServiceActions">
            <summary>
            Defines the actions that can be performed on a service.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceActions.Start">
            <summary>
            Starts a service.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceActions.Stop">
            <summary>
            Stops a service.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceActions.Restart">
            <summary>
            Restarts a service.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceActions.Pause">
            <summary>
            Pauses a running service.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceActions.Continue">
            <summary>
            Continues a paused service.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.ServiceController">
            <summary>
            Task that can control a Windows service.
            </summary>
            <example>
            <para>Restart Web Server</para>
            <code><![CDATA[
            <ServiceController ServiceName="w3svc" Action="Restart" />
            ]]></code>
            </example>
        </member>
        <member name="T:MSBuild.Community.Tasks.ServiceQuery">
            <summary>
            Task that can determine the status of a specified service
            on a target server.
            </summary>
            <example>
            <para>Check status of SQL Server</para>
            <code><![CDATA[
            <ServiceQuery ServiceName="MSSQLServer">
                <Output TaskParameter="Status" PropertyName="ResultStatus" />
            </ServiceQuery>
            <Message Text="MSSQLServer Service Status: $(ResultStatus)"/>
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.Community.Tasks.ServiceQuery.UNKNOWN_STATUS">
            <summary>
            The unknown <see cref="P:MSBuild.Community.Tasks.ServiceQuery.Status"/>
            returned when the service does not exist.
            The value is "Unknown".
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.ServiceQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceQuery"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.ServiceQuery.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.ServiceQuery.GetServiceController">
            <summary>
            Gets the service controller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.MachineName">
            <summary>
            Gets or sets the name of the machine.
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status of the service.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.CanPauseAndContinue">
            <summary>
            Gets a value indicating whether the service can be paused and resumed.
            </summary>
            <value>
            	<c>true</c> if this instance can pause and continue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.CanShutdown">
            <summary>
            Gets a value indicating whether the service should be notified when the system is shutting down. 
            </summary>
            <value>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.CanStop">
            <summary>
            Gets a value indicating whether the service can be stopped after it has started. 
            </summary>
            <value><c>true</c> if this instance can stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.DisplayName">
            <summary>
            Gets a friendly name for the service. 
            </summary>
            <value>The name of the display.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceQuery.Exists">
            <summary>
            Gets a value indicating whether the service exists.
            </summary>
            <value><c>true</c> if the service exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MSBuild.Community.Tasks.ServiceController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceController"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.ServiceController.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceController.Action">
            <summary>
            Gets or sets the <see cref="T:ServiceActions"/> to perform on the service.
            </summary>
            <value>The action to perform on the service.</value>
            <enum cref="T:MSBuild.Community.Tasks.ServiceActions"/>
        </member>
        <member name="P:MSBuild.Community.Tasks.ServiceController.Timeout">
            <summary>
            Gets or sets the timeout for the command. The default is
            one minute.
            </summary>
            <value>The timeout for the command.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssClean">
            <summary>
            Task that can strip the source control information from a
            Visual Studio Solution and subprojects.
            </summary>
            <remarks>This task is useful if you keep an archive of the
            source tree at each build milestone, because it's irritating to have
            to remove source control binding manually once you've copied a
            version of the code from your archive.</remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssClean.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.FtpUpload">
            <summary>
            Uploads a file using File Transfer Protocol (FTP).
            </summary>
            <example>Upload a file.
            <code><![CDATA[
            <FtpUpload 
                LocalFile="MSBuild.Community.Tasks.zip" 
                RemoteUri="ftp://localhost/MSBuild.Community.Tasks.zip" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.FtpUpload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FtpUpload"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.FtpUpload.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.FtpUpload.LocalFile">
            <summary>
            Gets or sets the local file to upload.
            </summary>
            <value>The local file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FtpUpload.RemoteUri">
            <summary>
            Gets or sets the remote URI to upload.
            </summary>
            <value>The remote URI.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FtpUpload.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FtpUpload.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.FtpUpload.UsePassive">
            <summary>
            Gets or sets the behavior of a client application's data transfer process.
            </summary>
            <value><c>true</c> if [use passive]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.AppPoolCreate">
            <summary>
            Creates a new application pool on a local or remote machine with IIS installed.  The default is 
            to create the new application pool on the local machine.  If connecting to a remote machine, you can
            specify the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Username"/> and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Password"/> for the task
            to run under.
            </summary>
            <example>Create a new application pool on the local machine.
            <code><![CDATA[
            <AppPoolCreate AppPoolName="MyAppPool" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.AppPoolCreate.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.ApplicationPoolName">
            <summary>
            Gets or sets the name of the application pool.
            </summary>
            <value>The name of the application pool.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AppPoolAutoStart">
            <summary>
            The AppPoolAutoStart property indicates to the World Wide Web Publishing Service (WWW service)
            to automatically start an application pool when the application pool is created or when IIS
            is started, if the value of this property is set to true.
            </summary>
            <value>Value indicating if AppPoolAutoStart is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AppPoolIdentityType">
            <summary>
            The AppPoolIdentityType property allows application pools to run as a specific user account:
            
            0 - The application pool runs as NT AUTHORITY\SYSTEM.
            1 - The application pool runs as NT AUTHORITY\LOCAL SERVICE.
            2 - The application pool runs as NT AUTHORITY\NETWORK SERVICE.
            3 - The application pool runs as a specific user account, defined by the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.WAMUserName"/> property.
            </summary>
            <value>Value indicating the application pool identity type.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AppPoolQueueLength">
            <summary>
            The AppPoolQueueLength property indicates to the Universal Listener how many requests
            to queue up for an application pool before rejecting future requests. When the limit
            for this property is exceeded, IIS rejects the additional requests with a 503 error.
            </summary>
            <value>Value indicating the application pool queue length.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AutoShutdownAppPoolExe">
            <summary>
            The AutoShutdownAppPoolExe property specifies an executable to run when the World Wide Web
            Publishing Service (WWW service) shuts down an application pool for rapid fail protection. You
            can use the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AutoShutdownAppPoolParams"/> property to send parameters to the executable.
            </summary>
            <value>Value indicating the application pool auto shutdown executable.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.AutoShutdownAppPoolParams">
            <summary>
            The AutoShutdownAppPoolParams property specifies any command-line parameters for the executable that
            is specified in the AutoShutdownAppPoolExe property. You can use these two properties in the following
            way to send e-mail, for example, when the World Wide Web Publishing Service (WWW service) shuts down
            an application pool for rapid fail protection:
            
            AutoShutdownAppPoolExe = "C:\LogAndSendMail.bat"
            AutoShutdownAppPoolParams = "-AppPoolName %1%"
            
            where %1% represents the application pool name.
            </summary>
            <value>Value indicating the parameters for the application pool auto shutdown executable.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.CPUAction">
            <summary>
            The CPUAction property configures the action(s) that IIS takes when Microsoft Windows NT ® job objects
            run. Only one Windows NT job object exists per application pool, therefore the CPUAction property
            is configured on a per application pool basis.
            
            Possible values:
            0 - No action is taken except that a warning is written to the event log when the CPU limit is exceeded.
            1 - Application pool worker processes that exceed their CPU limit will be forced to shut down.
            </summary>
            <value>Value indicating the CPU action.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.CPULimit">
            <summary>
            The CPULimit property configures the maximum percentage of CPU resources that worker processes
            in an application pool are allowed to consume over a period of time, as indicated by the
            <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.CPUResetInterval"/> property. Set this property by specifying a percentage of CPU
            usage, multiplied by 1000. For example, if you want the CPU usage limit to be 50%, set CPULimit to 50,000.
            </summary>
            <value>Value indicating the CPU limit.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.CPUResetInterval">
            <summary>
            The CPUResetInterval property specifies the reset period (in minutes) for CPU monitoring and
            throttling limits on the application pool. When the number of minutes elapsed since the last
            process accounting reset equals the number specified by this property, IIS will reset the CPU
            timers for both the logging and limit intervals. Setting the value of this property to 0
            disables CPU monitoring.
            </summary>
            <value>Value indicating the CPU reset interval.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.DisallowOverlappingRotation">
            <summary>
            The DisallowOverlappingRotation property specifies whether or not the World Wide Web Publishing
            Service (WWW Service) should start up another worker process to replace the existing worker
            process while it is shutting down.
            </summary>
            <value>Value indicating the DisallowOverlappingRotation.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.DisallowRotationOnConfigChange">
            <summary>
            The DisallowRotationOnConfigChange property specifies whether or not the World Wide Web Publishing
            Service (WWW Service) should rotate worker processes in an application pool when the configuration
            has changed. This means that the worker processes will not pick up application pool changes to
            values passed to the worker process, such as <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.IdleTimeout"/> and <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartRequests"/>.
            </summary>
            <value>Value indicating the DisallowRotationOnConfigChange.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.IdleTimeout">
            <summary>
            The IdleTimeout property specifies how long (in minutes) a worker process should run idle if no new
            requests are received and the worker process is not processing requests. After the allotted time
            passes, the worker process should request to be shut down by the World Wide Web Publishing Service (WWW Service).
            </summary>
            <value>Value indicating the idle timeout.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.LoadBalancerCapabilities">
            <summary>
            The LoadBalancerCapabilities property specifies behavior when a service is unavailable. A setting of 1
            terminates the connection. A setting of 2 sends error code 503.
            </summary>
            <value>Value indicating the load balancer capabilities.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.LogEventOnRecycle">
            <summary>
            The LogEventOnRecycle property specifies that IIS should log an event when an application pool is
            recycled. Application pools recycle for a variety of reasons. In order for IIS to log the event, the
            LogEventOnRecycle property must have a bit set corresponding to the reason for the recycle.
            </summary>
            <value>Value indicating which recycle events to log.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.LogonMethod">
            <summary>
            The LogonMethod property contains an integer that specifies the logon method for cleartext 
            logons. Valid settings are:
            
            0 for interactive logon.
            1 for batch logon.
            2 for network logon.
            3 for cleartext logon.
            </summary>
            <value>Value indicating the logon method.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.MaxProcesses">
            <summary>
            The MaxProcesses property determines the maximum number of worker processes an application pool
            allows to service requests for an application pool. This property cannot be set to 0 because there
            are no unmanaged pools.
            </summary>
            <value>Value indicating the maximum number of worker processes allowed by the application pool.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.OrphanActionExe">
            <summary>
            The OrphanActionExe property specifies an executable to run when the World Wide Web Publishing
            Service (WWW service) orphans a worker process. You can use the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.OrphanActionParams"/> property
            to send parameters to the executable.
            </summary>
            <value>The value for the orphan action executable.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.OrphanActionParams">
            <summary>
            The OrphanActionParams property specifies command-line parameters for the executable
            specified by the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.OrphanActionExe"/> property.
            </summary>
            <value>Value indicating the orphan action parameters.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.OrphanWorkerProcess">
            <summary>
            The OrphanWorkerProcess property, when set to true, notifies the World Wide Web Publishing
            Service (WWW Service) not to terminate a worker process that fails to respond to pings, but
            to instead orphan the worker process in the application pool if the worker process suffers
            fatal errors.
            </summary>
            <value>Value indicating the orphan worker process.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartMemory">
            <summary>
            The PeriodicRestartMemory property specifies the amount of virtual memory (in KB) that a
            worker process can use before the worker process recycles. The maximum value supported
            for this property is 4,294,967 KB.
            </summary>
            <value>Value indicating the amount of memory.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartPrivateMemory">
            <summary>
            The PeriodicRestartPrivateMemory property specifies the amount of private memory (in KB) that a
            worker process can use before the worker process recycles. The maximum value supported
            for this property is 4,294,967 KB.
            </summary>
            <value>Value indicating the amount of memory.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartRequests">
            <summary>
            The PeriodicRestartRequests property indicates the number of requests the OOP application
            should process, after which it is recycled.
            </summary>
            <value>Value indicating the number of requests.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartSchedule">
            <summary>
            The PeriodicRestartSchedule property specifies the time (in 24 hour format) that the application
            will be rotated. Each time is in local time and is specified in the following format:
            
            PeriodicRestartSchedule="hh:mm,hh:mm,hh:mm"
            </summary>
            <value>Value indicating the restart schedule.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PeriodicRestartTime">
            <summary>
            The PeriodicRestartTime property specifies the period of time, in minutes, after which IIS
            rotates an isolated OOP application. Setting the value of this property to 0 disables the
            property. The maximum supported value for this property is 71,582.
            </summary>
            <value>Value indicating the restart time period.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PingingEnabled">
            <summary>
            The PingingEnabled property specifies whether the World Wide Web Publishing Service
            (WWW Service) should periodically monitor the health of a worker process. Setting the
            value of this property to true indicates to the WWW service to monitor the worker
            processes to ensure that the they are running and healthy.
            </summary>
            <value>Value indicating if pinging is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PingInterval">
            <summary>
            The PingInterval property specifies the period of time (in seconds) between health-monitoring
            pings that the World Wide Web Publishing Service (WWW Service) sends to a worker process.
            </summary>
            <value>Value indicating the ping interval.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.PingResponseTime">
            <summary>
            The PingResponseTime property specifies the amount of time (in seconds) that a worker process
            is given to respond to a health monitoring ping. After the time limit is exceeded, the World
            Wide Web Publishing Service (WWW Service) terminates the worker process.
            </summary>
            <value>Value indicating the ping response time.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtection">
            <summary>
            Setting the RapidFailProtection property to true instructs the World Wide Web Publishing
            Service (WWW service) to put all applications in an application pool out of service if the
            number of worker process crashes has reached the maximum specified by the
            <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtectionMaxCrashes"/> property, within the number of minutes specified
            by the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtectionInterval"/> property.
            </summary>
            <value>Value indicating if rapid fail protection is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtectionInterval">
            <summary>
            The RapidFailProtectionInterval property specifies the number of minutes before the failure
            count for a process is reset. See <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtection"/>.
            </summary>
            <value>Value indicating the rapid fail protection interval.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtectionMaxCrashes">
            <summary>
            The RapidFailProtectionMaxCrashes property specifies the maximum number of failures
            allowed within the number of minutes specified by the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtectionInterval"/> 
            property. See <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.RapidFailProtection"/>.
            </summary>
            <value>Value indicating the maximum number of crashes.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.ShutdownTimeLimit">
            <summary>
            The ShutdownTimeLimit property specifies the amount of time (in seconds) after a recycle
            threshold has been reached that IIS waits for all old requests to finish running in a worker
            process before terminating the worker process.
            </summary>
            <value>Value indicating the shutdown time limit.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.SMPAffinitized">
            <summary>
            Setting the SMPAffinitized property to true indicates that a particular worker process
            assigned to an application pool should be assigned to a given CPU. This property is used
            in conjunction with the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.SMPProcessorAffinityMask"/> property to configure a
            particular processor a worker process will be assigned to.
            </summary>
            <value>Value indicating if SMPAffinitized is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.SMPProcessorAffinityMask">
            <summary>
            The SMPProcessorAffinityMask property configures the hexadecimal processor mask. The hexadecimal
            processor mask indicates to which CPU the worker processes in an application pool should be
            bound. Before this property takes affect, the <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.SMPAffinitized"/> property must be set
            to true for the application pool. These properties cannot be set through IIS Manager.
            
            Do not set this property to zero. Doing so causes no SMP affinity to be configured, creating an
            error condition. The default DWORD value is 4294967295 (or -1), which is represented in hexadecimal
            as 0xFFFFFFFF. A value of 0xFFFFFFFF in SMPProcessorAffinityMask indicates that all processors are enabled.
            </summary>
            <value>Value indicating the SMP processor affinity bit mask.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.StartupTimeLimit">
            <summary>
            The value of the StartupTimeLimit property specifies the amount of time (in seconds) that the World Wide
            Web Publishing Service (WWW Service) should wait for a worker process to finish starting up and
            reporting to the WWW Service.
            </summary>
            <value>Value indicating the startup time limit.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.WAMUserName">
            <summary>
            The WAMUserName property specifies the account user name that IIS uses by default as the COM+
            application identity for newly created IIS out-of-process applications. The values of this
            property and its companion property, <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.WAMUserPass"/>, are set when IIS is installed, and
            match the user name and password values in the Microsoft Windows user account, which is established
            at the same time. Changing the value of this property is not recommended. If you do, change
            it to a valid Windows user account, and change WAMUserPass to the corresponding password
            for the new account.
            
            Important:
            Changes to WAMUserName and WAMUserPass may disrupt the operation of existing IIS out-of-process
            applications. You can synchronize application identities using Component Services to edit the
            user name and password values, found on the Identity tab of the property sheet for each package.
            
            In-process applications are not affected by these property values.
            </summary>
            <value>Value indicating the username.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.WAMUserPass">
            <summary>
            The WAMUserPass property specifies the password for the account that IIS uses by default as the COM+
            application identity for newly created IIS out-of-process applications. The values of this property
            and its companion property, <see cref="P:MSBuild.Community.Tasks.IIS.AppPoolCreate.WAMUserName"/>, are set when IIS is installed, and match the
            password and user name values in the Microsoft Windows user account (IWAM_ MachineName, where MachineName
            is the name of the machine on which IIS is installed) established at the same time.
            
            Important:
            Changing the value of this property is not recommended. If you do, you must change the Windows account
            password to the identical value. You must also synchronize existing IIS out-of-process application
            identities, using Component Services to edit the user name and password values, which are found on the
            Identity tab of the property sheet for each package.
            
            In-process applications are not affected by these property values.
            </summary>
            <value>Value indicating the password.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebDirectoryCreate">
            <summary>
            Creates a new web directory on a local or remote machine with IIS installed.  The default is 
            to create the new web directory on the local machine.  The physical path is required to already exist
            on the target machine.  If connecting to a remote machine, you can specify the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Username"/>
            and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Password"/> for the task to run under.
            </summary>
            <example>Create a new web directory on the local machine.
            <code><![CDATA[
            <WebDirectoryCreate VirtualDirectoryName="MyVirDir"
                VirtualDirectoryPhysicalPath="C:\Inetpub\MyWebDir" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.VirtualDirectoryName">
            <summary>
            Gets or sets the name of the virtual directory.
            </summary>
            <value>The name of the virtual directory.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.VirtualDirectoryPhysicalPath">
            <summary>
            Gets or sets the virtual directory physical path.  The physical directory must
            exist before this task executes.
            </summary>
            <value>The virtual directory physical path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessExecute">
            <summary>
            Gets or sets a value that indicates if the file
            or the contents of the folder may be executed, regardless of file type.
            </summary>
            <value>A value indicating if AccessExecute is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessNoRemoteExecute">
            <summary>
            A value of true indicates that remote requests to execute applications
            are denied; only requests from the same computer as the IIS server succeed
            if the AccessExecute property is set to true. You cannot set 
            AccessNoRemoteExecute to false to enable remote requests, and set
            <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessExecute"/> to false to disable local requests.
            </summary>
            <value>Value indicating if AccessNoRemoteExecute is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessNoRemoteRead">
            <summary>
            A value of true indicates that remote requests to view files are denied; only
            requests from the same computer as the IIS server succeed if the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessRead"/>
            property is set to true. You cannot set <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessNoRemoteRead"/> to false to enable
            remote requests, and set <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessRead"/> to false to disable local requests.
            </summary>
            <value>Value indicating if AccessNoRemoteRead is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessNoRemoteScript">
            <summary>
            A value of true indicates that remote requests to view dynamic content are denied; only
            requests from the same computer as the IIS server succeed if the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessScript"/> property
            is set to true. You cannot set AccessNoRemoteScript to false to enable remote requests, 
            and set <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessScript"/> to false to disable local requests.
            </summary>
            <value>Value indicating if AccessNoRemoteScript is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessNoRemoteWrite">
            <summary>
            A value of true indicates that remote requests to create or change files are denied; only
            requests from the same computer as the IIS server succeed if the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessWrite"/> property
            is set to true. You cannot set AccessNoRemoteWrite to false to enable remote requests, 
            and set <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessWrite"/> to false to disable local requests.
            </summary>
            <value>Value indicating if AccessNoRemoteWrite is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessRead">
            <summary>
            A value of true indicates that the file or the contents of the folder may be read
            through Microsoft Internet Explorer.
            </summary>
            <value>Value indicating if AccessRead is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSource">
            <summary>
            A value of true indicates that users are allowed to access source code if either
            Read or Write permissions are set. Source code includes scripts in Microsoft ® Active
            Server Pages (ASP) applications.
            </summary>
            <value>Value indicating if AccessSource is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessScript">
            <summary>
            A value of true indicates that the file or the contents of the folder may be executed
            if they are script files or static content. A value of false only allows static files, 
            such as HTML files, to be served.
            </summary>
            <value>Value indicating if AccessScript is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSsl">
            <summary>
            A value of true indicates that file access requires SSL file permission processing, with
            or without a client certificate.
            </summary>
            <value>Value indicating if AccessSsl is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSsl128">
            <summary>
            A value of true indicates that file access requires SSL file permission processing
            with a minimum key size of 128 bits, with or without a client certificate.
            </summary>
            <value>Value indicating if AccessSsl128 is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslMapCert">
            <summary>
            A value of true indicates that SSL file permission processing maps a client certificate
            to a Microsoft Windows ® operating system user-account. The <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslNegotiateCert"/> property
            must also be set to true for the mapping to occur.
            </summary>
            <value>Value indicating if AccessSslMapCert is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslNegotiateCert">
            <summary>
            A value of true indicates that SSL file access processing requests a certificate from
            the client. A value of false indicates that access continues if the client does not have
            a certificate. Some versions of Internet Explorer will close the connection if the server
            requests a certificate and a certificate is not available (even if <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslRequireCert"/> 
            is also set to true).
            </summary>
            <value>Value indicating if AccessSslNegotiateCert is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslRequireCert">
            <summary>
            A value of true indicates that SSL file access processing requests a certificate from the
            client. If the client provides no certificate, the connection is closed. <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessSslNegotiateCert"/> 
            must also be set to true when using AccessSSLRequireCert.
            </summary>
            <value>Value indicating if AccessSslRequireCert is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AccessWrite">
            <summary>
            A value of true indicates that users are allowed to upload files and their associated
            properties to the enabled directory on your server or to change content in a Write-enabled
            file. Write can be implemented only with a browser that supports the PUT feature of
            the HTTP 1.1 protocol standard.
            </summary>
            <value>Value indicating if AccessWrite is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AnonymousPasswordSync">
            <summary>
            The AnonymousPasswordSync property indicates whether IIS should handle the user password
            for anonymous users attempting to access resources.
            </summary>
            <value>Value indicating if AnonymousPasswordSync is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AppAllowClientDebug">
            <summary>
            The AppAllowClientDebug property specifies whether ASP client-side debugging
            is enabled. This property is independent of <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AppAllowDebugging"/>, which
            applies to server-side debugging.
            </summary>
            <value>Value indicating if AppAllowClientDebug is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AppAllowDebugging">
            <summary>
            The AppAllowDebugging property specifies whether ASP debugging is enabled on
            the server. This property is independent of the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AppAllowClientDebug"/> property, 
            which applies to client-side debugging.
            </summary>
            <value>Value indicating if AppAllowDebugging is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspAllowSessionState">
            <summary>
            The AspAllowSessionState property enables session state persistence for the ASP application.
            </summary>
            <value>Value indicating if the AspAllowSessionState is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspBufferingOn">
            <summary>
            The AspBufferingOn property specifies whether output from an ASP application will be buffered.
            </summary>
            <value>Value indicating if the AspBufferingOn is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspEnableApplicationRestart">
            <summary>
            The AspEnableApplicationRestart determines whether an ASP application can be
            automatically restarted. When changes are made to Global.asa or metabase properties
            that affect an application, the application will not restart unless the
            AspEnableApplicationRestart property is set to true.
            </summary>
            <value>Value indicating if AspEnableApplicationRestart is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspEnableAspHtmlFallback">
            <summary>
            The AspEnableAspHtmlFallback property controls the behavior of ASP when a
            new request is to be rejected due to a full request queue.
            </summary>
            <value>Value indicating if AspEnableAspHtmlFallback is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspEnableChunkedEncoding">
            <summary>
            The AspEnableChunkedEncoding property specifies whether HTTP 1.1 chunked
            transfer encoding is enabled for the World Wide Web Publishing Service (WWW service).
            </summary>
            <value>Value indicating if AspEnableChunkedEncoding is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspErrorsToNTLog">
            <summary>
            The AspErrorsToNTLog property specifies which ASP errors are written to the
            Windows event log. ASP errors are written to the client browser and to the IIS
            log files by default.
            </summary>
            <value>Value indicating if AspErrorsToNTLog is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspEnableParentPaths">
            <summary>
            The AspEnableParentPaths property specifies whether an ASP page allows paths
            relative to the current directory (using the ..\ notation) or above the current directory.
            </summary>
            <value>Value indicating if AspEnableParentPaths is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspEnableTypelibCache">
            <summary>
            The AspEnableTypelibCache property specifies whether type libraries are cached
            on the server. The World Wide Web Publishing Service (WWW service) setting for
            this property is applicable to all in-process and pooled out-of-process application
            nodes, at all levels. Metabase settings at the Web server level or lower are ignored
            for in-process and pooled out-of-process applications. However, settings at the Web
            server level or lower are used if that node is an isolated out-of-process application.
            </summary>
            <value>Value indicating if AspEnableTypelibCache is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspExceptionCatchEnable">
            <summary>
            The AspExceptionCatchEnable property specifies whether ASP pages trap exceptions
            thrown by components.
            </summary>
            <value>Value indicating if AspExceptionCatchEnable is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspLogErrorRequests">
            <summary>
            The AspLogErrorRequests property controls whether the Web server writes ASP errors
            to the application section of the Windows event log. ASP errors are written to the
            client browser and to the IIS log files by default.
            </summary>
            <value>Value indicating if AspLogErrorRequests is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspScriptErrorSentToBrowser">
            <summary>
            The AspScriptErrorSentToBrowser property specifies whether the Web server writes
            debugging specifics (file name, error, line number, description) to the client
            browser, in addition to logging them to the Windows Event Log. The <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspScriptErrorMessage"/> 
            property provides the error message to be sent if this property is set to false.
            </summary>
            <value>Value indicating if AspScriptErrorSentToBrowser is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspTrackThreadingModel">
            <summary>
            The AspTrackThreadingModel property specifies whether IIS checks the threading model
            of any components (COM objects) that your application creates. The preferred setting
            of this metabase property is false.
            </summary>
            <value>Value indicating if AspTrackThreadingModel is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthAnonymous">
            <summary>
            Specifies Anonymous authentication as one of the possible Windows authentication
            schemes returned to clients as being available.
            </summary>
            <value>Value indicating if AuthAnonymous is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthBasic">
            <summary>
            Specifies Basic authentication as one of the possible Windows authentication
            schemes returned to clients as being available.
            </summary>
            <value>Value indicating if AuthBasic is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthNtlm">
            <summary>
            Specifies Integrated Windows authentication (also known as Challenge/Response or
            NTLM authentication) as one of the possible Windows authentication schemes
            returned to clients as being available.
            </summary>
            <value>Value indicating if AuthNtlm is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthPersistSingleRequest">
            <summary>
            Setting this flag to true specifies that authentication persists only for a single
            request on a connection. IIS resets the authentication at the end of each request, and
            forces re-authentication on the next request of the session.
            </summary>
            <value>Value indicating if AuthPersistSingleRequest is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthPersistSingleRequestIfProxy">
            <summary>
            Setting this flag to true specifies authentication will persist only across single
            requests on a connection if the connection is by proxy. IIS will reset the authentication
            at the end of the request if the current authenticated request is by proxy and it is
            not the special case where IIS is running MSPROXY.
            </summary>
            <value>Value indicating if AuthPersistSingleRequestIfProxy is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AuthPersistSingleRequestAlwaysIfProxy">
            <summary>
            Setting this flag to true specifies that authentication is valid for a single request if
            by proxy. IIS will reset the authentication at the end of the request and force
            re-authentication on the next request if the current authenticated request is by
            proxy of any type.
            </summary>
            <value>Value indicating if AuthPersistSingleRequestAlwaysIfProxy is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CacheControlNoCache">
            <summary>
            The CacheControlNoCache property specifies the HTTP 1.1 directive to prevent caching of content.
            </summary>
            <value>Value indicating if CacheControlNoCache is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CacheIsapi">
            <summary>
            The CacheISAPI property indicates whether ISAPI extensions are cached in memory after first use.
            </summary>
            <value>Value indicating if CacheIsapi is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.ContentIndexed">
            <summary>
            The ContentIndexed property specifies whether the installed content indexer should
            index content under this directory tree.
            </summary>
            <value>Value indicating if ContentIndexed is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CpuAppEnabled">
            <summary>
            This property specifies whether process accounting and throttling should be performed
            for ISAPI extensions and ASP applications. To perform process accounting on CGI
            applications, use the property <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CpuCgiEnabled"/>.
            </summary>
            <value>Value indicating if CpuAppEnabled is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CpuCgiEnabled">
            <summary>
            This property indicates whether IIS should perform process accounting for CGI
            applications. To effectively throttle CGI applications, use the CgiTimeout
            property. To use process accounting for ISAPI and ASP applications, use <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CpuAppEnabled"/>.
            </summary>
            <value>Value indicating if CpuCgiEnabled is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CreateCgiWithNewConsole">
            <summary>
            The CreateCGIWithNewConsole property indicates whether a CGI application runs in its own console.
            </summary>
            <value>Value indicating if CreateCgiWithNewConsole is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.CreateProcessAsUser">
            <summary>
            The CreateProcessAsUser property specifies whether a CGI process is created in the system context or in the context of the requesting user.
            </summary>
            <value>Value indicating if CreateProcessAsUser is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DirBrowseShowDate">
            <summary>
            When set to true, date information is displayed when browsing directories.
            </summary>
            <value>Value indicating if DirBrowseShowDate is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DirBrowseShowExtension">
            <summary>
            When set to true, file name extensions are displayed when browsing directories.
            </summary>
            <value>Value indicating if DirBrowseShowExtension is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DirBrowseShowLongDate">
            <summary>
            When set to true, date information is displayed in extended format when displaying directories.
            </summary>
            <value>Value indicating if DirBrowseShowLongDate is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DirBrowseShowSize">
            <summary>
            When set to true, file size information is displayed when browsing directories.
            </summary>
            <value>Value indicating if DirBrowseShowSize is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DirBrowseShowTime">
            <summary>
            When set to true, file time information is displayed when displaying directories.
            </summary>
            <value>Value indicating if DirBrowseShowTime is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DontLog">
            <summary>
            The DontLog property specifies whether client requests are written to the IIS log files.
            </summary>
            <value>Value indicating if DontLog is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.EnableDefaultDoc">
            <summary>
            When set to true, the default document (specified by the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DefaultDoc"/> property) for
            a directory is loaded when the directory is browsed.
            </summary>
            <value>Value indicating if EnableDefaultDoc is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.EnableDirBrowsing">
            <summary>
            When set to true, directory browsing is enabled.
            </summary>
            <value>Value indicating if EnableDirBrowsing is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.EnableDocFooter">
            <summary>
            The EnableDocFooter property enables or disables custom footers specified by
            the DefaultDocFooter property.
            </summary>
            <value>Value indicating if EnableDocFooter is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.EnableReverseDns">
            <summary>
            The EnableReverseDns property enables or disables reverse Domain Name Server (DNS) lookups
            for the World Wide Web Publishing Service (WWW service). Reverse lookups involve looking
            up the domain name when the IP address is known. Reverse DNS lookups can use significant
            resources and time.
            </summary>
            <value>Value indicating if EnableReverseDns is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.SsiExecDisable">
            <summary>
            The SSIExecDisable property specifies whether server-side include (SSI) #exec directives
            are disabled under this path.
            </summary>
            <value>Value indicating if SsiExecDisable is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.UncAuthenticationPassthrough">
            <summary>
            The UNCAuthenticationPassthrough property enables user authentication passthrough
            for Universal Naming Convention (UNC) virtual root access (for authentication schemes
            that support delegation).
            </summary>
            <value>Value indicating if UncAuthenticationPassthrough is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspScriptErrorMessage">
            <summary>
            The AspScriptErrorMessage property specifies the error message to send to the browser
            if specific debugging errors are not sent to the client (if <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.AspScriptErrorSentToBrowser"/> 
            is set to false).
            </summary>
            <value>Value indicating if AspScriptErrorMessage is enabled or disabled.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.DefaultDoc">
            <summary>
            The DefaultDoc contains one or more file names of default documents that will be returned
            to the client if no file name is included in the client's request. The default document
            will be returned if the <see cref="P:MSBuild.Community.Tasks.IIS.WebDirectoryCreate.EnableDefaultDoc"/> flag of the DirBrowseFlags property
            is set to true for the directory. This property can contain a list of default document
            file names separated by a comma and a space, for example Default.htm, Default.asp.
            </summary>
            <value>Listing of the default documents for the web application.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.AppPoolDelete">
            <summary>
            Deletes an existing application pool on a local or remote machine with IIS installed.  The default is 
            to delete an existing application pool on the local machine.  If connecting to a remote machine, you can
            specify the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Username"/> and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Password"/> for the task
            to run under.
            </summary>
            <example>Delete an existing application pool on the local machine.
            <code><![CDATA[
            <AppPoolDelete AppPoolName="MyAppPool" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.AppPoolDelete.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolDelete.ApplicationPoolName">
            <summary>
            Gets or sets the name of the application pool.
            </summary>
            <value>The name of the application pool.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.WebDirectoryDelete">
            <summary>
            Deletes a web directory on a local or remote machine with IIS installed.  The default is 
            to delete the web directory on the local machine.  If connecting to a remote machine, you
            can specify the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Username"/> and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Password"/> for the
            task to run under.
            </summary>
            <example>Deletes a web directory on the local machine.
            <code><![CDATA[
            <WebDirectoryDelete VirtualDirectoryName="MyVirDir" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.WebDirectoryDelete.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.WebDirectoryDelete.VirtualDirectoryName">
            <summary>
            Gets or sets the name of the virtual directory.
            </summary>
            <value>The name of the virtual directory.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.AppPoolControllerActions">
            <summary>
            Actions the <see cref="T:MSBuild.Community.Tasks.IIS.AppPoolController"/> can do.
            </summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.AppPoolControllerActions.Start">
            <summary>Start the applicaiton pool</summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.AppPoolControllerActions.Stop">
            <summary>Stop the applicaiton pool</summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.AppPoolControllerActions.Restart">
            <summary>Restart the applicaiton pool</summary>
        </member>
        <member name="F:MSBuild.Community.Tasks.IIS.AppPoolControllerActions.Recycle">
            <summary>Recycle the applicaiton pool</summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.IIS.AppPoolController">
            <summary>
            Allows control for an application pool on a local or remote machine with IIS installed.  The default is 
            to control the application pool on the local machine.  If connecting to a remote machine, you can
            specify the <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Username"/> and <see cref="P:MSBuild.Community.Tasks.IIS.WebBase.Password"/> for the task
            to run under.
            </summary>
            <example>Restart an application pool on the local machine.
            <code><![CDATA[
            <AppPoolController AppPoolName="MyAppPool" Action="Restart" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.IIS.AppPoolController.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            True if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolController.ApplicationPoolName">
            <summary>
            Gets or sets the name of the app pool.
            </summary>
            <value>The name of the app pool.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.IIS.AppPoolController.Action">
            <summary>
            Gets or sets the application pool action.
            </summary>
            <value>The application pool action.</value>
            <enum cref="T:MSBuild.Community.Tasks.IIS.AppPoolControllerActions"/>
        </member>
        <member name="T:MSBuild.Community.Tasks.Mail">
            <summary>
            Sends an email message
            </summary>
            <example>Example of sending an email.
            <code><![CDATA[
            <Target Name="Mail">
                <Mail SmtpServer="localhost"
                    To="user@email.com"
                    From="from@email.com"
                    Subject="Test Mail Task"
                    Body="This is a test of the mail task." />
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Mail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mail"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Mail.Execute">
            <summary>Sends an email message</summary>
            <returns>Returns true if successful</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Attachments">
            <summary>
            List of files to attach to message
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Bcc">
            <summary>
            List of addresss that contains the blind carbon copy (BCC) recipients for this e-mail message
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.CC">
            <summary>
            List of addresss that contains the carbon copy (CC) recipients for this e-mail message
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Body">
            <summary>
            The email message body
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.From">
            <summary>
            The from address for this e-mail message
            </summary>
            <remarks>
            This property is required.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.IsBodyHtml">
            <summary>
            A value indicating whether the mail message body is in Html
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Priority">
            <summary>
            The priority of this e-mail message
            </summary>
            <remarks>
            Possible values are High, Normal, and Low
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Subject">
            <summary>
            The subject line for this e-mail message
            </summary>
            <remarks>
            This property is required.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.SmtpServer">
            <summary>
            The name or IP address of the host used for SMTP transactions
            </summary>
            <remarks>
            This property is required.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.To">
            <summary>
            List of addresss that contains the recipients of this e-mail message
            </summary>
            <remarks>
            This property is required.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Mail.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.Add">
            <summary>
            Add numbers
            </summary>
            <example>Adding numbers:
            <code><![CDATA[
            <Math.Add Numbers="4;3">
                <Output TaskParameter="Result" PropertyName="Result" />
            </Math.Add>
            <Message Text="Add 4+3= $(Result)"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.Add.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.Divide">
            <summary>
            Divide numbers
            </summary>
            <example>
      <code>
        <![CDATA[
<Math.Divide Numbers="1;2">
    <Output TaskParameter="Result" PropertyName="Result" />
</Math.Divide>
<Message Text="Divide 1/2= $(Result)"/>
]]>
      </code>
      Above example will display:
      <code>Divide 1/2= 0.5</code>
    </example><example>
      Truncate the result to always return an integer:
      <code>
        <![CDATA[
<Math.Divide Numbers="7;3" TruncateResult="true">
    <Output TaskParameter="Result" PropertyName="Result" />
</Math.Divide>
<Message Text="Divide 7/3= $(Result)"/>
]]>
      </code>
      Above example will display:
      <code>Divide 7/3= 2</code>
    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.Divide.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Math.Divide.TruncateResult">
            <summary>
            When <see langword="true"/>, uses integer division to truncate the result. Default is <see langword="false" />
            </summary>
            <remarks>
            Any remainder in the result is dropped, and the closest integer to zero is returned.
            <para>
            Refer to the documentation for the <see href="http://msdn2.microsoft.com/library/0e16fywh.aspx">\ Operator</see>
            for more information about integer division.
            </para>
            </remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.Multiple">
            <summary>
            Multiple numbers
            </summary>
            <example>
            <code><![CDATA[
            <Math.Multiple Numbers="10;3">
                <Output TaskParameter="Result" PropertyName="Result" />
            </Math.Multiple>
            <Message Text="Multiple 10*3= $(Result)"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.Multiple.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Math.Subtract">
            <summary>
            Subtract numbers
            </summary>
            <example>
            <code><![CDATA[
            <Math.Subtract Numbers="10;3">
                <Output TaskParameter="Result" PropertyName="Result" />
            </Math.Subtract>
            <Message Text="Subtract 10-3= $(Result)"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Math.Subtract.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Move">
            <summary>
            Moves files on the filesystem to a new location.
            </summary>
            <example>
            <para>Move a file to another folder</para>
            <code><![CDATA[
            <Move SourceFiles="Test\MoveMe.txt"
                DestinationFolder="Test\Move" />
            ]]></code>
            <para>Rename a file</para>
            <code><![CDATA[
            <Move SourceFiles="Test\Move\MoveMe.txt"
                DestinationFiles="Test\Move\Renamed.txt" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Move.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Move.MovedFiles">
            <summary>
            Gets the items that were successfully moved.
            </summary>
            <value>The moved files.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Move.DestinationFiles">
            <summary>
            Gets or sets the list of files to moved the source files to. 
            </summary>
            <remarks>
            This list is expected to be a one-to-one mapping with the 
            list specified in the SourceFiles parameter. That is, the 
            first file specified in SourceFiles will be moved to the 
            first location specified in DestinationFiles, and so forth.
            </remarks>
            <value>The destination files.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Move.DestinationFolder">
            <summary>
            Gets or sets the directory to which you want to move the files.
            </summary>
            <value>The destination folder.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Move.SourceFiles">
            <summary>
            Gets or sets the source files to move.
            </summary>
            <value>The source files to move.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.NDoc">
            <summary>
            Runs the NDoc application.
            </summary>
            <example>Generated html help file.
            <code><![CDATA[
            <NDoc Documenter="MSDN" 
                ProjectFilePath="MSBuild.Community.Tasks.ndoc" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.NDoc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDoc"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.NDoc.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.NDoc.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.NDoc.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.NDoc.GetWorkingDirectory">
            <summary>
            Returns the directory in which to run the executable file.
            </summary>
            <returns>
            The directory in which to run the executable file, or a null reference (Nothing in Visual Basic) if the executable file should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.Documenter">
            <summary>
            Gets or sets the documenter.
            </summary>
            <value>The documenter.</value>
            <remarks>Available documenters are VS.NET_2003, JavaDoc, LaTeX, LinearHtml, MSDN, XML.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.ProjectFilePath">
            <summary>
            Gets or sets the project file path.
            </summary>
            <value>The project file path.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.Verbose">
            <summary>
            Gets or sets a value indicating whether the output is verbose.
            </summary>
            <value><c>true</c> if verbose; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
            <returns>
            The directory in which to run the executable file, or a null reference (Nothing in Visual Basic) if the executable file should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NDoc.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.NUnit">
            <summary>
            Run NUnit on a group of assemblies.
            </summary>
            <example>Run NUnit tests.
            <code><![CDATA[
            <ItemGroup>
                <TestAssembly Include="C:\Program Files\NUnit 2.2.7\bin\*.tests.dll" />
            </ItemGroup>
            <Target Name="NUnit">
                <NUnit Assemblies="@(TestAssembly)" />
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.Community.Tasks.NUnit.DEFAULT_NUNIT_DIRECTORY">
            <summary>
            The default relative path of the NUnit installation.
            The value is <c>@"NUnit-Net-2.0 2.2.7\bin"</c>.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.NUnit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.NUnit.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.NUnit.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.NUnit.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.NUnit.GetWorkingDirectory">
            <summary>
            Returns the directory in which to run the executable file.
            </summary>
            <returns>
            The directory in which to run the executable file, or a null reference (Nothing in Visual Basic) if the executable file should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.Assemblies">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.IncludeCategory">
            <summary>
            Gets or sets the categories to include.
            </summary>
            <remarks>Multiple values must be separated by a comma ","</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.ExcludeCategory">
            <summary>
            Gets or sets the categories to exclude.
            </summary>
            <remarks>Multiple values must be separated by a comma ","</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.Fixture">
            <summary>
            Gets or sets the fixture.
            </summary>
            <value>The fixture.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.XsltTransformFile">
            <summary>
            Gets or sets the XSLT transform file.
            </summary>
            <value>The XSLT transform file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.OutputXmlFile">
            <summary>
            Gets or sets the output XML file.
            </summary>
            <value>The output XML file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.ErrorOutputFile">
            <summary>
            The file to receive test error details.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
            <returns>
            The directory in which to run the executable file, or a null reference (Nothing in Visual Basic) if the executable file should be run in the current directory.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.DisableShadowCopy">
            <summary>
            Determines whether assemblies are copied to a shadow folder during testing.
            </summary>
            <remarks>Shadow copying is enabled by default. If you want to test the assemblies "in place",
            you must set this property to <c>True</c>.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.ProjectConfiguration">
            <summary>
            The project configuration to run.
            </summary>
            <remarks>Only applies when a project file is used. The default is the first configuration, usually Debug.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.TestInNewThread">
            <summary>
            Allows tests to be run in a new thread, allowing you to take advantage of ApartmentState and ThreadPriority settings in the config file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.NUnit.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.AttribDirectory">
            <summary>
              Looks up a localized string similar to Attrib directory &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.AttribFile">
            <summary>
              Looks up a localized string similar to Attrib file &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to File Not Found: {0}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpLocalNotFound">
            <summary>
              Looks up a localized string similar to Local File Not Found: {0}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpPercentComplete">
            <summary>
              Looks up a localized string similar to   {0}% Complete ({1}).
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpTransfered">
            <summary>
              Looks up a localized string similar to Transfered {0} ({1}) in {2}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpUploadComplete">
            <summary>
              Looks up a localized string similar to Upload File Complete, {0}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpUploading">
             <summary>
               Looks up a localized string similar to Uploading &quot;{0}&quot;
               to &quot;{1}&quot;
            .
             </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.FtpUriInvalid">
            <summary>
              Looks up a localized string similar to The URI &quot;{0}&quot; scheme is not valid..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.JSCompressCompressed">
            <summary>
              Looks up a localized string similar to Compressed by {0}, from {1} to {2} byte(s).
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.JSCompressCompressing">
            <summary>
              Looks up a localized string similar to Compressing JavaScript in &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.JSCompressWriting">
            <summary>
              Looks up a localized string similar to Writing compressed JavaScript back to &quot;{0}&quot; using {1}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MailEmailing">
            <summary>
              Looks up a localized string similar to Emailing &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MathNotNumber">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not a number..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveCreatesDirectory">
            <summary>
              Looks up a localized string similar to Creating directory &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveDestinationIsDirectory">
            <summary>
              Looks up a localized string similar to Could not move the file &quot;{0}&quot; to the destination file &quot;{1}&quot;, because the destination is a folder instead of a file. To move the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveError">
            <summary>
              Looks up a localized string similar to Unable to move file &quot;{0}&quot; to &quot;{1}&quot;. {2}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveExactlyOneTypeOfDestination">
            <summary>
              Looks up a localized string similar to Both &quot;{0}&quot; and &quot;{1}&quot; were specified as input parameters in the project file. Please choose one or the other..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveFileComment">
            <summary>
              Looks up a localized string similar to Moving file from &quot;{0}&quot; to &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveNeedsDestination">
            <summary>
              Looks up a localized string similar to No destination specified for Move. Please supply either &quot;{0}&quot; or &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.MoveSourceIsDirectory">
            <summary>
              Looks up a localized string similar to The source file &quot;{0}&quot; is actually a directory.  The &quot;Move&quot; task does not support moving directories..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.NUnitNotFound">
            <summary>
              Looks up a localized string similar to Could not find the NUnit Project File open command. Please make sure NUnit is installed..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ParameterNotUsed">
            <summary>
              Looks up a localized string similar to The parameter &quot;{1}&quot; does not apply to the current use of task &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ParameterRequired">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; task was not given a value for the required parameter &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.RegistryRead">
            <summary>
              Looks up a localized string similar to Read Windows Registry.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.RegistryWrite">
            <summary>
              Looks up a localized string similar to Write Windows Registry.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceCannotContinue">
            <summary>
              Looks up a localized string similar to Cannot continue service {0} on computer &apos;{1}&apos; as it does not support the pause and continue..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceCannotPause">
            <summary>
              Looks up a localized string similar to Cannot pause service {0} on computer &apos;{1}&apos; as it does not support the pause and continue..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceCannotStop">
            <summary>
              Looks up a localized string similar to Cannot stop service {0} on computer &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceContinued">
            <summary>
              Looks up a localized string similar to {0} service was continued successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceContinuing">
            <summary>
              Looks up a localized string similar to {0} service is continuing ....
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceNotFound">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find the &apos;{0}&apos; service on &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceNotPaused">
            <summary>
              Looks up a localized string similar to Cannot continue service {0} on computer &apos;{1}&apos; as its not currently paused..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceNotStarted">
            <summary>
              Looks up a localized string similar to Cannot pause service {0} on computer &apos;{1}&apos; as its not currently started..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServicePaused">
            <summary>
              Looks up a localized string similar to {0} service was paused successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServicePausing">
            <summary>
              Looks up a localized string similar to {0} service is pausing ....
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceStarted">
            <summary>
              Looks up a localized string similar to {0} service was started successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceStarting">
            <summary>
              Looks up a localized string similar to {0} service is starting ....
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceStatus">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; service on &apos;{1}&apos; is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceStopped">
            <summary>
              Looks up a localized string similar to {0} service was stopped successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ServiceStopping">
            <summary>
              Looks up a localized string similar to {0} service is stopping ....
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.SolutionNotFound">
            <summary>
              Looks up a localized string similar to Solution file &quot;{0}&quot; not found..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.SvnLocalPathNotWorkCopy">
            <summary>
              Looks up a localized string similar to LocalPath is not a working subversion copy..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.TimeFormatException">
            <summary>
              Looks up a localized string similar to Failed to get current date!.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.TimeGettingCurrentDate">
            <summary>
              Looks up a localized string similar to Getting current date..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.TwoVectorsMustHaveSameLength">
            <summary>
              Looks up a localized string similar to &quot;{2}&quot; refers to {0} item(s), and &quot;{3}&quot; refers to {1} item(s). They must have the same number of items..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.UnzipExtracted">
            <summary>
              Looks up a localized string similar to   extracted &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.UnzipFileToDirectory">
             <summary>
               Looks up a localized string similar to Unzip File &quot;{0}&quot;
                to Directory &quot;{1}&quot;
            .
             </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.UnzipSuccessfully">
            <summary>
              Looks up a localized string similar to Unzipped file &quot;{0}&quot; successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultAddFileCommitFailed">
            <summary>
              Looks up a localized string similar to Commitment of change set failed!.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultAddFileCommitSucceeded">
            <summary>
              Looks up a localized string similar to Files added to Vault repository successfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultAddFilesException">
            <summary>
              Looks up a localized string similar to Files specified for addition to repository cannot be found..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultCheckinFileException">
            <summary>
              Looks up a localized string similar to The file {0} could not be checked in: {1}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultCheckinFileNotFoundException">
            <summary>
              Looks up a localized string similar to File or folder {0} not found for checkin..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultCheckinFolderException">
            <summary>
              Looks up a localized string similar to The folder {0} could not be checked in: {1}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultCheckinSuccessful">
            <summary>
              Looks up a localized string similar to {0} successfully checked out..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultCheckoutSuccessful">
            <summary>
              Looks up a localized string similar to {0} successfully checked out..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultDiskFileDoesNotExist">
            <summary>
              Looks up a localized string similar to Specified diskfile {0} does not exist..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultFileAddedToChangeSet">
            <summary>
              Looks up a localized string similar to File [{0}] added to change set..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultFolderAddedToChangeSet">
            <summary>
              Looks up a localized string similar to Folder [{0}] added to change set..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultIncorrectParameters">
            <summary>
              Looks up a localized string similar to Incorrect parameters passed to VaultSession..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultLoginFailed">
            <summary>
              Looks up a localized string similar to Login to Vault repository failed..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultPathValidationException">
            <summary>
              Looks up a localized string similar to Error validating path &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultRepositorySelectionFailure">
            <summary>
              Looks up a localized string similar to Selection of the repository failed: {0}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultResourceNotFound">
            <summary>
              Looks up a localized string similar to File or folder {0} not found for checkout..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultSetNewWorkingFolder">
            <summary>
              Looks up a localized string similar to Set working folder for {0} to {1} from {2}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultTreeCacheFailure">
            <summary>
              Looks up a localized string similar to ClientInstance.TreeCache has not been initialized, Common cause is that SelectRepository has not been called sucessfully..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultUndoCheckoutSuccessful">
            <summary>
              Looks up a localized string similar to Successfully undid check out for {0}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultUrlRequired">
            <summary>
              Looks up a localized string similar to Url specifying vault location is required..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultUsernameRequired">
            <summary>
              Looks up a localized string similar to Username must be set to access repository..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultWorkingFolderCleared">
            <summary>
              Looks up a localized string similar to Clearing working folder for {0}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VaultWorkingFolderRestored">
            <summary>
              Looks up a localized string similar to Restoring working folder for {0} to {1}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionFileNotFound">
            <summary>
              Looks up a localized string similar to Version file &quot;{0}&quot; not found - creating new file..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionModifiedValue">
            <summary>
              Looks up a localized string similar to Updated to version {0}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionOriginalValue">
            <summary>
              Looks up a localized string similar to Initialized to version {0}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionRead">
            <summary>
              Looks up a localized string similar to Reading version from file &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionReadException">
            <summary>
              Looks up a localized string similar to Unable to read version number from &quot;{0}&quot;. {1}.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionWriteException">
            <summary>
              Looks up a localized string similar to Unable to write version number to &quot;{0}&quot;. {1}&quot;.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.VersionWrote">
            <summary>
              Looks up a localized string similar to Wrote version to file &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.WebDirectoryInvalidDirectory">
            <summary>
              Looks up a localized string similar to Web directory {0} does not exist on {1}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.WebDirectoryScriptMapUpdate">
            <summary>
              Looks up a localized string similar to Setting scriptmap for {0} on web directory {1} on {2}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.WebDirectorySettingInvalidSetting">
            <summary>
              Looks up a localized string similar to Web directory {0} on {1} does not have a setting called {2}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.WebDirectorySettingStatusRead">
            <summary>
              Looks up a localized string similar to Reading {0} property of web directory {1} on {2}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.WebDirectorySettingStatusSet">
            <summary>
              Looks up a localized string similar to Setting {0} property of web directory {1} on {2}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlReadDocument">
            <summary>
              Looks up a localized string similar to Reading Xml Document &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlReadNodes">
            <summary>
              Looks up a localized string similar to   {0} node(s) selected for read..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlReadResult">
            <summary>
              Looks up a localized string similar to XmlRead Result: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlUpdateDocument">
            <summary>
              Looks up a localized string similar to Updating Xml Document &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlUpdateNodes">
            <summary>
              Looks up a localized string similar to   {0} node(s) selected for update..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XmlUpdateResult">
            <summary>
              Looks up a localized string similar to XmlUpdate Wrote: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XsltAddingParameter">
            <summary>
              Looks up a localized string similar to Adding Parameter \&quot;{0}\&quot;: \&quot;{1}\&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XsltAddingRootAttribute">
            <summary>
              Looks up a localized string similar to Adding root attribute {0}=\&quot;{1}\&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XsltCreatingRootTag">
            <summary>
              Looks up a localized string similar to Creating root tag \&quot;{0}\&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XsltNoInputFiles">
            <summary>
              Looks up a localized string similar to No input files..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.XsltNoRootTag">
            <summary>
              Looks up a localized string similar to No root tag inserted..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ZipAdded">
            <summary>
              Looks up a localized string similar to   added &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ZipCreating">
            <summary>
              Looks up a localized string similar to Creating zip file &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ZipFileNotFound">
            <summary>
              Looks up a localized string similar to Zip File Not Found: {0}..
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Properties.Resources.ZipSuccessfully">
            <summary>
              Looks up a localized string similar to Created zip file &quot;{0}&quot; successfully..
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.RegistryRead">
            <summary>
            Reads a value from the Registry
            </summary>
            <example>Read .NET Framework install root from Registry.
            <code><![CDATA[
            <RegistryRead 
                KeyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework" 
                ValueName="InstallRoot">
                <Output TaskParameter="Value" PropertyName="InstallRoot" />
            </RegistryRead>
            <Message Text="InstallRoot: $(InstallRoot)"/>
            ]]></code>
            </example>
            <remarks>The <see cref="P:MSBuild.Community.Tasks.RegistryRead.Value"/> parameter is set according to the following rules:
            <list type="table"><item><description>If a <see cref="P:MSBuild.Community.Tasks.RegistryRead.DefaultValue"/> is provided, it will be used if the <see cref="P:MSBuild.Community.Tasks.RegistryRead.KeyName"/> or <see cref="P:MSBuild.Community.Tasks.RegistryRead.ValueName"/> does not exist.</description></item>
            <item><description>If a <see cref="P:MSBuild.Community.Tasks.RegistryRead.DefaultValue"/> is not provided, the <see cref="P:MSBuild.Community.Tasks.RegistryRead.KeyName"/> exists, but the <see cref="P:MSBuild.Community.Tasks.RegistryRead.ValueName"/> does not exist, <see cref="P:MSBuild.Community.Tasks.RegistryRead.Value"/> will be set to an empty string.</description></item>
            <item><description>If a <see cref="P:MSBuild.Community.Tasks.RegistryRead.DefaultValue"/> is not provided, and the <see cref="P:MSBuild.Community.Tasks.RegistryRead.KeyName"/> does not exist, the task will fail.</description></item></list></remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegistryRead.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RegistryRead"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegistryRead.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryRead.KeyName">
            <summary>
            Gets or sets the full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryRead.ValueName">
            <summary>
            Gets or sets the name of the name/value pair.
            </summary>
            <value>The name of the value.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryRead.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryRead.Value">
            <summary>
            Gets the stored value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.RegistryWrite">
            <summary>
            Writes a value to the Registry
            </summary>
            <example>Write a value to Registry
            <code><![CDATA[
            <RegistryWrite 
                KeyName="HKEY_CURRENT_USER\SOFTWARE\MSBuildTasks"
                ValueName="RegistryWrite"
                Value="Test Write" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegistryWrite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RegistryWrite"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.RegistryWrite.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryWrite.KeyName">
            <summary>
            Gets or sets the full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryWrite.ValueName">
            <summary>
            Gets or sets the name of the name/value pair.
            </summary>
            <value>The name of the value.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.RegistryWrite.Value">
            <summary>
            Gets or sets the value to be stored.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.Script">
            <summary>
            Executes code contained within the task.
            </summary>
            <example>
      <para>Simple script that writes to the console</para>
      <code>
        <![CDATA[
<PropertyGroup>
    <HelloCode>
        <![CDATA[
        public static void ScriptMain() {
            Console.WriteLine("Hello MSBuild Community Scripting World.");
        }
        ]] >
    </HelloCode>
</PropertyGroup>
<Target Name="Hello">
    <Script Language="C#" Code="$(HelloCode)" Imports="System" />
</Target>
]]>
      </code>
    </example><example>
      <para>Script that returns a value.</para>
      <code>
        <![CDATA[
<PropertyGroup>
    <GetProgramFilesCode>
        <![CDATA[
        public static string ScriptMain() {
            return Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
        }
        ]] >
    </GetProgramFilesCode>
</PropertyGroup>
<Target Name="GetProgramFilesFolder">
    <Script Language="C#" Code="$(GetProgramFilesCode)">
        <Output TaskParameter="ReturnValue" PropertyName="ProgramFilesFolder" />
    </Script>
    <Message Text="Program files are in: $(ProgramFilesFolder)" />
</Target>
]]>
      </code>
    </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Script.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.References">
            <summary>
            The required references
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.Imports">
            <summary>
            The namespaces to import.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.Language">
            <summary>
            The language of the script block (defaults to C#).
            </summary>
            <remarks><para>The supported languages are:</para>
            <list type="bullet">
            <item><description>Visual Basic.NET (VB, vb, VISUALBASIC)</description></item>
            <item><description>C# (C#, c#, CSHARP)</description></item>
            <item><description>JavaScript (JS, js, JSCRIPT)</description></item>
            <item><description>J# (VJS, vjs, JSHARP)</description></item>
            </list> or, proviude the fully-qualified name for a class implementing 
            <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/>.</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.MainClass">
            <summary>
            The name of the main class containing the static <c>ScriptMain</c> 
            entry point. 
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.Code">
            <summary>
            The code to compile and execute
            </summary>
            <remarks>
            The code must include a static (Shared in VB) method named ScriptMain.
            It cannot accept any parameters. If you define the method return a <see cref="T:System.String"/>,
            the returned value will be available in the <see cref="P:MSBuild.Community.Tasks.Script.ReturnValue"/> output property.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Script.ReturnValue">
            <summary>
            The string returned from the custom ScriptMain method.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Sleep">
            <summary>
            A task for sleeping for a specified period of time.
            </summary>
            <example>Causes the build to sleep for 300 milliseconds.
            <code><![CDATA[
            <Sleep Milliseconds="300" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Sleep.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Sleep.Milliseconds">
            <summary>
            The number of milliseconds to add to the time to sleep.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Sleep.Seconds">
            <summary>
            The number of seconds to add to the time to sleep.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Sleep.Minutes">
            <summary>
            The number of minutes to add to the time to sleep.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Sleep.Hours">
            <summary>
            The number of hours to add to the time to sleep.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssBase">
            <summary>
            Base class for all of the Visual SourceSafe tasks.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssBase.ConnectToDatabase">
            <summary>
            Attempts to connect to the SourceSafe Database and
            load the specified item, or version of the item, if specified.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssBase.Execute">
            <summary>
            Reserved.
            </summary>
            <returns>Reserved.</returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssBase.LogErrorFromException(System.Exception)">
            <summary>
            Logs an exception using the MSBuild logging framework.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.DatabasePath">
            <summary>
            The path to the folder that contains the srcsafe.ini file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Path">
            <summary>
            The Visual SourceSafe project or file to perform the action
            on (starts with "$/").
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.UserName">
            <summary>
            The name of the user accessing the SourceSafe database.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Version">
            <summary>
            A version of the <see cref="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Path"/> to reference.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Password">
            <summary>
            The password to use to log in to SourceSafe.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Database">
            <summary>
            Represents the VSS Database
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssBase.Item">
            <summary>
            Represents the VSS item selected (file or project).
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssCheckin">
            <summary>
            Task that executes a checkin against a VSS Database.
            </summary>
            <example>
            <para></para>
            <code><![CDATA[<VssCheckin UserName="ccnet_build"
              Password="build"
              LocalPath="C:\Dev\MyProjects\Project\TestFile.cs"
              Recursive="False"
              DatabasePath="\\VSSServer\VSS\srcsafe.ini"
              Path="$/Test/TestFile.cs"
            />
            ]]></code>
            </example>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssRecursiveBase">
            <summary>
            Base class for VSS tasks that can act recursively.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssRecursiveBase.Execute">
            <summary>
            Reserved.
            </summary>
            <returns>Reserved.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssRecursiveBase.Recursive">
            <summary>
            Determines whether to perform the SourceSafe operation
            recursively. The default is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssCheckin.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssCheckin.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssCheckin.Writable">
            <summary>
            Determines whether to leave the file(s) as writable once the
            checkin is complete. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssCheckin.Comment">
            <summary>
            The checkin comment.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssCheckout">
            <summary>
            Task that executes a checkout of files or projects
            against a Visual SourceSafe database.
            </summary>
            <example>
            <para></para>
            <code><![CDATA[<VssCheckout UserName="ccnet_build"
              Password="build"
              LocalPath="C:\Dev\MyProjects\Project"
              Recursive="False"
              DatabasePath="\\VSSServer\VSS\srcsafe.ini"
              Path="$/Test/TestFile.cs"
            />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssCheckout.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssCheckout.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssCheckout.Writable">
            <summary>
            Determines whether files will be writable once retrieved from
            the repository. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssAdd">
            <summary>
            Task that adds files to a Visual SourceSafe database.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssAdd.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssAdd.Files">
            <summary>
            List of files that should be added to SourceSafe.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssAdd.Comment">
            <summary>
            The comment to be applied to the newly added file.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssDiff">
            <summary>
            Task that records differences between the latest version
            of all the items in a Visual SourceSafe project and another version or label
            to a file.
            </summary>
            <example>
            <para>Generates a file containing all of the differences between the 
            current version and the label &quot;Test Label&quot;</para>
            <code><![CDATA[<VssDiff UserName="uid"
             Password="pwd"
             DatabasePath="\\VSSServer\VSS2\srcsafe.ini"
             Path="$/Test"
             OutputFile="Diff.xml"
             Label="Test Label"
            />]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssDiff.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssDiff.Label">
            <summary>
            The value of the label to compare to.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssDiff.OutputFile">
            <summary>
            The name of the file to send the output to.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssGet">
            <summary>
            Task that retireves an item or project from a Visual SourceSafe database.
            </summary>
            <example>
            <para>Get the latest version (recursive) of a file from a VSS database and place
            in the specified local folder.</para>
            <code><![CDATA[
            <VssGet UserName="user"
                Password="password"
                LocalPath="C:\Dev\MyProjects\Project"
                Recursive="True"
                DatabasePath="\\VSSServer\VSS\srcsafe.ini"
                Path="$/Project"
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssGet.Execute">
            <summary>
            Runs the task using the specified parameters.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssGet.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssGet.Replace">
            <summary>
            Determines whether to replace writable files.
            The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssGet.Writable">
            <summary>
            Determines whether files will be writable once retrieved from
            the repository. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssHistory">
            <summary>
            Generates an XML file containing details of all changes made
            to a Visual SourceSafe project or file between specified labels or dates.
            </summary>
            <example>
            <para>Generates a file containing details of all the changes made to the <c>$/Test</c>
            project by a user called joe.bloggs</para>
            <code><![CDATA[<VssHistory UserName="uid"
             Password="pwd"
             DatabasePath="\\VSSServer\VSS\srcsafe.ini"
             Path="$/Test"
             User="joe.bloggs" 
             OutputFile="History.xml"
             Recursive="True"
            />
            ]]></code>
            </example>
            <example>
            <para>Generates a file containing details of all the changes made between the
            labels Build1 and Build2 in the <c>$/Test</c> project.</para>
            <code><![CDATA[<VssHistory UserName="uid"
             Password="pwd"
             DatabasePath="\\VSSServer\VSS\srcsafe.ini"
             Path="$/Test"
             FromLabel="Build1"
             ToLabel="Build2"
             OutputFile="History.xml"
             Recursive="True"
            />
            ]]></code>
            </example>
            <example>
            <para>Generates a file containing details of all the changes made between the
            1st December 2005 and 10th December 2005in the <c>$/Test</c> project.</para>
            <code><![CDATA[<VssHistory UserName="uid"
             Password="pwd"
             DatabasePath="\\VSSServer\VSS\srcsafe.ini"
             Path="$/Test"
             FromDate="2005-12-01 00:00"
             ToDate="2005-12-10 00:00"
             OutputFile="History.xml"
             Recursive="True"
            />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssHistory.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.ToLabel">
            <summary>
            The label to start comparing to.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.FromLabel">
            <summary>
            The label to compare up to.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.ToDate">
            <summary>
            The Start Date for the history.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.FromDate">
            <summary>
            The End Date for the history.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.OutputFile">
            <summary>
            The name and path of the XML output file.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssHistory.User">
            <summary>
            The name of the user whose changes should be listed in 
            the history.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssLabel">
            <summary>
            Task that applies a label to a Visual SourceSafe item.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssLabel.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssLabel.Label">
            <summary>
            The text of the label.
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssLabel.Comment">
            <summary>
            An optional comment.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SourceSafe.VssUndoCheckout">
            <summary>
            Task that undoes a checkout of files or projects
            against a Visual SourceSafe database.
            </summary>
            <example>
            <para></para>
            <code><![CDATA[<VssUndoCheckout UserName="ccnet_build"
              Password="build"
              LocalPath="C:\Dev\MyProjects\Project"
              Recursive="False"
              DatabasePath="\\VSSServer\VSS\srcsafe.ini"
              Path="$/Test/TestFile.cs"
            />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.SourceSafe.VssUndoCheckout.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SourceSafe.VssUndoCheckout.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.SqlExecute">
            <summary>
            Executes a SQL command.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.SqlExecute.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlExecute.ConnectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlExecute.Command">
            <summary>
            The command to execute
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.SqlExecute.Result">
            <summary>
            Output the return count/value
            </summary>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnCheckout">
            <summary>
            Checkout a local working copy of a Subversion repository.
            </summary>
            <example>Checkout a working copy
            <code><![CDATA[
            <Target Name="Checkout">
              <RemoveDir Directories="$(MSBuildProjectDirectory)\Test\Checkout" />
              <SvnCheckout RepositoryPath="file:///d:/svn/repo/Test/trunk" 
                           LocalPath="$(MSBuildProjectDirectory)\Test\Checkout">      
                <Output TaskParameter="Revision" PropertyName="Revision" />
              </SvnCheckout>
              <Message Text="Revision: $(Revision)"/>
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCheckout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnCheckout"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCheckout.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnCommit">
            <summary>
            Subversion Commit command
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCommit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnCommit"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnCommit.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnExport">
            <summary>
            Export a folder from a Subversion repository
            </summary>
            <example> Export from repository
            <code><![CDATA[
            <Target Name="Export">
              <MakeDir Directories="$(MSBuildProjectDirectory)\Test" />
              <RemoveDir Directories="$(MSBuildProjectDirectory)\Test\Export" />
              <SvnExport RepositoryPath="file:///d:/svn/repo/Test/trunk" 
                LocalPath="$(MSBuildProjectDirectory)\Test\Export">
                <Output TaskParameter="Revision" PropertyName="Revision" />
              </SvnExport>
              <Message Text="Revision: $(Revision)"/>
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnExport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnExport"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnExport.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnVersion">
            <summary>
            Summarize the local revision(s) of a working copy.
            </summary>
            <example>The following example gets the revision of the current folder.
            <code><![CDATA[
            <Target Name="Version">
              <SvnVersion LocalPath=".">
                <Output TaskParameter="Revision" PropertyName="Revision" />
              </SvnVersion>
              <Message Text="Revision: $(Revision)"/>
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnVersion"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.Execute">
            <summary>
            Runs the exectuable file with the specified task parameters.
            </summary>
            <returns>
            true if the task runs successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnVersion.LogEventsFromTextOutput(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Logs the events from text output.
            </summary>
            <param name="singleLine">The single line.</param>
            <param name="messageImportance">The message importance.</param>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.LocalPath">
            <summary>Path to local working copy.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.Revision">
            <summary>Revision number of the local working repository.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.HighRevision">
            <summary>High revision number of the local working repository revision range.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.LowRevision">
            <summary>Low revision number of the local working repository revision range.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.Modifications">
            <summary>True if working copy contains modifications.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.Switched">
            <summary>True if working copy is switched.</summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.Exported">
            <summary>
            True if invoked on a directory that is not a working copy, 
            svnversion assumes it is an exported working copy and prints "exported".
            </summary>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Subversion.SvnVersion.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Subversion.SvnUpdate">
            <summary>
            Subversion Update command
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SvnUpdate"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Subversion.SvnUpdate.ValidateParameters">
            <summary>
            Indicates whether all task paratmeters are valid.
            </summary>
            <returns>
            true if all task parameters are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:MSBuild.Community.Tasks.Unzip">
            <summary>
            Unzip a file to a target directory.
            </summary>
            <example>Unzip file tasks
            <code><![CDATA[
            <Unzip ZipFileName="MSBuild.Community.Tasks.zip" 
                TargetDirectory="Backup"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Unzip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unzip"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Unzip.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Unzip.ZipFileName">
            <summary>
            Gets or sets the name of the zip file.
            </summary>
            <value>The name of the zip file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Unzip.TargetDirectory">
            <summary>
            Gets or sets the target directory.
            </summary>
            <value>The target directory.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.Version">
            <summary>
            Generates version information based on various algorithms
            </summary>
            <example>Get version information from file and increment revision.
            <code><![CDATA[
            <Version VersionFile="number.txt" BuildType="Automatic" RevisionType="Increment">
                <Output TaskParameter="Major" PropertyName="Major" />
                <Output TaskParameter="Minor" PropertyName="Minor" />
                <Output TaskParameter="Build" PropertyName="Build" />
                <Output TaskParameter="Revision" PropertyName="Revision" />
            </Version>
            <Message Text="Version: $(Major).$(Minor).$(Build).$(Revision)"/>
            ]]></code>
            </example>
            <example>Specify Major and Minor version information and generate Build and Revision.
            <code><![CDATA[
            <Version BuildType="Automatic" RevisionType="Automatic" Major="1" Minor="3" >
                <Output TaskParameter="Major" PropertyName="Major" />
                <Output TaskParameter="Minor" PropertyName="Minor" />
                <Output TaskParameter="Build" PropertyName="Build" />
                <Output TaskParameter="Revision" PropertyName="Revision" />
            </Version>
            <Message Text="Version: $(Major).$(Minor).$(Build).$(Revision)"/>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Version.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Version"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Version.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.Major">
            <summary>
            Gets or sets the major version number.
            </summary>
            <value>The major version number.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.Minor">
            <summary>
            Gets or sets the minor version number.
            </summary>
            <value>The minor version number.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.Build">
            <summary>
            Gets or sets the build version number.
            </summary>
            <seealso cref="P:MSBuild.Community.Tasks.Version.BuildType"/>
            <value>The build version number.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.Revision">
            <summary>
            Gets or sets the revision version number.
            </summary>
            <seealso cref="P:MSBuild.Community.Tasks.Version.RevisionType"/>
            <value>The revision version number.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.VersionFile">
            <summary>
            Gets or sets the file used to initialize and persist the version.
            </summary>
            <value>The version file.</value>
            <remarks>
            When specified, the task will attempt to load the previous version information from the file.
            After updating the version, the new value will be saved to the file.
            <para>
            If you do not specify a value for this property, the version will be calculated
            based on the values passed to the <see cref="P:MSBuild.Community.Tasks.Version.Major"/>, <see cref="P:MSBuild.Community.Tasks.Version.Minor"/>,
            <see cref="P:MSBuild.Community.Tasks.Version.Build"/>, and <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> properties. The new version will not be persisted.</para></remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.BuildType">
            <summary>
            Gets or sets the method used to generate a <see cref="P:MSBuild.Community.Tasks.Version.Build"/> number
            </summary>
            <remarks>
            If value is not provided, None is assumed.
            The <see cref="P:MSBuild.Community.Tasks.Version.Build"/> number is set according to the following table:
            <list type="table">
            <listheader><term>BuildType</term><description>Description</description></listheader>
            <item><term>None</term><description>The number is not modified.</description></item>
            <item><term>Automatic</term><description>The number of days since <see cref="P:MSBuild.Community.Tasks.Version.StartDate"/>.</description></item>
            <item><term>Increment</term><description>Increases the previous <see cref="P:MSBuild.Community.Tasks.Version.Build"/> value by 1.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.RevisionType">
            <summary>
            Gets or sets the method used to generate a <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> number
            </summary>
            <remarks>
            If value is not provided, None is assumed.
            The <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> number is set according to the following table:
            <list type="table">
            <listheader><term>RevisionType</term><description>Description</description></listheader>
            <item><term>None</term><description>The number is not modified.</description></item>
            <item><term>Automatic</term><description>A number that starts at 0 at midnight, and constantly increases throughout the day (changing roughly every 1.3 seconds). Guaranteed to be safe for components of the AssemblyVersion attribute.</description></item>
            <item><term>Increment</term><description>Increases the previous <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> value by 1.</description></item>
            <item><term>BuildIncrement</term><description>Increases the previous <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> value by 1 when the value of <see cref="P:MSBuild.Community.Tasks.Version.Build"/> is unchanged. If the value of <see cref="P:MSBuild.Community.Tasks.Version.Build"/> has changed, <see cref="P:MSBuild.Community.Tasks.Version.Revision"/> is reset to zero.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Version.StartDate">
            <summary>
            Gets or sets the starting date used to calculate the <see cref="P:MSBuild.Community.Tasks.Version.Build"/> number when <see cref="P:MSBuild.Community.Tasks.Version.BuildType"/> is Automatic.
            </summary>
            <value>The starting date for calculation of the build number.</value>
            <remarks>
            This value is only used when the <see cref="P:MSBuild.Community.Tasks.Version.BuildType"/> is Automatic.
            <para>This default value is January 1, 2000.</para>
            </remarks>
        </member>
        <member name="T:MSBuild.Community.Tasks.WebDownload">
            <summary>
            Downloads a resource with the specified URI to a local file. 
            </summary>
            <example>Download the Microsoft.com home page.
            <code><![CDATA[
            <WebDownload FileUri="http://www.microsoft.com/default.aspx" 
                FileName="microsoft.html" />
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.WebDownload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebDownload"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.WebDownload.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.WebDownload.FileName">
            <summary>
            Gets or sets the name of the local file that is to receive the data.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.WebDownload.FileUri">
            <summary>
            Gets or sets the URI from which to download data.
            </summary>
            <value>The file URI.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.XmlRead">
            <summary>
            Reads a value from a XML document using a XPath.
            </summary>
            <example>Read all targest from a build project.
            <code><![CDATA[
            <XmlRead Prefix="n"
                Namespace="http://schemas.microsoft.com/developer/msbuild/2003" 
                XPath="/n:Project/n:Target/@Name"
                XmlFileName="Subversion.proj">
                <Output TaskParameter="Value" PropertyName="BuildTargets" />
            </XmlRead>
            <Message Text="Build Targets: $(BuildTargets)"/>
            ]]></code>
            </example>
            <remarks>
            If the XPath returns multiple nodes, the Value will 
            be a semicolon delimited list of the nodes text.
            </remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.XmlRead.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmlRead"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.XmlRead.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlRead.XmlFileName">
            <summary>
            Gets or sets the name of the XML file.
            </summary>
            <value>The name of the XML file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlRead.XPath">
            <summary>
            Gets or sets the XPath.
            </summary>
            <value>The XPath.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlRead.Value">
            <summary>
            Gets the value read from file.
            </summary>
            <value>The value.</value>
            <remarks>
            If the XPath returns multiple nodes, the values will be semicolon delimited.
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlRead.Namespace">
            <summary>
            Gets or sets the default namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlRead.Prefix">
            <summary>
            Gets or sets the prefix to associate with the namespace being added.
            </summary>
            <value>The namespace prefix.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.XmlUpdate">
            <summary>
            Updates a XML document using a XPath.
            </summary>
            <example>Update a XML element.
            <code><![CDATA[
            <XmlUpdate Prefix="n"
                Namespace="http://schemas.microsoft.com/developer/msbuild/2003" 
                XPath="/n:Project/n:PropertyGroup/n:TestUpdate"
                XmlFileName="Subversion.proj"
                Value="Test from $(MSBuildProjectFile)"/>
            ]]></code>
            </example>
            <remarks>
            The XML node being updated must exist before using the XmlUpdate task.
            </remarks>
        </member>
        <member name="M:MSBuild.Community.Tasks.XmlUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmlUpdate"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.XmlUpdate.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlUpdate.XmlFileName">
            <summary>
            Gets or sets the name of the XML file.
            </summary>
            <value>The name of the XML file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlUpdate.XPath">
            <summary>
            Gets or sets the XPath.
            </summary>
            <value>The XPath.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlUpdate.Value">
            <summary>
            Gets or sets the value to write.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlUpdate.Namespace">
            <summary>
            Gets or sets the default namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.XmlUpdate.Prefix">
            <summary>
            Gets or sets the prefix to associate with the namespace being added.
            </summary>
            <value>The namespace prefix.</value>
        </member>
        <member name="T:MSBuild.Community.Tasks.Zip">
            <summary>
            Create a zip file with the files specified.
            </summary>
            <example>Create a zip file
            <code><![CDATA[
            <ItemGroup>
                <ZipFiles Include="**\*.*" Exclude="*.zip" />
            </ItemGroup>
            <Target Name="Zip">
                <Zip Files="@(ZipFiles)" 
                    ZipFileName="MSBuild.Community.Tasks.zip" />
            </Target>
            ]]></code>
            Create a zip file using a working directory.
            <code><![CDATA[
            <ItemGroup>
                <RepoFiles Include="D:\svn\repo\**\*.*" />
            </ItemGroup>
            <Target Name="Zip">
                <Zip Files="@(RepoFiles)" 
                    WorkingDirectory="D:\svn\repo" 
                    ZipFileName="D:\svn\repo.zip" />
            </Target>
            ]]></code>
            </example>
        </member>
        <member name="M:MSBuild.Community.Tasks.Zip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zip"/> class.
            </summary>
        </member>
        <member name="M:MSBuild.Community.Tasks.Zip.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.ZipFileName">
            <summary>
            Gets or sets the name of the zip file.
            </summary>
            <value>The name of the zip file.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.ZipLevel">
            <summary>
            Gets or sets the zip level.
            </summary>
            <value>The zip level.</value>
            <remarks>0 - store only to 9 - means best compression</remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.Files">
            <summary>
            Gets or sets the files to zip.
            </summary>
            <value>The files to zip.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.Flatten">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zip"/> is flatten.
            </summary>
            <value><c>true</c> if flatten; otherwise, <c>false</c>.</value>
            <remarks>
            Flattening the zip means that all directories will be removed 
            and the files will be place at the root of the zip file
            </remarks>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:MSBuild.Community.Tasks.Zip.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the zip file.
            </summary>
            <value>The working directory.</value>
            <remarks>
            The working directory is the base of the zip file.  
            All files will be made relative from the working directory.
            </remarks>
        </member>
    </members>
</doc>
