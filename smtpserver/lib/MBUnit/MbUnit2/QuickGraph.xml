<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>QuickGraph</name>
  </assembly>
  <members>
    <member name="T:QuickGraph.CustomEdge">
      <summary>An edge that can hold a value</summary>
    </member>
    <member name="P:QuickGraph.CustomEdge.Value">
      <summary>associated property value</summary>
    </member>
    <member name="T:QuickGraph.CustomVertex">
      <summary>A vertex that can hold a value</summary>
    </member>
    <member name="P:QuickGraph.CustomVertex.Value">
      <summary>Vertex associated property value</summary>
    </member>
    <member name="T:QuickGraph.Edge">
      <summary>A graph edge</summary>
    </member>
    <member name="P:QuickGraph.Edge.ID">
      <summary>Edge unique identification number</summary>
    </member>
    <member name="P:QuickGraph.Edge.Source">
      <summary>Source vertex</summary>
    </member>
    <member name="P:QuickGraph.Edge.SourceID">
      <summary>Source vertex id, for serialization</summary>
    </member>
    <member name="P:QuickGraph.Edge.Target">
      <summary>Target Vertex</summary>
    </member>
    <member name="P:QuickGraph.Edge.TargetID">
      <summary>Source vertex id, for serialization</summary>
    </member>
    <member name="M:QuickGraph.Edge.CompareTo(QuickGraph.Edge)">
      <summary>Compares two edges</summary>
      <param name="obj">Edge to compare</param>
      <exception cref="T:System.ArgumentException">obj is not of type Edge.</exception>
    </member>
    <member name="M:QuickGraph.Edge.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:QuickGraph.Edge.GetHashCode">
      <summary>Hash code, using ID</summary>
    </member>
    <member name="M:QuickGraph.Edge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.Edge.ToString">
      <summary>Converts to string.</summary>
    </member>
    <member name="M:QuickGraph.Edge.ToString(System.IFormatProvider)">
      <summary>Converts to string by returning the formatted ID</summary>
      <param name="provider" />
    </member>
    <member name="M:QuickGraph.Edge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="M:QuickGraph.Edge.op_GreaterThan(QuickGraph.Edge,QuickGraph.Edge)">
      <param name="e1" />
      <param name="e2" />
    </member>
    <member name="M:QuickGraph.Edge.op_LessThan(QuickGraph.Edge,QuickGraph.Edge)">
      <param name="e1" />
      <param name="e2" />
    </member>
    <member name="T:QuickGraph.NamedEdge">
      <summary>A vertex with a name</summary>
    </member>
    <member name="P:QuickGraph.NamedEdge.Name">
      <summary>Vertex name</summary>
    </member>
    <member name="M:QuickGraph.NamedEdge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.NamedEdge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="T:QuickGraph.NamedVertex">
      <summary>A vertex with a name</summary>
    </member>
    <member name="P:QuickGraph.NamedVertex.Name">
      <summary>Vertex name</summary>
    </member>
    <member name="M:QuickGraph.NamedVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.NamedVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="T:QuickGraph.Vertex">
      <summary>A Graph Vertex.</summary>
    </member>
    <member name="P:QuickGraph.Vertex.ID">
      <summary>Unique identification number</summary>
    </member>
    <member name="M:QuickGraph.Vertex.CompareTo(QuickGraph.Vertex)">
      <summary>Compares two vertices</summary>
      <param name="obj">vertex to compare</param>
      <exception cref="T:System.ArgumentException">obj is not of type Vertex</exception>
    </member>
    <member name="M:QuickGraph.Vertex.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:QuickGraph.Vertex.GetHashCode">
      <summary>Hash code. ID used as identification number.</summary>
    </member>
    <member name="M:QuickGraph.Vertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.Vertex.ToString">
      <summary>Converts to string by returning the ID.</summary>
    </member>
    <member name="M:QuickGraph.Vertex.ToString(System.IFormatProvider)">
      <summary>Converts to string by returning the formatted ID</summary>
      <param name="provider" />
    </member>
    <member name="M:QuickGraph.Vertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="M:QuickGraph.Vertex.op_GreaterThan(QuickGraph.Vertex,QuickGraph.Vertex)">
      <param name="v1" />
      <param name="v2" />
    </member>
    <member name="M:QuickGraph.Vertex.op_LessThan(QuickGraph.Vertex,QuickGraph.Vertex)">
      <param name="v1" />
      <param name="v2" />
    </member>
    <member name="T:QuickGraph.Collections.DistanceComparer">
      <summary>Given a Distance map, compare two vertex distance</summary>
    </member>
    <member name="M:QuickGraph.Collections.DistanceComparer.Compare(System.Object,System.Object)">
      <summary>Compare the distance between vertex x and y</summary>
      <param name="x">First vertex</param>
      <param name="y">Second vertex</param>
      <returns>-1 if d[x]&lt;d[y], 0 if d[x] equals d[y] and +1 if d[x] &gt; d[y]</returns>
    </member>
    <member name="T:QuickGraph.Collections.DoubleCollection">
      <summary>A collection of elements of type Double</summary>
    </member>
    <member name="P:QuickGraph.Collections.DoubleCollection.Item(System.Int32)">
      <summary>Gets or sets the Double at the given index in this DoubleCollection.</summary>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.Add(System.Double)">
      <summary>Adds an instance of type Double to the end of this DoubleCollection.</summary>
      <param name="value">The Double to be added to the end of this DoubleCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.AddRange(System.Double[])">
      <summary>Adds the elements of an array to the end of this DoubleCollection.</summary>
      <param name="items">The array whose elements are to be added to the end of this DoubleCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.AddRange(QuickGraph.Collections.DoubleCollection)">
      <summary>Adds the elements of another DoubleCollection to the end of this DoubleCollection.</summary>
      <param name="items">The DoubleCollection whose elements are to be added to the end of this DoubleCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.Contains(System.Double)">
      <summary>Determines whether a specfic Double value is in this DoubleCollection.</summary>
      <param name="value">The Double value to locate in this DoubleCollection.</param>
      <returns>true if value is found in this DoubleCollection; false otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this DoubleCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.IndexOf(System.Double)">
      <summary>Return the zero-based index of the first occurrence of a specific value in this DoubleCollection</summary>
      <param name="value">The Double value to locate in the DoubleCollection.</param>
      <returns>The zero-based index of the first occurrence of the _ELEMENT value if found; -1 otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.Insert(System.Int32,System.Double)">
      <summary>Inserts an element into the DoubleCollection at the specified index</summary>
      <param name="index">The index at which the Double is to be inserted.</param>
      <param name="value">The Double to insert.</param>
    </member>
    <member name="M:QuickGraph.Collections.DoubleCollection.Remove(System.Double)">
      <summary>Removes the first occurrence of a specific Double from this DoubleCollection.</summary>
      <param name="value">The Double value to remove from this DoubleCollection.</param>
    </member>
    <member name="T:QuickGraph.Collections.DoubleCollection.Enumerator">
      <summary>Type-specific enumeration class, used by DoubleCollection.GetEnumerator.</summary>
    </member>
    <member name="T:QuickGraph.Collections.EdgeCollection">
      <summary>A collection of elements of type Edge This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeCollection.Item(System.Int32)">
      <summary>Gets or sets the Edge at the given index in this EdgeCollection.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Add(QuickGraph.Concepts.IEdge)">
      <summary>Adds an instance of type Edge to the end of this EdgeCollection.</summary>
      <param name="value">The Edge to be added to the end of this EdgeCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.AddRange(QuickGraph.Concepts.IEdge[])">
      <summary>Adds the elements of an array to the end of this EdgeCollection.</summary>
      <param name="items">The array whose elements are to be added to the end of this EdgeCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.AddRange(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Adds the elements of another EdgeCollection to the end of this EdgeCollection.</summary>
      <param name="items">The EdgeCollection whose elements are to be added to the end of this EdgeCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether a specfic Edge value is in this EdgeCollection.</summary>
      <param name="value">The Edge value to locate in this EdgeCollection.</param>
      <returns>true if value is found in this EdgeCollection; false otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this EdgeCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.IndexOf(QuickGraph.Concepts.IEdge)">
      <summary>Return the zero-based index of the first occurrence of a specific value in this EdgeCollection</summary>
      <param name="value">The Edge value to locate in the EdgeCollection.</param>
      <returns>The zero-based index of the first occurrence of the _ELEMENT value if found; -1 otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Insert(System.Int32,QuickGraph.Concepts.IEdge)">
      <summary>Inserts an element into the EdgeCollection at the specified index</summary>
      <param name="index">The index at which the Edge is to be inserted.</param>
      <param name="value">The Edge to insert.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the first occurrence of a specific Edge from this EdgeCollection.</summary>
      <param name="value">The Edge value to remove from this EdgeCollection.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeCollection.Enumerator">
      <summary>Type-specific enumeration class, used by EdgeCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeCollection.Enumerator.Current">
      <summary>The current element.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Enumerator.MoveNext">
      <summary>Moves cursor to next element.</summary>
      <returns>true if current is valid, false otherwize</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollection.Enumerator.Reset">
      <summary>Resets the cursor to the position before the first element.</summary>
    </member>
    <member name="T:QuickGraph.Collections.EdgeCollectionCollection">
      <summary>A collection of elements of type EdgeCollection This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeCollectionCollection.Item(System.Int32)">
      <summary>Gets or sets the EdgeCollection at the given index in this EdgeCollectionCollection.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Add(QuickGraph.Collections.EdgeCollection)">
      <summary>Adds an instance of type EdgeCollection to the end of this EdgeCollectionCollection.</summary>
      <param name="value">The EdgeCollection to be added to the end of this EdgeCollectionCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.AddRange(QuickGraph.Collections.EdgeCollection[])">
      <summary>Adds the elements of an array to the end of this EdgeCollectionCollection.</summary>
      <param name="items">The array whose elements are to be added to the end of this EdgeCollectionCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.AddRange(QuickGraph.Collections.EdgeCollectionCollection)">
      <summary>Adds the elements of another EdgeCollectionCollection to the end of this EdgeCollectionCollection.</summary>
      <param name="items">The EdgeCollectionCollection whose elements are to be added to the end of this EdgeCollectionCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Contains(QuickGraph.Collections.EdgeCollection)">
      <summary>Determines whether a specfic EdgeCollection value is in this EdgeCollectionCollection.</summary>
      <param name="value">The EdgeCollection value to locate in this EdgeCollectionCollection.</param>
      <returns>true if value is found in this EdgeCollectionCollection; false otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this EdgeCollectionCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.IndexOf(QuickGraph.Collections.EdgeCollection)">
      <summary>Return the zero-based index of the first occurrence of a specific value in this EdgeCollectionCollection</summary>
      <param name="value">The EdgeCollection value to locate in the EdgeCollectionCollection.</param>
      <returns>The zero-based index of the first occurrence of the _ELEMENT value if found; -1 otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Insert(System.Int32,QuickGraph.Collections.EdgeCollection)">
      <summary>Inserts an element into the EdgeCollectionCollection at the specified index</summary>
      <param name="index">The index at which the EdgeCollection is to be inserted.</param>
      <param name="value">The EdgeCollection to insert.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Remove(QuickGraph.Collections.EdgeCollection)">
      <summary>Removes the first occurrence of a specific EdgeCollection from this EdgeCollectionCollection.</summary>
      <param name="value">The EdgeCollection value to remove from this EdgeCollectionCollection.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeCollectionCollection.Enumerator">
      <summary>Type-specific enumeration class, used by EdgeCollectionCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.Current">
      <summary>Gets the current edge collection</summary>
      <value>Current edge collection</value>
    </member>
    <member name="T:QuickGraph.Collections.EdgeColorDictionary">
      <summary>A dictionary with keys of type Edge and values of type GraphColor This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeColorDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the GraphColor associated with the given Edge</summary>
      <param name="key">The Edge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeColorDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeGraphColorDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeColorDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeGraphColorDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeColorDictionary.Add(QuickGraph.Concepts.IEdge,QuickGraph.Concepts.GraphColor)">
      <summary>Adds an element with the specified key and value to this EdgeGraphColorDictionary.</summary>
      <param name="key">The Edge key of the element to add.</param>
      <param name="value">The GraphColor value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeColorDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeGraphColorDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeGraphColorDictionary.</param>
      <returns>true if this EdgeGraphColorDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeColorDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeGraphColorDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeGraphColorDictionary.</param>
      <returns>true if this EdgeGraphColorDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeColorDictionary.ContainsValue(QuickGraph.Concepts.GraphColor)">
      <summary>Determines whether this EdgeGraphColorDictionary contains a specific value.</summary>
      <param name="value">The GraphColor value to locate in this EdgeGraphColorDictionary.</param>
      <returns>true if this EdgeGraphColorDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeColorDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeGraphColorDictionary.</summary>
      <param name="key">The Edge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeDoubleDictionary">
      <summary>A dictionary with keys of type Edge and values of type Double This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the Double associated with the given Edge</summary>
      <param name="key">The Edge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeDoubleDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeDoubleDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Add(QuickGraph.Concepts.IEdge,System.Double)">
      <summary>Adds an element with the specified key and value to this EdgeDoubleDictionary.</summary>
      <param name="key">The Edge key of the element to add.</param>
      <param name="value">The Double value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeDoubleDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeDoubleDictionary.</param>
      <returns>true if this EdgeDoubleDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeDoubleDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeDoubleDictionary.</param>
      <returns>true if this EdgeDoubleDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.ContainsValue(System.Double)">
      <summary>Determines whether this EdgeDoubleDictionary contains a specific value.</summary>
      <param name="value">The Double value to locate in this EdgeDoubleDictionary.</param>
      <returns>true if this EdgeDoubleDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeDoubleDictionary.</summary>
      <param name="key">The Edge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeEdgeDictionary">
      <summary>A dictionary with keys of type IEdge and values of type IEdge This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the IEdge associated with the given IEdge</summary>
      <param name="key">The IEdge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeEdgeDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeEdgeDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Add(QuickGraph.Concepts.IEdge,QuickGraph.Concepts.IEdge)">
      <summary>Adds an element with the specified key and value to this EdgeEdgeDictionary.</summary>
      <param name="key">The IEdge key of the element to add.</param>
      <param name="value">The IEdge value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeEdgeDictionary contains a specific key.</summary>
      <param name="key">The IEdge key to locate in this EdgeEdgeDictionary.</param>
      <returns>true if this EdgeEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeEdgeDictionary contains a specific key.</summary>
      <param name="key">The IEdge key to locate in this EdgeEdgeDictionary.</param>
      <returns>true if this EdgeEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeEdgeDictionary contains a specific value.</summary>
      <param name="value">The IEdge value to locate in this EdgeEdgeDictionary.</param>
      <returns>true if this EdgeEdgeDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeEdgeDictionary.</summary>
      <param name="key">The IEdge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeEnumerable">
      <summary>A wrapper class for weak collection of IEdge This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerable">
      <summary>Wrapped enumerable</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEnumerable.GetEnumerator">
      <summary>Return a strongly typed enumerator</summary>
      <returns>strongly typed enumerator</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeEnumerable.Wrap(System.Collections.IEnumerable)">
      <summary>Wraps up the weakly typed collection in a strongly typed (IEdge) collection.</summary>
      <param name="en">Collection to wrap</param>
      <returns>Edge enumerable collection</returns>
    </member>
    <member name="T:QuickGraph.Collections.EdgeEnumerable.Enumerator">
      <summary>Strongly typed enumerator</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerator.Current">
      <summary>Current Edge</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerator.Wrapped">
      <summary>Wrapped enumerator</summary>
    </member>
    <member name="T:QuickGraph.Collections.EdgeIntDictionary">
      <summary>A dictionary with keys of type IEdge and values of type Int This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeIntDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the Int associated with the given IEdge</summary>
      <param name="key">The IEdge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeIntDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeIntDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeIntDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeIntDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeIntDictionary.Add(QuickGraph.Concepts.IEdge,System.Int32)">
      <summary>Adds an element with the specified key and value to this EdgeIntDictionary.</summary>
      <param name="key">The IEdge key of the element to add.</param>
      <param name="value">The Int value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeIntDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeIntDictionary contains a specific key.</summary>
      <param name="key">The IEdge key to locate in this EdgeIntDictionary.</param>
      <returns>true if this EdgeIntDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeIntDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeIntDictionary contains a specific key.</summary>
      <param name="key">The IEdge key to locate in this EdgeIntDictionary.</param>
      <returns>true if this EdgeIntDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeIntDictionary.ContainsValue(System.Int32)">
      <summary>Determines whether this EdgeIntDictionary contains a specific value.</summary>
      <param name="value">The Int value to locate in this EdgeIntDictionary.</param>
      <returns>true if this EdgeIntDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeIntDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeIntDictionary.</summary>
      <param name="key">The IEdge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeObjectDictionary">
      <summary>A dictionary with keys of type Edge and values of type Object This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the Object associated with the given Edge</summary>
      <param name="key">The Edge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeObjectDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeObjectDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Add(QuickGraph.Concepts.IEdge,System.Object)">
      <summary>Adds an element with the specified key and value to this EdgeObjectDictionary.</summary>
      <param name="key">The Edge key of the element to add.</param>
      <param name="value">The Object value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeObjectDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeObjectDictionary.</param>
      <returns>true if this EdgeObjectDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeObjectDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeObjectDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeObjectDictionary.</param>
      <returns>true if this EdgeObjectDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeObjectDictionary.ContainsValue(System.Object)">
      <summary>Determines whether this EdgeObjectDictionary contains a specific value.</summary>
      <param name="value">The Object value to locate in this EdgeObjectDictionary.</param>
      <returns>true if this EdgeObjectDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeObjectDictionary.</summary>
      <param name="key">The Edge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.EdgeStringDictionary">
      <summary>A dictionary with keys of type Edge and values of type String This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeStringDictionary.Item(QuickGraph.Concepts.IEdge)">
      <summary>Gets or sets the String associated with the given Edge</summary>
      <param name="key">The Edge whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.EdgeStringDictionary.Keys">
      <summary>Gets a collection containing the keys in this EdgeStringDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.EdgeStringDictionary.Values">
      <summary>Gets a collection containing the values in this EdgeStringDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.EdgeStringDictionary.Add(QuickGraph.Concepts.IEdge,System.String)">
      <summary>Adds an element with the specified key and value to this EdgeStringDictionary.</summary>
      <param name="key">The Edge key of the element to add.</param>
      <param name="value">The String value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.EdgeStringDictionary.Contains(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeStringDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeStringDictionary.</param>
      <returns>true if this EdgeStringDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeStringDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this EdgeStringDictionary contains a specific key.</summary>
      <param name="key">The Edge key to locate in this EdgeStringDictionary.</param>
      <returns>true if this EdgeStringDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeStringDictionary.ContainsValue(System.String)">
      <summary>Determines whether this EdgeStringDictionary contains a specific value.</summary>
      <param name="value">The String value to locate in this EdgeStringDictionary.</param>
      <returns>true if this EdgeStringDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.EdgeStringDictionary.Remove(QuickGraph.Concepts.IEdge)">
      <summary>Removes the element with the specified key from this EdgeStringDictionary.</summary>
      <param name="key">The Edge key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.FilteredEdgeEnumerable">
      <summary>Description résumée de FilteredEdgeCollection. This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.BaseCollection">
      <summary>Base collection</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.EdgePredicate">
      <summary>Edge predicate</summary>
    </member>
    <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.GetEnumerator">
      <summary>Returns the enumerator</summary>
    </member>
    <member name="T:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator">
      <summary>Filetred enumerator class This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.Current">
      <summary>Current edge</summary>
    </member>
    <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.MoveNext">
      <summary>Moves the cursor to the next in-edge.</summary>
      <returns>True if successful, false if the iteration ended.</returns>
    </member>
    <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.Reset">
      <summary>Positions the cursor before the first element.</summary>
    </member>
    <member name="T:QuickGraph.Collections.FilteredVertexEnumerable">
      <summary>Filtered vertex collectiohn This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.BaseEnumerable">
      <summary>Base collection</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.VertexPredicate">
      <summary>Predicate</summary>
    </member>
    <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.GetEnumerator">
      <summary>Returns a filtered enumerator</summary>
      <returns>enumerator</returns>
    </member>
    <member name="T:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator">
      <summary>Filtered enumerator This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.Current">
      <summary>Current Vertex</summary>
    </member>
    <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.MoveNext">
      <summary>Moves the cursor to the next Vertex.</summary>
      <returns>True if successful, false if the iteration ended.</returns>
    </member>
    <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.Reset">
      <summary>Positions the cursor before the first element.</summary>
    </member>
    <member name="T:QuickGraph.Collections.PriorithizedVertexBuffer">
      <summary>A Priorithized (with respect to distance) vertex buffer. This class cannot be inherited.</summary>
    </member>
    <member name="M:QuickGraph.Collections.PriorithizedVertexBuffer.Push(QuickGraph.Concepts.IVertex)">
      <summary>Push a new vertex on the buffer.</summary>
      <param name="v">new vertex</param>
    </member>
    <member name="M:QuickGraph.Collections.PriorithizedVertexBuffer.Update(QuickGraph.Concepts.IVertex)">
      <summary>Updates the buffer order</summary>
      <param name="v">modified vertex</param>
    </member>
    <member name="M:QuickGraph.Collections.ReversedEdge.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:QuickGraph.Collections.ReversedEdge.op_Equality(QuickGraph.Collections.ReversedEdge,QuickGraph.Collections.ReversedEdge)">
      <summary>Defines the == operator</summary>
      <param name="e1" />
      <param name="e2" />
    </member>
    <member name="M:QuickGraph.Collections.ReversedEdge.op_Inequality(QuickGraph.Collections.ReversedEdge,QuickGraph.Collections.ReversedEdge)">
      <param name="e1" />
      <param name="e2" />
    </member>
    <member name="T:QuickGraph.Collections.StringEdgeDictionary">
      <summary>A dictionary with keys of type String and values of type IEdge This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.StringEdgeDictionary.Item(System.String)">
      <summary>Gets or sets the IEdge associated with the given String</summary>
      <param name="key">The String whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.StringEdgeDictionary.Keys">
      <summary>Gets a collection containing the keys in this StringEdgeDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.StringEdgeDictionary.Values">
      <summary>Gets a collection containing the values in this StringEdgeDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.StringEdgeDictionary.Add(System.String,QuickGraph.Concepts.IEdge)">
      <summary>Adds an element with the specified key and value to this StringEdgeDictionary.</summary>
      <param name="key">The String key of the element to add.</param>
      <param name="value">The IEdge value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.StringEdgeDictionary.Contains(System.String)">
      <summary>Determines whether this StringEdgeDictionary contains a specific key.</summary>
      <param name="key">The String key to locate in this StringEdgeDictionary.</param>
      <returns>true if this StringEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringEdgeDictionary.ContainsKey(System.String)">
      <summary>Determines whether this StringEdgeDictionary contains a specific key.</summary>
      <param name="key">The String key to locate in this StringEdgeDictionary.</param>
      <returns>true if this StringEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this StringEdgeDictionary contains a specific value.</summary>
      <param name="value">The IEdge value to locate in this StringEdgeDictionary.</param>
      <returns>true if this StringEdgeDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringEdgeDictionary.Remove(System.String)">
      <summary>Removes the element with the specified key from this StringEdgeDictionary.</summary>
      <param name="key">The String key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.StringVertexDictionary">
      <summary>A dictionary with keys of type String and values of type IVertex This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.StringVertexDictionary.Item(System.String)">
      <summary>Gets or sets the IVertex associated with the given String</summary>
      <param name="key">The String whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.StringVertexDictionary.Keys">
      <summary>Gets a collection containing the keys in this StringVertexDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.StringVertexDictionary.Values">
      <summary>Gets a collection containing the values in this StringVertexDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.StringVertexDictionary.Add(System.String,QuickGraph.Concepts.IVertex)">
      <summary>Adds an element with the specified key and value to this StringVertexDictionary.</summary>
      <param name="key">The String key of the element to add.</param>
      <param name="value">The IVertex value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.StringVertexDictionary.Contains(System.String)">
      <summary>Determines whether this StringVertexDictionary contains a specific key.</summary>
      <param name="key">The String key to locate in this StringVertexDictionary.</param>
      <returns>true if this StringVertexDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringVertexDictionary.ContainsKey(System.String)">
      <summary>Determines whether this StringVertexDictionary contains a specific key.</summary>
      <param name="key">The String key to locate in this StringVertexDictionary.</param>
      <returns>true if this StringVertexDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringVertexDictionary.ContainsValue(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this StringVertexDictionary contains a specific value.</summary>
      <param name="value">The IVertex value to locate in this StringVertexDictionary.</param>
      <returns>true if this StringVertexDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.StringVertexDictionary.Remove(System.String)">
      <summary>Removes the element with the specified key from this StringVertexDictionary.</summary>
      <param name="key">The String key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexBuffer">
      <summary>A vertex buffer that acts like a stack.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexBuffer.Count">
      <summary>The number of vertices in the buffer</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexBuffer.GetEnumerator">
      <summary>Returns an enumerator over the buffer</summary>
      <returns>Buffer enumerator</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexBuffer.Peek">
      <summary>Returns the latest vertex in the buffer. Leaves it in the buffer.</summary>
      <returns>Latest vertex</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexBuffer.Pop">
      <summary>Removes the latest vertex.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexBuffer.Push(QuickGraph.Concepts.IVertex)">
      <summary>Pushes a new vertex at the end of the buffer:</summary>
      <param name="v">Vertex to push</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexBuffer.Sort(System.Collections.IComparer)">
      <summary>Sorts the buffer using the comparer</summary>
      <param name="comparer">Comparer used to sort the buffer</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexCollection">
      <summary>A collection of elements of type Vertex This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexCollection.Item(System.Int32)">
      <summary>Gets or sets the Vertex at the given index in this VertexCollection.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.Add(QuickGraph.Concepts.IVertex)">
      <summary>Adds an instance of type Vertex to the end of this VertexCollection.</summary>
      <param name="value">The Vertex to be added to the end of this VertexCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.AddRange(QuickGraph.Concepts.IVertex[])">
      <summary>Adds the elements of an array to the end of this VertexCollection.</summary>
      <param name="items">The array whose elements are to be added to the end of this VertexCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.AddRange(QuickGraph.Concepts.Collections.IVertexEnumerable)">
      <summary>Adds the elements of another <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable" /> to the end of this VertexCollection.</summary>
      <param name="items">The <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable" /> whose elements are to be added to the end of this VertexCollection.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether a specfic Vertex value is in this VertexCollection.</summary>
      <param name="value">The Vertex value to locate in this VertexCollection.</param>
      <returns>true if value is found in this VertexCollection; false otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this VertexCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.IndexOf(QuickGraph.Concepts.IVertex)">
      <summary>Return the zero-based index of the first occurrence of a specific value in this VertexCollection</summary>
      <param name="value">The Vertex value to locate in the VertexCollection.</param>
      <returns>The zero-based index of the first occurrence of the _ELEMENT value if found; -1 otherwise.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.Insert(System.Int32,QuickGraph.Concepts.IVertex)">
      <summary>Inserts an element into the VertexCollection at the specified index</summary>
      <param name="index">The index at which the Vertex is to be inserted.</param>
      <param name="value">The Vertex to insert.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexCollection.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the first occurrence of a specific Vertex from this VertexCollection.</summary>
      <param name="value">The Vertex value to remove from this VertexCollection.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexCollection.Enumerator">
      <summary>Type-specific enumeration class, used by VertexCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexCollection.Enumerator.Current">
      <summary>Current vertex</summary>
    </member>
    <member name="T:QuickGraph.Collections.VertexColorDictionary">
      <summary>A dictionary with keys of type Vertex and values of type GraphColor This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexColorDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the GraphColor associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexColorDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexColorDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexColorDictionary.Values">
      <summary>Gets a collection containing the values in this VertexColorDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexColorDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.GraphColor)">
      <summary>Adds an element with the specified key and value to this VertexColorDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The GraphColor value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexColorDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexColorDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexColorDictionary.</param>
      <returns>true if this VertexColorDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexColorDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexColorDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexColorDictionary.</param>
      <returns>true if this VertexColorDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexColorDictionary.ContainsValue(QuickGraph.Concepts.GraphColor)">
      <summary>Determines whether this VertexColorDictionary contains a specific value.</summary>
      <param name="value">The GraphColor value to locate in this VertexColorDictionary.</param>
      <returns>true if this VertexColorDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexColorDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexColorDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexDoubleDictionary">
      <summary>A dictionary with keys of type Vertex and values of type Double This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Double associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexDistanceDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Values">
      <summary>Gets a collection containing the values in this VertexDistanceDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Add(QuickGraph.Concepts.IVertex,System.Double)">
      <summary>Adds an element with the specified key and value to this VertexDistanceDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The Double value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexDistanceDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexDistanceDictionary.</param>
      <returns>true if this VertexDistanceDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoubleDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexDistanceDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexDistanceDictionary.</param>
      <returns>true if this VertexDistanceDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoubleDictionary.ContainsValue(System.Double)">
      <summary>Determines whether this VertexDistanceDictionary contains a specific value.</summary>
      <param name="value">The Double value to locate in this VertexDistanceDictionary.</param>
      <returns>true if this VertexDistanceDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexDistanceDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexDoublesDictionary">
      <summary>A dictionary with keys of type IVertex and values of type DoubleCollection</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the DoubleCollection associated with the given IVertex</summary>
      <param name="key">The IVertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexDoublesDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Values">
      <summary>Gets a collection containing the values in this VertexDoublesDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.DoubleCollection)">
      <summary>Adds an element with the specified key and value to this VertexDoublesDictionary.</summary>
      <param name="key">The IVertex key of the element to add.</param>
      <param name="value">The DoubleCollection value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexDoublesDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexDoublesDictionary.</param>
      <returns>true if this VertexDoublesDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoublesDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexDoublesDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexDoublesDictionary.</param>
      <returns>true if this VertexDoublesDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoublesDictionary.ContainsValue(QuickGraph.Collections.DoubleCollection)">
      <summary>Determines whether this VertexDoublesDictionary contains a specific value.</summary>
      <param name="value">The DoubleCollection value to locate in this VertexDoublesDictionary.</param>
      <returns>true if this VertexDoublesDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexDoublesDictionary.</summary>
      <param name="key">The IVertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexEdgeDictionary">
      <summary>A dictionary with keys of type Vertex and values of type Edge This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Edge associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexEdgeDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Values">
      <summary>Gets a collection containing the values in this VertexEdgeDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IEdge)">
      <summary>Adds an element with the specified key and value to this VertexEdgeDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The Edge value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexEdgeDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexEdgeDictionary.</param>
      <returns>true if this VertexEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgeDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexEdgeDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexEdgeDictionary.</param>
      <returns>true if this VertexEdgeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
      <summary>Determines whether this VertexEdgeDictionary contains a specific value.</summary>
      <param name="value">The Edge value to locate in this VertexEdgeDictionary.</param>
      <returns>true if this VertexEdgeDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexEdgeDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexEdgesDictionary">
      <summary>A dictionary with keys of type Vertex and values of type EdgeCollection This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the EdgeCollection associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexEdgesDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Values">
      <summary>Gets a collection containing the values in this VertexEdgesDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.EdgeCollection)">
      <summary>Adds an element with the specified key and value to this VertexEdgesDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The EdgeCollection value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexEdgesDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexEdgesDictionary.</param>
      <returns>true if this VertexEdgesDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexEdgesDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexEdgesDictionary.</param>
      <returns>true if this VertexEdgesDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesDictionary.ContainsValue(QuickGraph.Collections.EdgeCollection)">
      <summary>Determines whether this VertexEdgesDictionary contains a specific value.</summary>
      <param name="value">The EdgeCollection value to locate in this VertexEdgesDictionary.</param>
      <returns>true if this VertexEdgesDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexEdgesDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexEdgesEnumerable">
      <summary>A simple IEnumerable class that provides an enumerator over the graph edges. This class cannot be inherited.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesEnumerable.GetEnumerator">
      <summary>Provides an enumerator over the graph edges</summary>
      <returns>An enumerator</returns>
    </member>
    <member name="T:QuickGraph.Collections.VertexEdgesEnumerator">
      <summary>An adaptor class to enumerate edges. This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEdgesEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next edge; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.MoveNextVertex">
      <summary>Move the vertex iterator to the next vertex.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="T:QuickGraph.Collections.VertexEnumerable">
      <summary>A wrapper class for weak collection of IVertex This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerable">
      <summary>Wrapped enumerable</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexEnumerable.GetEnumerator">
      <summary>Return a strongly typed enumerator</summary>
      <returns>strongly typed enumerator</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexEnumerable.Wrap(System.Collections.IEnumerable)">
      <summary>Wraps up the weakly typed collection in a strongly typed (IVertex) collection.</summary>
      <param name="en">Collection to wrap</param>
      <returns>vertex enumerable collection</returns>
    </member>
    <member name="T:QuickGraph.Collections.VertexEnumerable.Enumerator">
      <summary>Strongly typed enumerator This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerator.Current">
      <summary>Current vertex</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerator.Wrapped">
      <summary>Wrapped enumerator</summary>
    </member>
    <member name="T:QuickGraph.Collections.VertexIntDictionary">
      <summary>A dictionary with keys of type Vertex and values of type int This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexIntDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the int associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexIntDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexIntDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexIntDictionary.Values">
      <summary>Gets a collection containing the values in this VertexIntDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexIntDictionary.Add(QuickGraph.Concepts.IVertex,System.Int32)">
      <summary>Adds an element with the specified key and value to this VertexIntDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The int value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexIntDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexIntDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexIntDictionary.</param>
      <returns>true if this VertexIntDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexIntDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexIntDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexIntDictionary.</param>
      <returns>true if this VertexIntDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexIntDictionary.ContainsValue(System.Int32)">
      <summary>Determines whether this VertexIntDictionary contains a specific value.</summary>
      <param name="value">The int value to locate in this VertexIntDictionary.</param>
      <returns>true if this VertexIntDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexIntDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexIntDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexObjectDictionary">
      <summary>A dictionary with keys of type Vertex and values of type Object This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexObjectDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Object associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexObjectDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexObjectDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexObjectDictionary.Values">
      <summary>Gets a collection containing the values in this VertexObjectDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexObjectDictionary.Add(QuickGraph.Concepts.IVertex,System.Object)">
      <summary>Adds an element with the specified key and value to this VertexObjectDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The Object value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexObjectDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexObjectDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexObjectDictionary.</param>
      <returns>true if this VertexObjectDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexObjectDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexObjectDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexObjectDictionary.</param>
      <returns>true if this VertexObjectDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexObjectDictionary.ContainsValue(System.Object)">
      <summary>Determines whether this VertexObjectDictionary contains a specific value.</summary>
      <param name="value">The Object value to locate in this VertexObjectDictionary.</param>
      <returns>true if this VertexObjectDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexObjectDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexObjectDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexPairDoubleDictionary">
      <summary>A dictionary with keys of type VertexPair and values of type double This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Item(QuickGraph.Collections.VertexPair)">
      <summary>Gets or sets the double associated with the given VertexPair</summary>
      <param name="key">The VertexPair whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Item(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Returns</summary>
      <param name="u" />
      <param name="v" />
    </member>
    <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexPairDoubleDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Values">
      <summary>Gets a collection containing the values in this VertexPairDoubleDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Add(QuickGraph.Collections.VertexPair,System.Double)">
      <summary>Adds an element with the specified key and value to this VertexPairDoubleDictionary.</summary>
      <param name="key">The VertexPair key of the element to add.</param>
      <param name="value">The double value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Contains(QuickGraph.Collections.VertexPair)">
      <summary>Determines whether this VertexPairDoubleDictionary contains a specific key.</summary>
      <param name="key">The VertexPair key to locate in this VertexPairDoubleDictionary.</param>
      <returns>true if this VertexPairDoubleDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.ContainsKey(QuickGraph.Collections.VertexPair)">
      <summary>Determines whether this VertexPairDoubleDictionary contains a specific key.</summary>
      <param name="key">The VertexPair key to locate in this VertexPairDoubleDictionary.</param>
      <returns>true if this VertexPairDoubleDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.ContainsValue(System.Double)">
      <summary>Determines whether this VertexPairDoubleDictionary contains a specific value.</summary>
      <param name="value">The double value to locate in this VertexPairDoubleDictionary.</param>
      <returns>true if this VertexPairDoubleDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Distance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Remove(QuickGraph.Collections.VertexPair)">
      <summary>Removes the element with the specified key from this VertexPairDoubleDictionary.</summary>
      <param name="key">The VertexPair key of the element to remove.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.SetDistance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,System.Double)">
      <param name="u" />
      <param name="v" />
      <param name="d" />
    </member>
    <member name="T:QuickGraph.Collections.VertexPointFDictionary">
      <summary>A dictionary with keys of type IVertex and values of type PointF This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexPointFDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the PointF associated with the given IVertex</summary>
      <param name="key">The IVertex whose value to get or set.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexPointFDictionary.Add(QuickGraph.Concepts.IVertex,System.Drawing.PointF)">
      <summary>Adds an element with the specified key and value to this VertexPointFDictionary.</summary>
      <param name="key">The IVertex key of the element to add.</param>
      <param name="value">The PointF value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexPointFDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexPointFDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexPointFDictionary.</param>
      <returns>true if this VertexPointFDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPointFDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexPointFDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexPointFDictionary.</param>
      <returns>true if this VertexPointFDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPointFDictionary.ContainsValue(System.Drawing.PointF)">
      <summary>Determines whether this VertexPointFDictionary contains a specific value.</summary>
      <param name="value">The PointF value to locate in this VertexPointFDictionary.</param>
      <returns>true if this VertexPointFDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexPointFDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexPointFDictionary.</summary>
      <param name="key">The IVertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexSizeFDictionary">
      <summary>A dictionary with keys of type IVertex and values of type Size This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Size associated with the given IVertex</summary>
      <param name="key">The IVertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexSizeDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Values">
      <summary>Gets a collection containing the values in this VertexSizeDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Add(QuickGraph.Concepts.IVertex,System.Drawing.SizeF)">
      <summary>Adds an element with the specified key and value to this VertexSizeDictionary.</summary>
      <param name="key">The IVertex key of the element to add.</param>
      <param name="value">The Size value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexSizeDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexSizeDictionary.</param>
      <returns>true if this VertexSizeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexSizeFDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexSizeDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexSizeDictionary.</param>
      <returns>true if this VertexSizeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexSizeFDictionary.ContainsValue(System.Drawing.SizeF)">
      <summary>Determines whether this VertexSizeDictionary contains a specific value.</summary>
      <param name="value">The Size value to locate in this VertexSizeDictionary.</param>
      <returns>true if this VertexSizeDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexSizeDictionary.</summary>
      <param name="key">The IVertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexStringDictionary">
      <summary>A dictionary with keys of type Vertex and values of type String This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexStringDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the String associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexStringDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexStringDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexStringDictionary.Values">
      <summary>Gets a collection containing the values in this VertexStringDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexStringDictionary.Add(QuickGraph.Concepts.IVertex,System.String)">
      <summary>Adds an element with the specified key and value to this VertexStringDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The String value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexStringDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexStringDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexStringDictionary.</param>
      <returns>true if this VertexStringDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexStringDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexStringDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexStringDictionary.</param>
      <returns>true if this VertexStringDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexStringDictionary.ContainsValue(System.String)">
      <summary>Determines whether this VertexStringDictionary contains a specific value.</summary>
      <param name="value">The String value to locate in this VertexStringDictionary.</param>
      <returns>true if this VertexStringDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexStringDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexStringDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexVector2DDictionary">
      <summary>A dictionary with keys of type IVertex and values of type Vector2D This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Vector2D associated with the given IVertex</summary>
      <param name="key">The IVertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexVector2DDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Values">
      <summary>Gets a collection containing the values in this VertexVector2DDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.Vector2D)">
      <summary>Adds an element with the specified key and value to this VertexVector2DDictionary.</summary>
      <param name="key">The IVertex key of the element to add.</param>
      <param name="value">The Vector2D value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexVector2DDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexVector2DDictionary.</param>
      <returns>true if this VertexVector2DDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVector2DDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexVector2DDictionary contains a specific key.</summary>
      <param name="key">The IVertex key to locate in this VertexVector2DDictionary.</param>
      <returns>true if this VertexVector2DDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVector2DDictionary.ContainsValue(QuickGraph.Collections.Vector2D)">
      <summary>Determines whether this VertexVector2DDictionary contains a specific value.</summary>
      <param name="value">The Vector2D value to locate in this VertexVector2DDictionary.</param>
      <returns>true if this VertexVector2DDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexVector2DDictionary.</summary>
      <param name="key">The IVertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexVertexDictionary">
      <summary>A dictionary with keys of type Vertex and values of type Vertex This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexVertexDictionary.Item(QuickGraph.Concepts.IVertex)">
      <summary>Gets or sets the Vertex associated with the given Vertex</summary>
      <param name="key">The Vertex whose value to get or set.</param>
    </member>
    <member name="P:QuickGraph.Collections.VertexVertexDictionary.Keys">
      <summary>Gets a collection containing the keys in this VertexVertexDictionary.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexVertexDictionary.Values">
      <summary>Gets a collection containing the values in this VertexVertexDictionary.</summary>
    </member>
    <member name="M:QuickGraph.Collections.VertexVertexDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Adds an element with the specified key and value to this VertexVertexDictionary.</summary>
      <param name="key">The Vertex key of the element to add.</param>
      <param name="value">The Vertex value of the element to add.</param>
    </member>
    <member name="M:QuickGraph.Collections.VertexVertexDictionary.Contains(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexVertexDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexVertexDictionary.</param>
      <returns>true if this VertexVertexDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVertexDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexVertexDictionary contains a specific key.</summary>
      <param name="key">The Vertex key to locate in this VertexVertexDictionary.</param>
      <returns>true if this VertexVertexDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVertexDictionary.ContainsValue(QuickGraph.Concepts.IVertex)">
      <summary>Determines whether this VertexVertexDictionary contains a specific value.</summary>
      <param name="value">The Vertex value to locate in this VertexVertexDictionary.</param>
      <returns>true if this VertexVertexDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:QuickGraph.Collections.VertexVertexDictionary.Remove(QuickGraph.Concepts.IVertex)">
      <summary>Removes the element with the specified key from this VertexVertexDictionary.</summary>
      <param name="key">The Vertex key of the element to remove.</param>
    </member>
    <member name="T:QuickGraph.Collections.VertexPair">
      <summary>A class containing a pair of <see cref="T:QuickGraph.Concepts.IVertex" />.</summary>
    </member>
    <member name="P:QuickGraph.Collections.VertexPair.First">
      <summary>Gets or sets the first <see cref="T:QuickGraph.Concepts.IVertex" /> instance</summary>
      <value>First <see cref="T:QuickGraph.Concepts.IVertex" /> instance.</value>
      <exception cref="T:System.ArgumentNullException"> set property, value is a null reference </exception>
    </member>
    <member name="P:QuickGraph.Collections.VertexPair.Second">
      <summary>Gets or sets the second <see cref="T:QuickGraph.Concepts.IVertex" /> instance</summary>
      <value>Second <see cref="T:QuickGraph.Concepts.IVertex" /> instance.</value>
      <exception cref="T:System.ArgumentNullException"> set property, value is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Collections.VertexPair.CompareTo(System.Object)">
      <param name="obj" />
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph">
      <summary>A filtered adjacency graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.AdjacencyGraph">
      <summary>Filtered adjacency graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.VertexPredicate">
      <summary>Vertex predicate used to filter the vertices</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
      <summary>Returns a filtered enumerable collection of adjacent vertices</summary>
      <param name="v" />
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph">
      <summary>A filtered bidirectional graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.BidirectionalGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.AdjacentEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of edges connected to v is empty</summary>
      <returns>true if the adjacent edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)">
      <summary>Vertex filtered degre</summary>
      <param name="v">v to compute degree of</param>
      <returns>filtered degree</returns>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the number of out-degree edges of v</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InEdges(QuickGraph.Concepts.IVertex)">
      <summary>Returns an iterable collection of the out edges of v</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of in-edges is empty</summary>
      <returns>true if the in-edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph">
      <summary>A filtered IEdgeListAndIncidenceGraph.</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.EdgeListAndIncidenceGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.FilteredIncidenceGraph">
      <summary>Wrapped filtered edge list</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
      <summary>Gets an enumerable collection of the v adjacent vertices</summary>
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if there is an edge between the vertices <paramref name="u" />, <paramref name="v" />.</summary>
      <param name="u">source vertex</param>
      <param name="v">target vertex</param>
      <returns>true if (<paramref name="u" />, <paramref name="v" />) exists.</returns>
      <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the number of out-degree edges of v</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutEdges(QuickGraph.Concepts.IVertex)">
      <summary>Returns an iterable collection of the out edges of v</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of out-edges is empty</summary>
      <returns>true if the out-edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredEdgeListGraph">
      <summary>A filtered edge list graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgeListGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.Edges">
      <summary>Returns an iterable collection of filtered edges</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgesCount">
      <summary>Returns the number of filtered edges in the graph</summary>
      <value>number of edges</value>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgesEmpty">
      <summary>Gets a value indicating if the vertex set is empty</summary>
      <value>true if the vertex set is empty, false otherwise.</value>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
      <summary>Gets a value indicating if the edge <paramref name="e" /> is part of the list.</summary>
      <param name="e">edge to test</param>
      <returns>true if part of the list, false otherwize</returns>
      <exception cref="T:System.ArgumentNullException">e is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredGraph">
      <summary>Base class for filtered graphs</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.AllowParallelEdges">
      <summary>True if underlying graph allows parallel edges</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.EdgePredicate">
      <summary>Edge predicate used to filter the edges</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.Graph">
      <summary>Underlying filtered graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.IsDirected">
      <summary>True if underlying graph in directed</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.VertexPredicate">
      <summary>Vertex predicate used to filter the vertices</summary>
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredIncidenceGraph">
      <summary>A filtered incidence graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.IncidenceGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
      <summary>Gets an enumerable collection of the v adjacent vertices</summary>
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if there is an edge between the vertices <paramref name="u" />, <paramref name="v" />.</summary>
      <param name="u">source vertex</param>
      <param name="v">target vertex</param>
      <returns>true if (<paramref name="u" />, <paramref name="v" />) exists.</returns>
      <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the number of out-degree edges of v</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutEdges(QuickGraph.Concepts.IVertex)">
      <summary>Returns an iterable collection of the out edges of v</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of out-edges is empty</summary>
      <returns>true if the out-edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph">
      <summary>A filtered edge list graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.Edges">
      <summary>Returns an iterable collection of filtered edges</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.EdgesCount">
      <summary>Returns the number of filtered edges in the graph</summary>
      <value>number of edges</value>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.EdgesEmpty">
      <summary>Gets a value indicating if the vertex set is empty</summary>
      <value>true if the vertex set is empty, false otherwise.</value>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.FilteredEdgeList">
      <summary>Wrapped filtered edge list</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.VertexAndEdgeListGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
      <param name="e" />
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VertexListGraph">
      <summary>Underlying incidence graph</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.Vertices">
      <summary>Filtered enumerable collection of vertices</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VerticesCount">
      <summary>Gets the filtered vertices count</summary>
    </member>
    <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VerticesEmpty">
      <summary>Gets a value indicating if the vertex set is empty</summary>
      <value>true if the vertex set is empty, false otherwise.</value>
    </member>
    <member name="M:QuickGraph.Collections.Filtered.FilteredVertexListGraph.ContainsVertex(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the vertex <paramref name="v" /> is part of the list.</summary>
      <param name="u">vertex to test</param>
      <returns>true if part of the list, false otherwize</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Collections.Sort.ComparableComparer">
      <summary>Default <see cref="T:System.IComparable" /> object comparer.</summary>
    </member>
    <member name="M:QuickGraph.Collections.Sort.ComparableComparer.Compare(System.IComparable,System.Object)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="T:QuickGraph.Collections.Sort.DefaultSwap">
      <summary>Default swap class</summary>
    </member>
    <member name="M:QuickGraph.Collections.Sort.DefaultSwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
      <summary>Default swap operation</summary>
      <param name="array" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:QuickGraph.Collections.Sort.QuickSorter">
      <summary>http://www.codeproject.com/csharp/csquicksort.asp</summary>
    </member>
    <member name="M:QuickGraph.Collections.Sort.QuickSorter.Sort(System.Collections.IList)">
      <summary>Sorts the array.</summary>
      <param name="array">The array to sort.</param>
    </member>
    <member name="M:QuickGraph.Collections.Sort.QuickSorter.Sort(System.Collections.IList,System.Int32,System.Int32)">
      <param name="array" />
      <param name="lower" />
      <param name="upper" />
    </member>
    <member name="T:QuickGraph.Collections.Sort.SwapSorter">
      <summary>Abstract base class for Swap sort algorithms. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:QuickGraph.Collections.Sort.SwapSorter.Comparer">
      <summary>Gets or sets the <see cref="T:System.Collections.IComparer" /> object</summary>
      <value>Comparer object</value>
      <exception cref="T:System.ArgumentNullException"> Set property, the value is a null reference </exception>
    </member>
    <member name="P:QuickGraph.Collections.Sort.SwapSorter.Swapper">
      <summary>Gets or set the swapper object</summary>
      <value>The <see cref="T:QuickGraph.Collections.Sort.ISwap" /> swapper.</value>
      <exception cref="T:System.ArgumentNullException">Swapper is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Collections.Sort.SwapSorter.Sort(System.Collections.IList)">
      <param name="list" />
    </member>
    <member name="M:QuickGraph.Collections.Sort.ISorter.Sort(System.Collections.IList)">
      <summary>Sorts the <paramref name="list" />.</summary>
      <param name="list" />
    </member>
    <member name="T:QuickGraph.Collections.Sort.ISwap">
      <summary>Object swapper interface</summary>
    </member>
    <member name="M:QuickGraph.Collections.Sort.ISwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
      <summary>Swaps left and right in the list</summary>
      <param name="array" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:QuickGraph.Concepts.EdgeEdgeEventArgs">
      <summary>Event argument that contains two <seealso cref="T:QuickGraph.Concepts.IEdge" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.EdgeEdgeEventArgs.TargetEdge">
      <summary>Edge passed to the event</summary>
    </member>
    <member name="T:QuickGraph.Concepts.EdgeEventArgs">
      <summary>Event argument that contains an <seealso cref="T:QuickGraph.Concepts.IEdge" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.EdgeEventArgs.Edge">
      <summary>Edge passed to the event</summary>
    </member>
    <member name="T:QuickGraph.Concepts.GraphColorConverter">
      <summary>Utility class for graph color conversion This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.GraphColorConverter.Convert(QuickGraph.Concepts.GraphColor,System.Int32)">
      <summary>Converts GraphColor to System.Drawing.Color</summary>
      <param name="c">graph color to convert</param>
      <param name="alpha">alpha component</param>
      <returns>corresponding Color</returns>
    </member>
    <member name="M:QuickGraph.Concepts.GraphColorConverter.Convert(QuickGraph.Concepts.GraphColor)">
      <summary>Converts GraphColor to System.Drawing.Color</summary>
      <param name="c">graph color to convert</param>
      <returns>corresponding Color</returns>
    </member>
    <member name="T:QuickGraph.Concepts.VertexEventArgs">
      <summary>Event argument that contains a <seealso cref="P:QuickGraph.Concepts.VertexEventArgs.Vertex" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.VertexEventArgs.Vertex">
      <summary>Vertex passed to the event</summary>
    </member>
    <member name="T:QuickGraph.Concepts.IEdge">
      <summary>Edge interface</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IEdge.ID">
      <summary>Edge identification number</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IEdge.Source">
      <summary>Source vertex</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IEdge.Target">
      <summary>Target vertex</summary>
    </member>
    <member name="T:QuickGraph.Concepts.IGraph">
      <summary>The Graph concept contains a few requirements that are common to all the graph concepts.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IGraph.AllowParallelEdges">
      <summary>Parallel edge handling</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IGraph.IsDirected">
      <summary>Directed or undirected graph</summary>
      <value>True if directed graph</value>
    </member>
    <member name="T:QuickGraph.Concepts.IPort">
      <summary>A port represents an anchor between an edge and a vertex</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPort.ID">
      <summary>Port identification number</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPort.Parent">
      <summary>Gets or sets the parent vertex</summary>
      <value>The parent <see cref="T:QuickGraph.Concepts.IVertex" /> instance</value>
    </member>
    <member name="P:QuickGraph.Concepts.IPort.name">
      <summary>The name of the port</summary>
    </member>
    <member name="T:QuickGraph.Concepts.IPortEdge">
      <summary>An edge with ports attachement</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPortEdge.Source">
      <summary>Source vertex</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPortEdge.SourcePort">
      <summary>Source port</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPortEdge.Target">
      <summary>Target vertex</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPortEdge.TargetPort">
      <summary>Target port</summary>
    </member>
    <member name="T:QuickGraph.Concepts.IPortVertex">
      <summary>A <see cref="T:QuickGraph.Concepts.IVertex" /> with <see cref="T:QuickGraph.Concepts.IPort" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IPortVertex.Ports">
      <summary>Gets a collection of <see cref="T:QuickGraph.Concepts.IPort" /> associated to the vertex</summary>
      <value>A <see cref="T:QuickGraph.Concepts.Collections.IPortCollection" /> of <see cref="T:QuickGraph.Concepts.IPort" /> instance attached to the vertex</value>
    </member>
    <member name="T:QuickGraph.Concepts.IVertex">
      <summary>Vertex interface</summary>
    </member>
    <member name="P:QuickGraph.Concepts.IVertex.ID">
      <summary>Vertex unique identification number</summary>
    </member>
    <member name="T:QuickGraph.Concepts.EdgePort">
      <summary>Edge port enumeration</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.Undefined">
      <summary>Unknown port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.LowerLeft">
      <summary>Lower left port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.LowerRight">
      <summary>Lower right port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.UpperLeft">
      <summary>Upper left port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.UpperRight">
      <summary>Upper right port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.MiddleLeft">
      <summary>Middle left port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.MiddleRight">
      <summary>Middle right port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.MiddleTop">
      <summary>Middle top port</summary>
    </member>
    <member name="F:QuickGraph.Concepts.EdgePort.MiddleBottom">
      <summary>Middle bottom port</summary>
    </member>
    <member name="T:QuickGraph.Concepts.GraphColor">
      <summary>Colors used to mark the vertex and edges in the algorithms</summary>
    </member>
    <member name="F:QuickGraph.Concepts.GraphColor.White">
      <summary>White color, usually describes describes vertex.</summary>
    </member>
    <member name="F:QuickGraph.Concepts.GraphColor.Black">
      <summary>Black color, usually describes finished vertex.</summary>
    </member>
    <member name="F:QuickGraph.Concepts.GraphColor.Gray">
      <summary>Gray color</summary>
    </member>
    <member name="T:QuickGraph.Concepts.EdgeEdgeEventHandler">
      <summary>Delegate that handles an edge that sends a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.EdgeEventHandler">
      <summary>Delegate that handles an edge that sends a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.VertexEventHandler">
      <summary>Delegate that handles an event that sends a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IAlgorithm">
      <summary>IAlgorithm interface.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Algorithms.IAlgorithm.VisitedGraph">
      <summary>Visited graph object</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IDistanceRecorderAlgorithm">
      <summary>Defines an algorithm that supports vertex distance recording.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.IDistanceRecorderAlgorithm.RegisterDistanceRecorderHandlers(QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor)">
      <summary>Add event handlers to the corresponding events.</summary>
      <param name="vis">Distance recorder visitor</param>
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm">
      <summary>Edge colorzing algorithm</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm.EdgeColors">
      <summary>Edge color map</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm.RegisterEdgeColorizerHandlers(QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor)">
      <param name="vis" />
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IEdgePredecessorRecorderAlgorithm">
      <summary>Defines an algorithm that support edge predecessor recording.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.IEdgePredecessorRecorderAlgorithm.RegisterEdgePredecessorRecorderHandlers(QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor)">
      <summary>Register the predecessor handlers</summary>
      <param name="vis">visitor</param>
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IPredecessorRecorderAlgorithm">
      <summary>Defines an algorithm that support predecessor recording.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.IPredecessorRecorderAlgorithm.RegisterPredecessorRecorderHandlers(QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor)">
      <summary>Register the predecessor handlers</summary>
      <param name="vis">visitor</param>
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.ITimeStamperAlgorithm">
      <summary>Defines an algorithm that supports time stamping.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.ITimeStamperAlgorithm.RegisterTimeStamperHandlers(QuickGraph.Concepts.Visitors.ITimeStamperVisitor)">
      <param name="vis" />
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.ITreeEdgeBuilderAlgorithm">
      <summary>An algorithm that implement TreeEdge event.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.ITreeEdgeBuilderAlgorithm.RegisterTreeEdgeBuilderHandlers(QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor)">
      <param name="vis" />
    </member>
    <member name="T:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm">
      <summary>Description résumée de IVertexColorizerAlgorithm.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm.Colors">
      <summary>Vertex color map</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm.RegisterVertexColorizerHandlers(QuickGraph.Concepts.Visitors.IVertexColorizerVisitor)">
      <param name="vis" />
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IEdgeCollection">
      <summary>An edge enumerable collection</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IEdgeEnumerable">
      <summary>Edge enumerable collection</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IEdgeEnumerator">
      <summary>An edge enumerator</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Collections.IEdgeEnumerator.Current">
      <summary>Current edge</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IPortCollection">
      <summary>A collection of <see cref="T:QuickGraph.Concepts.IPort" /> instance</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IPortEnumerable">
      <summary>
        <see cref="T:QuickGraph.Concepts.IVertex" /> enumerable collection</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Collections.IPortEnumerable.GetEnumerator">
      <summary>Gets an <see cref="T:QuickGraph.Concepts.Collections.IPortEnumerator" /> instance</summary>
      <returns>A <see cref="T:QuickGraph.Concepts.Collections.IPortEnumerator" /> instance.</returns>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IPortEnumerator">
      <summary>An <see cref="T:QuickGraph.Concepts.IPort" /> enumerator</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Collections.IPortEnumerator.Current">
      <summary>Current <see cref="T:QuickGraph.Concepts.IPort" /></summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IVertexCollection">
      <summary>A vertex enumerable collection</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Collections.IVertexDistanceMatrix.Distance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <param name="source" />
      <param name="target" />
    </member>
    <member name="M:QuickGraph.Concepts.Collections.IVertexDistanceMatrix.SetDistance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,System.Double)">
      <param name="source" />
      <param name="target" />
      <param name="distance" />
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IVertexEnumerable">
      <summary>Edge enumerable collection</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Collections.IVertexEnumerator">
      <summary>An edge enumerator</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Collections.IVertexEnumerator.Current">
      <summary>Current edge</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Collections.IVertexPredecessorMatrix.Predecessor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <param name="source" />
      <param name="target" />
    </member>
    <member name="M:QuickGraph.Concepts.Collections.IVertexPredecessorMatrix.SetPredecessor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <param name="source" />
      <param name="target" />
      <param name="predecessor" />
    </member>
    <member name="T:QuickGraph.Concepts.Modifications.RandomGraph">
      <summary>Description résumée de RandomGraph. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Edge(QuickGraph.Concepts.Traversals.IEdgeListGraph,System.Random)">
      <summary>Picks an edge randomly in the edge list</summary>
      <param name="g">edge list</param>
      <param name="rnd">random generator</param>
      <returns>randomaly chosen edge</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Edge(QuickGraph.Concepts.Collections.IEdgeEnumerable,System.Int32,System.Random)">
      <param name="edges" />
      <param name="count" />
      <param name="rnd" />
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Graph(QuickGraph.Concepts.Modifications.IEdgeMutableGraph,System.Int32,System.Int32,System.Random,System.Boolean)">
      <summary>Generates a random graph</summary>
      <param name="g">Graph to fill</param>
      <param name="vertexCount">number of vertices</param>
      <param name="edgeCount">number of edges</param>
      <param name="rnd">random generator</param>
      <param name="selfEdges">self edges allowed</param>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Vertex(QuickGraph.Concepts.Traversals.IVertexListGraph,System.Random)">
      <summary>Picks a vertex randomly in the vertex list</summary>
      <param name="g">vertex list</param>
      <param name="rnd">random generator</param>
      <returns>randomaly chosen vertex</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Vertex(QuickGraph.Concepts.Collections.IVertexEnumerable,System.Int32,System.Random)">
      <param name="vertices" />
      <param name="count" />
      <param name="rnd" />
    </member>
    <member name="P:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.EdgeProvider">
      <summary>Returns the vertex provider</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.AddEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Inserts the edge (u,v) into the graph, and returns the new edge.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.ClearVertex(QuickGraph.Concepts.IVertex)">
      <summary>Remove all edges to and from vertex u from the graph.</summary>
      <param name="u" />
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.RemoveEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Remove the edge (u,v) from the graph. If the graph allows parallel edges this remove all occurrences of (u,v).</summary>
      <param name="u">source vertex</param>
      <param name="v">target vertex</param>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.RemoveEdge(QuickGraph.Concepts.IEdge)">
      <summary>Removes the edge e</summary>
      <param name="e">edge to remove</param>
      <exception cref="T:System.ArgumentException">Edge not found</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Modifications.IMutableBidirectionalGraph">
      <summary>Description résumée de IMutableBidirectionalGraph.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableBidirectionalGraph.RemoveInEdgeIf(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Remove all the in-edges of vertex u for which the predicate pred returns true.</summary>
      <param name="u">vertex</param>
      <param name="pred">edge predicate</param>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableEdgeListGraph.RemoveEdgeIf(QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Remove all the edges from graph g for which the predicate pred returns true.</summary>
      <param name="pred">edge predicate</param>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableGraph.Clear">
      <summary>Clears the graph.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableIncidenceGraph.RemoveOutEdgeIf(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Remove all the out-edges of vertex u for which the predicate pred returns true.</summary>
      <param name="u">vertex</param>
      <param name="pred">edge predicate</param>
    </member>
    <member name="T:QuickGraph.Concepts.Modifications.IMutableTreeGraph">
      <summary>A mutable tree-like graph</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Modifications.IMutableTreeGraph.AllowCycles">
      <summary>Gets a value indicating if the tree allows cycles</summary>
      <value>true if it allows cycle, false otherwise</value>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableTreeGraph.AddChild(QuickGraph.Concepts.IVertex)">
      <summary>Adds a child vertex to the tree</summary>
      <param name="parent">parent vertex</param>
      <returns>created vertex</returns>
      <exception cref="T:System.ArgumentNullException">parent is a null reference</exception>
      <exception cref="T:QuickGraph.Exceptions.NonAcyclicGraphException"> if <c>AllowCycles</c> is false and the edge creates a cycle </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IMutableTreeGraph.RemoveTree(QuickGraph.Concepts.IVertex)">
      <summary>Removes vertex and sub-tree</summary>
      <param name="root">vertex to remove</param>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
      <exception cref="T:QuickGraph.Exceptions.GraphNotStronglyConnectedException"> Removing the vertex breaks the graph connectivity </exception>
    </member>
    <member name="T:QuickGraph.Concepts.Modifications.IVertexAndEdgeMutableGraph">
      <summary>Fusion of <see cref="T:QuickGraph.Concepts.Modifications.IEdgeMutableGraph" /> and <see cref="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph" />.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph">
      <summary>Defines a graph that can be modified by adding or removing vertices.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Modifications.IVertexMutableGraph.VertexProvider">
      <summary>Returns the vertex provider</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IVertexMutableGraph.AddVertex">
      <summary>Adds a new vertex to the graph.</summary>
      <returns>new <see cref="T:QuickGraph.Concepts.IVertex" /> instance</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Modifications.IVertexMutableGraph.RemoveVertex(QuickGraph.Concepts.IVertex)">
      <summary>Remove u from the vertex set of the graph. Note that undefined behavior may result if there are edges remaining in the graph who's target is u. Typically the ClearVertex function should be called first.</summary>
      <param name="u">vertex to clear</param>
      <exception cref="T:System.ArgumentNullException">u is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.MutableTraversals.IMutableBidirectionalVertexAndEdgeListGraph">
      <summary>A fusion of <see cref="!:IBidirectionalGraph" />,</summary>
    </member>
    <member name="T:QuickGraph.Concepts.MutableTraversals.IMutableVertexAndEdgeListGraph">
      <summary>Union of <see cref="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph" />, <see cref="T:QuickGraph.Concepts.MutableTraversals.IMutableVertexAndEdgeListGraph" /></summary>
    </member>
    <member name="T:QuickGraph.Concepts.Petri.IArc">
      <summary>A directed edge of a net which may connect a <see cref="T:QuickGraph.Concepts.Petri.IPlace" /> to a <see cref="T:QuickGraph.Concepts.Petri.ITransition" /> or a <see cref="T:QuickGraph.Concepts.Petri.ITransition" nolink="true" /> to a <see cref="T:QuickGraph.Concepts.Petri.IPlace" nolink="true" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IArc.IsInputArc">
      <summary>Gets or sets a value indicating if the <see cref="T:QuickGraph.Concepts.Petri.IArc" /> instance is a <strong>input arc.</strong></summary>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IArc.Place">
      <summary>Gets or sets the <see cref="T:QuickGraph.Concepts.Petri.IPlace" /> instance attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc" />.</summary>
      <value>The <see cref="T:QuickGraph.Concepts.Petri.IPlace" /> attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc" />.</value>
      <exception cref="T:System.ArgumentNullException"> set property, value is a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IArc.Transition">
      <summary>Gets or sets the <see cref="T:QuickGraph.Concepts.Petri.ITransition" /> instance attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc" />.</summary>
      <value>The <see cref="T:QuickGraph.Concepts.Petri.ITransition" /> attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc" />.</value>
      <exception cref="T:System.ArgumentNullException"> set property, value is a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="T:QuickGraph.Concepts.Petri.IPetriNet">
      <summary>A High Level Petri Graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Arcs">
      <summary>Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.IArc" /> instances.</summary>
      <value>A collection of <see cref="T:QuickGraph.Concepts.Petri.IArc" /> instances.</value>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Places">
      <summary>Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.IPlace" /> instances.</summary>
      <value>A collection of <see cref="T:QuickGraph.Concepts.Petri.IPlace" /> instances.</value>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Transitions">
      <summary>Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.ITransition" /> instances.</summary>
      <value>A collection of <see cref="T:QuickGraph.Concepts.Petri.ITransition" /> instances.</value>
    </member>
    <member name="T:QuickGraph.Concepts.Petri.IPetriVertex">
      <summary>A vertex (node) of a Petri Graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.IPetriVertex.Name">
      <summary>Gets or sets the name of the node</summary>
      <value>A <see cref="T:System.String" /> representing the name of the node.</value>
    </member>
    <member name="T:QuickGraph.Concepts.Petri.IPlace">
      <summary>A Place in the HLPN framework</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Petri.ITransition">
      <summary>A node of a net, taken from the transition kind.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Petri.ITransition.Condition">
      <summary>A boolean expression associated with the transition</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Predicates.IEdgePredicate">
      <summary>A predicate applied to an edge</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Predicates.IEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Tests the predicate and returns the result</summary>
      <param name="e">edge to test</param>
      <returns>true if successful</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Predicates.IVertexPredicate">
      <summary>A predicate applied to a vertex</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Predicates.IVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Tests the predicate and returns the result</summary>
      <param name="v">Vertex to test</param>
      <returns>true if successful</returns>
      <exception cref="T:System.ArgumentNullException">v is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Providers.IEdgeProvider">
      <summary>A edge generator</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Providers.IEdgeProvider.EdgeType">
      <summary>The edge full type.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Providers.IEdgeProvider.ProvideEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Returns an edge e=(u,v)</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Providers.IEdgeProvider.UpdateEdge(QuickGraph.Concepts.IEdge)">
      <summary>Updates edge that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Concepts.Providers.IVertexProvider">
      <summary>A vertex generator object</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Providers.IVertexProvider.VertexType">
      <summary>The vertex full type.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Providers.IVertexProvider.ProvideVertex">
      <summary>Generates a new vertex</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Providers.IVertexProvider.UpdateVertex(QuickGraph.Concepts.IVertex)">
      <summary>Updates a vertex that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Concepts.Serialization.IGraphDeSerializable">
      <summary>Defines an instance that can be deserialized from a <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo" /> instance.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.IGraphDeSerializable.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is a null reference</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Serialization.IGraphSerializable">
      <summary>A serializable graph structure (graph, vertex or edge)</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializable.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds data to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo">
      <summary>A class for adding and retreiving atomic data.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.IsSerializing">
      <summary>Get a value indicating if the object is serializing</summary>
      <value>true if serializing, false if deserializing</value>
    </member>
    <member name="P:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Item(System.String)">
      <summary>Gets or sets a value from a key</summary>
      <param name="key">value identifier</param>
      <value>value associated with the key. If the key is not present in the data, null value is returned</value>
      <exception cref="T:System.ArgumentNullException"> get,set property, key is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Add(System.String,System.Object)">
      <summary>Adds a new key-value pair</summary>
      <param name="key">value identifier</param>
      <param name="value">value</param>
      <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Contains(System.String)">
      <summary>Gets a value indicating if the key is in the entry collection</summary>
      <param name="key">key to test</param>
      <returns>true if key is in the dictionary, false otherwise</returns>
      <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.ISerializableEdgeListGraph.AddEdge(QuickGraph.Concepts.IEdge)">
      <summary>Adds an edge to the graph</summary>
      <param name="e">edge to add</param>
    </member>
    <member name="T:QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph">
      <summary>Union of the <see cref="T:QuickGraph.Concepts.Traversals.IVertexListGraph" /> , <see cref="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph" /> and <see cref="T:QuickGraph.Concepts.Modifications.IEdgeMutableGraph" /> interfaces.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Serialization.ISerializableVertexListGraph.AddVertex(QuickGraph.Concepts.IVertex)">
      <summary>Add a vertex to the graph</summary>
      <param name="v">vertex to add</param>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.Traversal">
      <summary>A small helper class for traversals This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstEdge(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the first edge of the graph</summary>
      <param name="edges">graph</param>
      <returns>first edge if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstEdge(QuickGraph.Concepts.Traversals.IEdgeListGraph)">
      <summary>Returns the first edge of the graph</summary>
      <param name="g">graph</param>
      <returns>first edge if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstSourceVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the first source vertex of the enumerable</summary>
      <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge" /></param>
      <returns>first source vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstTargetVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the first vertex of the enumerable</summary>
      <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge" /></param>
      <returns>first target vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertex(QuickGraph.Concepts.Collections.IVertexEnumerable)">
      <summary>Returns the first vertex of the enumerable</summary>
      <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex" /></param>
      <returns>first vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertex(QuickGraph.Concepts.Traversals.IVertexListGraph)">
      <summary>Returns the first vertex of the graph</summary>
      <param name="g">graph</param>
      <returns>first vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertexIf(QuickGraph.Concepts.Collections.IVertexEnumerable,QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Returns the first vertex of the enumerable that matches the predicate.</summary>
      <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex" /></param>
      <param name="pred">vertex predicate</param>
      <returns>first vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastEdge(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the last edge of the edge collection</summary>
      <param name="edges">edge collection</param>
      <returns>last edge if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastEdge(QuickGraph.Concepts.Traversals.IEdgeListGraph)">
      <summary>Returns the last edge of the graph</summary>
      <param name="g">graph</param>
      <returns>last edge if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastSourceVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the last source vertex of the enumerable</summary>
      <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge" /></param>
      <returns>last source vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastTargetVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
      <summary>Returns the last vertex of the enumerable</summary>
      <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge" /></param>
      <returns>last target vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastVertex(QuickGraph.Concepts.Collections.IVertexEnumerable)">
      <summary>Returns the first vertex of the enumerable</summary>
      <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex" /></param>
      <returns>first vertex if any, otherwise a null reference</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastVertex(QuickGraph.Concepts.Traversals.IVertexListGraph)">
      <summary>Returns the last vertex of the graph</summary>
      <param name="g">graph</param>
      <returns>last vertex if any, otherwise a null reference</returns>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IAdjacencyGraph">
      <summary>AdjacentGraph concept</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IAdjacencyGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
      <summary>Returns a enumerable collection of adjacent vertices</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IBidirectionalGraph">
      <summary>Adds access to in-edges.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.AdjacentEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of edges connected to v is empty</summary>
      <returns>true if the adjacent edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the number of in-edges plus out-edges (for directed graphs) or the number of incident edges (for undirected graphs) of vertex v in graph g.</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the number of in-edges (for directed graphs) or the number of incident edges (for undirected graphs) of vertex v in graph g.</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InEdges(QuickGraph.Concepts.IVertex)">
      <summary>Enumerable collection of in-edges</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of in-edges is empty</summary>
      <returns>true if the in-edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IBidirectionalVertexListGraph">
      <summary>A fusion of <see cref="T:QuickGraph.Concepts.Traversals.IBidirectionalGraph" /> and <see cref="T:QuickGraph.Concepts.Traversals.IVertexListGraph" />.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IClusteredGraph">
      <summary>A graph with clusters.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.Clusters">
      <summary>Gets an enumerable collection of <see cref="T:QuickGraph.Concepts.Traversals.IClusteredGraph" />.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.ClustersCount">
      <summary>Gets the number of clusters</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.Colapsed">
      <summary>Gets a value indicating wheter the cluster is collapsed</summary>
      <value>true if the cluster is colapsed; otherwize, false.</value>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IClusteredGraph.AddCluster">
      <summary>Adds a new cluster to the graph.</summary>
      <returns>Added cluster</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IClusteredGraph.RemoveCluster(QuickGraph.Concepts.Traversals.IClusteredGraph)">
      <summary>Removes a cluster from the graph</summary>
      <param name="g">cluster to remove</param>
      <exception cref="T:System.ArgumentNullException">g is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IEdgeListAndIncidenceGraph">
      <summary>Defines the union of EdgeListGraph and IncidenceListGraph.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IEdgeListGraph">
      <summary>The EdgeListGraph concept refines the Graph concept, and adds the requirement for efficient access to all the edges in the graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.Edges">
      <summary>Returns an enumerator providing access to all the edges in the graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.EdgesCount">
      <summary>Returns the number of edges in the graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.EdgesEmpty">
      <summary>Gets a value indicating if the vertex set is empty</summary>
      <value>true if the vertex set is empty, false otherwise.</value>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
      <summary>Gets a value indicating if the edge <paramref name="e" /> is part of the list.</summary>
      <param name="e">edge to test</param>
      <returns>true if part of the list, false otherwize</returns>
      <exception cref="T:System.ArgumentNullException">e is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph">
      <summary>A bidirectional graph that supports filtered traversals</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph.SelectInEdges(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the collection of in-edges that matches the predicate</summary>
      <param name="v" />
      <param name="ep">Edge predicate</param>
      <returns>enumerable colleciton of vertices that matches the criteron</returns>
      <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph.SelectSingleInEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the first in-edge that matches the predicate</summary>
      <param name="v" />
      <param name="ep">Edge predicate</param>
      <returns>null if not found, otherwize the first Edge that matches the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph">
      <summary>A edge list graph that supports filtered traversals</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph.SelectEdges(QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the collection of edges that matches the predicate</summary>
      <param name="vp">Edge predicate</param>
      <returns>enumerable colleciton of vertices that matches the criteron</returns>
      <exception cref="T:System.ArgumentNullException">vp is null</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph.SelectSingleEdge(QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the first Edge that matches the predicate</summary>
      <param name="vp">Edge predicate</param>
      <returns>null if not found, otherwize the first Edge that matches the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">vp is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph">
      <summary>An incidence graph that supports filtered traversals</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph.SelectOutEdges(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the collection of out-edges that matches the predicate</summary>
      <param name="v" />
      <param name="ep">Edge predicate</param>
      <returns>enumerable colleciton of vertices that matches the criteron</returns>
      <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph.SelectSingleOutEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
      <summary>Returns the first out-edge that matches the predicate</summary>
      <param name="v" />
      <param name="ep">Edge predicate</param>
      <returns>null if not found, otherwize the first Edge that matches the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IFilteredVertexAndEdgeListGraph">
      <summary>Union of <see cref="T:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph" />, <see cref="T:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph" /> and <see cref="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph" />.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph">
      <summary>A vertex list graph that supports filtered traversals</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph.SelectSingleVertex(QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Returns the first vertex that matches the predicate</summary>
      <param name="vp">vertex predicate</param>
      <returns>null if not found, otherwize the first vertex that matches the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">vp is null</exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph.SelectVertices(QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Returns the collection of vertices that matches the predicate</summary>
      <param name="vp">vertex predicate</param>
      <returns>enumerable colleciton of vertices that matches the criteron</returns>
      <exception cref="T:System.ArgumentNullException">vp is null</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IImplicitGraph">
      <summary>A graph defined by a out-edges method.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutDegree(QuickGraph.Concepts.IVertex)">
      <summary>Returns the out-degree edges of v</summary>
      <param name="v">vertex to test</param>
      <returns>out-degree</returns>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutEdges(QuickGraph.Concepts.IVertex)">
      <summary>Returns an iterable collection of the out edges of v</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the set of out-edges is empty</summary>
      <returns>true if the out-edge set is empty, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IIncidenceGraph">
      <summary>Access to each vertex out-edges.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if there is an edge between the vertices <paramref name="u" />, <paramref name="v" />.</summary>
      <param name="u">source vertex</param>
      <param name="v">target vertex</param>
      <returns>true if (<paramref name="u" />, <paramref name="v" />) exists.</returns>
      <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.ITreeGraph">
      <summary>A tree-like interface definition</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.ChildVertices(QuickGraph.Concepts.IVertex)">
      <summary>Gets an enumerable collection of child <see cref="T:QuickGraph.Concepts.IVertex" /></summary>
      <param name="v">current <see cref="T:QuickGraph.Concepts.IVertex" /></param>
      <returns>An enumerable collection of adjacent vertices</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v" /> is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.FirstChild(QuickGraph.Concepts.IVertex)">
      <summary>Gets the first adjacent vertex</summary>
      <param name="v">current vertex</param>
      <returns>first out-vertex</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v" /> is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.HasChildVertices(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the <see cref="T:QuickGraph.Concepts.IVertex" /> has out-edges</summary>
      <param name="v">
        <see cref="T:QuickGraph.Concepts.IVertex" /> to test</param>
      <returns>true if <paramref name="v" /> has out-edges.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v" /> is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.LastChild(QuickGraph.Concepts.IVertex)">
      <param name="v" />
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v" /> is a null reference </exception>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.ParentVertex(QuickGraph.Concepts.IVertex)">
      <summary>Gets the <see cref="T:QuickGraph.Concepts.IVertex" /> parent.</summary>
      <param name="v">current vertex</param>
      <returns>parent vertex if any, null reference otherwize</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v" /> is a null reference </exception>
      <exception cref="T:QuickGraph.Exceptions.MultipleInEdgeException">
        <paramref name="v" /> has multiple in-edges </exception>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph">
      <summary>Defines the union of VertexListGraph and EdgeListGraph.</summary>
    </member>
    <member name="T:QuickGraph.Concepts.Traversals.IVertexListGraph">
      <summary>The VertexListGraph concept refines the Graph concept, and adds the requirement for efficient traversal of all the vertices in the graph.</summary>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.Vertices">
      <summary>Gets an iterator-range providing access to all the vertices in the graph.</summary>
      <value>
        <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable" /> collection over the <see cref="T:QuickGraph.Concepts.IVertex" /> instances of the graph.</value>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.VerticesCount">
      <summary>Gets the number of <see cref="T:QuickGraph.Concepts.IVertex" /> in the graph.</summary>
      <value>The number of <see cref="T:QuickGraph.Concepts.IVertex" /> in the graph</value>
    </member>
    <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.VerticesEmpty">
      <summary>Gets a value indicating if the vertex set is empty</summary>
      <value>true if the vertex set is empty, false otherwise.</value>
    </member>
    <member name="M:QuickGraph.Concepts.Traversals.IVertexListGraph.ContainsVertex(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if the vertex <paramref name="v" /> is part of the list.</summary>
      <param name="v">vertex to test</param>
      <returns>true if part of the list, false otherwize</returns>
      <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor">
      <summary>A distance recorder visitor</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.InitializeVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.FinishEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.InitializeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor">
      <summary>Visitor that records the edge predecessor from a vertex.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.DiscoverTreeEdge(System.Object,QuickGraph.Concepts.EdgeEdgeEventArgs)">
      <summary>Records edge predecessor</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.FinishEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <summary>Records end path edges</summary>
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.InitializeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <summary>Not used</summary>
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor">
      <summary>Visitor that records the edge predecessor from a vertex.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <summary>Finished a vertex exploration</summary>
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <summary>Predecessor record</summary>
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.ITimeStamperVisitor">
      <summary>Description résumée de ITimeStamperVisitior.</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.ITimeStamperVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.ITimeStamperVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor">
      <summary>Tree edge visitor</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor">
      <summary>A vertex colorizer visitor</summary>
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.InitializeVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
      <param name="sender" />
      <param name="args" />
    </member>
    <member name="T:QuickGraph.Exceptions.AttributeNotFoundException">
      <summary>Exception throwed when not finding a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.EdgeNotFoundException">
      <summary>Exception throwed when not finding a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.GraphNotStronglyConnectedException">
      <summary>Not a acyclic graph execption</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.MultipleInEdgeException">
      <summary>Multiple In Edge exception</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.NegativeCycleException">
      <summary>Negative cycle execption</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.NonAcyclicGraphException">
      <summary>Not a acyclic graph execption</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException">
      <summary>ParrallelEdgeNotAllowedException.</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.VertexNotConnectedByEdgeException">
      <summary>Exception throwed when not finding a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Exceptions.VertexNotFoundException">
      <summary>Exception throwed when not finding a vertex.</summary>
    </member>
    <member name="T:QuickGraph.Predicates.ConnectsEdgePredicate">
      <summary>A predicate that filter edge connecting two vertices</summary>
    </member>
    <member name="M:QuickGraph.Predicates.ConnectsEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Test if edge connects source and target vertex</summary>
      <param name="e">edge to test</param>
      <returns>true if e connects source and target</returns>
    </member>
    <member name="T:QuickGraph.Predicates.EdgePredicate">
      <summary>Edge predicate</summary>
    </member>
    <member name="M:QuickGraph.Predicates.EdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Applies the edge predicate to e and to it's vertices?</summary>
      <param name="e">edge to test</param>
      <returns>EdgePredicate(e) &amp;&amp; VertexPredicate(e.Source) &amp;&amp; VertexPredicate(e.Target)</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Predicates.InCollectionVertexPredicate">
      <summary>Predicate for checking that a vertex is in a collection</summary>
    </member>
    <member name="M:QuickGraph.Predicates.InCollectionVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if <paramref name="v" /> is in the collection.</summary>
      <param name="v">vertex to test</param>
      <returns>true if <paramref name="v" /> is in the collection, false otherwize</returns>
    </member>
    <member name="T:QuickGraph.Predicates.InDictionaryVertexPredicate">
      <summary>Predicate for checking that a vertex is in a collection</summary>
    </member>
    <member name="M:QuickGraph.Predicates.InDictionaryVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Gets a value indicating if <paramref name="v" /> is in the collection.</summary>
      <param name="v">vertex to test</param>
      <returns>true if <paramref name="v" /> is in the collection, false otherwize</returns>
    </member>
    <member name="T:QuickGraph.Predicates.InEdgePredicate">
      <summary>In edge predicate</summary>
    </member>
    <member name="M:QuickGraph.Predicates.InEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Applies the edge predicate to e and to it's source</summary>
      <param name="e">edge to test</param>
      <returns>EdgePredicate(e) and VertexPredicate(e.Source)</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Predicates.IsAdjacentEdgePredicate">
      <summary>Predicate that checks if a edge is an edge</summary>
    </member>
    <member name="M:QuickGraph.Predicates.IsAdjacentEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <param name="e" />
    </member>
    <member name="T:QuickGraph.Predicates.IsInEdgePredicate">
      <summary>Predicate that checks if a edge is an inedge</summary>
    </member>
    <member name="M:QuickGraph.Predicates.IsInEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <param name="e" />
    </member>
    <member name="M:QuickGraph.Predicates.IsOutEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <param name="e" />
    </member>
    <member name="T:QuickGraph.Predicates.KeepAllEdgesPredicate">
      <summary>Predicate that always returns true</summary>
    </member>
    <member name="M:QuickGraph.Predicates.KeepAllEdgesPredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Always returns true.</summary>
      <param name="e" />
    </member>
    <member name="T:QuickGraph.Predicates.KeepAllVerticesPredicate">
      <summary>Predicate that always returns true</summary>
    </member>
    <member name="M:QuickGraph.Predicates.KeepAllVerticesPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Always returns true.</summary>
      <param name="v" />
    </member>
    <member name="T:QuickGraph.Predicates.NotInCircuitEdgePredicate">
      <summary>An predicate that checks that the edge is not in both circuit and temporary circuit.</summary>
    </member>
    <member name="P:QuickGraph.Predicates.NotInCircuitEdgePredicate.Circuit">
      <summary>Edge circuit</summary>
    </member>
    <member name="P:QuickGraph.Predicates.NotInCircuitEdgePredicate.TemporaryCircuit">
      <summary>Temporary circuit</summary>
    </member>
    <member name="M:QuickGraph.Predicates.NotInCircuitEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Test method</summary>
      <param name="e" />
    </member>
    <member name="T:QuickGraph.Predicates.NotVertexPredicate">
      <summary>Not operator to predicate</summary>
    </member>
    <member name="M:QuickGraph.Predicates.NotVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <param name="v" />
    </member>
    <member name="T:QuickGraph.Predicates.OutEdgePredicate">
      <summary>Out-edge predicate</summary>
    </member>
    <member name="M:QuickGraph.Predicates.OutEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Applies the edge predicate to e and to it's target vertex</summary>
      <param name="e">edge to test</param>
      <returns>EdgePredicate(e) and VertexPredicate(e.Target)</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Predicates.Preds">
      <summary>Static helper class for creating predicates This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.Connects(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IGraph)">
      <param name="source" />
      <param name="target" />
      <param name="g" />
    </member>
    <member name="M:QuickGraph.Predicates.Preds.Edge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Checks ep(e) &amp;&amp; vp(e.Source) &amp;&amp; vp(e.Target)</summary>
      <param name="ep">predicate to apply to edge</param>
      <param name="vp">predicate to apply to edge source and target</param>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.Equal(QuickGraph.Concepts.IVertex)">
      <summary>Check if a vertex is equal to v</summary>
      <param name="v">vertex to test</param>
      <returns>predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.InCollection(QuickGraph.Concepts.Collections.IVertexCollection)">
      <summary>Check if vertex is in list</summary>
      <param name="list" />
    </member>
    <member name="M:QuickGraph.Predicates.Preds.InEdge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Creates a predicate that check the edge and the edge source</summary>
      <param name="ep">edge predicate to apply to the edge</param>
      <param name="vp">vertex predicate to apply to the edge source</param>
      <returns>in-edge predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.IsAdjacent(QuickGraph.Concepts.IVertex)">
      <summary>Creates a predicate that checks wheter an edge is adjacent to a given vertex.</summary>
      <param name="v">vertex to test</param>
      <returns>is adjacent predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.IsInEdge(QuickGraph.Concepts.IVertex)">
      <summary>Creates a predicate that checks if an edge is an in-edge of a vertex.</summary>
      <param name="v">vertex to check</param>
      <returns>in-edge predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.IsOutEge(QuickGraph.Concepts.IVertex)">
      <summary>Creates a predicate that checks if an edge is an out-edge of a vertex.</summary>
      <param name="v">vertex to check</param>
      <returns>out-edge predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.KeepAllEdges">
      <summary>Returns a edge predicate that always returns true.</summary>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.KeepAllVertices">
      <summary>Returns a vertex predicate that always returns true.</summary>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.Not(QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Negates a predicate</summary>
      <param name="predicate" />
    </member>
    <member name="M:QuickGraph.Predicates.Preds.OutEdge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
      <summary>Creates a predicate that check the edge and the edge target</summary>
      <param name="ep">edge predicate to apply to the edge</param>
      <param name="vp">vertex predicate to apply to the edge target</param>
      <returns>out-edge predicate</returns>
    </member>
    <member name="M:QuickGraph.Predicates.Preds.SourceVertex(QuickGraph.Concepts.Traversals.IBidirectionalGraph)">
      <summary>Source vertex prodicate</summary>
      <param name="graph" />
    </member>
    <member name="T:QuickGraph.Predicates.ResidualEdgePredicate">
      <summary>Predicate that test if an edge is residual</summary>
    </member>
    <member name="P:QuickGraph.Predicates.ResidualEdgePredicate.ResidualCapacities">
      <summary>Residual capacities map</summary>
    </member>
    <member name="M:QuickGraph.Predicates.ResidualEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Test if edge e has a positive residual capacity</summary>
      <param name="e">edge to test</param>
      <returns>0 &lt; ResidualCapacities[e]</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Predicates.ReversedResidualEdgePredicate">
      <summary>Predicate that test if an edge's reverse is residual</summary>
    </member>
    <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate.ResidualCapacities">
      <summary>Residual capacities map</summary>
    </member>
    <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate.ReversedEdges">
      <summary>Reversed edges map</summary>
    </member>
    <member name="M:QuickGraph.Predicates.ReversedResidualEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
      <summary>Test if edge e has a positive residual capacity</summary>
      <param name="e">edge to test</param>
      <returns>0 &lt; ResidualCapacities[e]</returns>
      <exception cref="T:System.ArgumentNullException">e is null</exception>
    </member>
    <member name="T:QuickGraph.Predicates.SinkVertexPredicate">
      <summary>A predicate to test if a <see cref="T:QuickGraph.Concepts.IVertex" /> is a root vertex (no in-edges).</summary>
    </member>
    <member name="M:QuickGraph.Predicates.SinkVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Tests if the vertex is a root</summary>
      <param name="v">vertex to test</param>
      <returns>true is the vertex has no in-edges, false otherwise</returns>
    </member>
    <member name="T:QuickGraph.Predicates.SourceVertexPredicate">
      <summary>A predicate to test if a <see cref="T:QuickGraph.Concepts.IVertex" /> is a root vertex (no in-edges).</summary>
    </member>
    <member name="M:QuickGraph.Predicates.SourceVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Tests if the vertex is a root</summary>
      <param name="v">vertex to test</param>
      <returns>true is the vertex has no in-edges, false otherwise</returns>
    </member>
    <member name="T:QuickGraph.Predicates.VertexEqualPredicate">
      <summary>Predicate that checks to two vertex are equal</summary>
    </member>
    <member name="P:QuickGraph.Predicates.VertexEqualPredicate.ReferenceVertex">
      <summary>Reference vertex</summary>
    </member>
    <member name="M:QuickGraph.Predicates.VertexEqualPredicate.Test(QuickGraph.Concepts.IVertex)">
      <summary>Test if v == u</summary>
      <param name="v">vertex to test</param>
      <returns>v == u</returns>
    </member>
    <member name="T:QuickGraph.Providers.CustomEdgeProvider">
      <summary>Custom edge provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.CustomEdgeProvider.EdgeType">
      <summary>Returns typeof(CustomEdge)</summary>
    </member>
    <member name="M:QuickGraph.Providers.CustomEdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
      <summary>Creates a new edge</summary>
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Providers.CustomEdgeProvider.UpdateEdge(QuickGraph.CustomEdge)">
      <summary>Updates an edge that has not been created with the provider</summary>
      <param name="e">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Providers.CustomVertexProvider">
      <summary>Default custom vertex provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.CustomVertexProvider.VertexType">
      <summary>Returns typeof(CustomVertex)</summary>
    </member>
    <member name="M:QuickGraph.Providers.CustomVertexProvider.ProvideVertex">
      <summary>Creates a new vertex</summary>
    </member>
    <member name="M:QuickGraph.Providers.CustomVertexProvider.UpdateVertex(QuickGraph.CustomVertex)">
      <summary>Updates a vertex that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Providers.EdgeProvider">
      <summary>Default edge provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.EdgeProvider.EdgeType">
      <summary>Edge type.</summary>
    </member>
    <member name="M:QuickGraph.Providers.EdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
      <summary>Creates a new edge</summary>
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Providers.EdgeProvider.UpdateEdge(QuickGraph.Edge)">
      <summary>Updates an edge that has not been created with the provider</summary>
      <param name="e">edge to update</param>
    </member>
    <member name="T:QuickGraph.Providers.NamedEdgeProvider">
      <summary>Named edge provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.NamedEdgeProvider.EdgeType">
      <summary>Returns typeof(NamedEdge)</summary>
    </member>
    <member name="M:QuickGraph.Providers.NamedEdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
      <summary>Creates a new edge</summary>
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:QuickGraph.Providers.NamedEdgeProvider.UpdateEdge(QuickGraph.NamedEdge)">
      <summary>Updates an edge that has not been created with the provider</summary>
      <param name="e">edge to update</param>
    </member>
    <member name="T:QuickGraph.Providers.NamedVertexProvider">
      <summary>Default custom vertex provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.NamedVertexProvider.VertexType">
      <summary>Returns typeof(NamedVertex)</summary>
    </member>
    <member name="M:QuickGraph.Providers.NamedVertexProvider.ProvideVertex">
      <summary>Creates a new vertex</summary>
    </member>
    <member name="M:QuickGraph.Providers.NamedVertexProvider.UpdateVertex(QuickGraph.NamedVertex)">
      <summary>Updates a vertex that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Providers.TypedEdgeProvider">
      <summary>Default custom edge provider</summary>
    </member>
    <member name="P:QuickGraph.Providers.TypedEdgeProvider.EdgeType">
      <summary>Returns typeof(CustomEdge)</summary>
    </member>
    <member name="M:QuickGraph.Providers.TypedEdgeProvider.ProvideEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
      <summary>Creates a new edge</summary>
    </member>
    <member name="M:QuickGraph.Providers.TypedEdgeProvider.UpdateEdge(QuickGraph.Concepts.IEdge)">
      <summary>Updates a edge that has not been created with the provider</summary>
      <param name="e">edge to update</param>
    </member>
    <member name="T:QuickGraph.Providers.TypedVertexProvider">
      <summary>Default custom vertex provider</summary>
    </member>
    <member name="P:QuickGraph.Providers.TypedVertexProvider.VertexType">
      <summary>Returns typeof(CustomVertex)</summary>
    </member>
    <member name="M:QuickGraph.Providers.TypedVertexProvider.ProvideVertex">
      <summary>Creates a new vertex</summary>
    </member>
    <member name="M:QuickGraph.Providers.TypedVertexProvider.UpdateVertex(QuickGraph.Concepts.IVertex)">
      <summary>Updates a vertex that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Providers.VertexProvider">
      <summary>Vertex provider This class cannot be inherited.</summary>
    </member>
    <member name="P:QuickGraph.Providers.VertexProvider.VertexType">
      <summary>Vertex type.</summary>
    </member>
    <member name="M:QuickGraph.Providers.VertexProvider.ProvideVertex">
      <summary>Creates a new vertex</summary>
    </member>
    <member name="M:QuickGraph.Providers.VertexProvider.UpdateVertex(QuickGraph.Vertex)">
      <summary>Updates a vertex that has not been created with the provider</summary>
      <param name="v">vertex to update</param>
    </member>
    <member name="T:QuickGraph.Serialization.GraphMLGraphSerializer">
      <summary>Graph serializer to the GraphML format.</summary>
    </member>
    <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <summary>Serializes g to xml</summary>
      <param name="writer">xml writer</param>
      <param name="g">graph to serialize</param>
      <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
      <exception cref="T:System.ArgumentException">g vertex or edge does not implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable" />. </exception>
    </member>
    <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
      <summary>Serializes the filtered graph g to xml</summary>
      <param name="writer">xml writer</param>
      <param name="baseGraph">"base" graph of g</param>
      <param name="g">graph to serialize</param>
      <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
      <exception cref="T:System.ArgumentException">g vertex or edge does not implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable" />. </exception>
    </member>
    <member name="T:QuickGraph.Serialization.GraphSerializationInfo">
      <summary>A data holder class</summary>
    </member>
    <member name="P:QuickGraph.Serialization.GraphSerializationInfo.Count">
      <summary>Number of key-value pair in the data bag.</summary>
    </member>
    <member name="P:QuickGraph.Serialization.GraphSerializationInfo.IsSerializing">
      <summary>True if serializing</summary>
    </member>
    <member name="P:QuickGraph.Serialization.GraphSerializationInfo.Item(System.String)">
      <summary>Gets or sets a data entry in the graph info collection</summary>
      <exception cref="T:System.InvalidOperationException"> set property,set a value while the graph info is deserializing </exception>
      <exception cref="T:System.MissingFieldException"> get property, the requested key is not found </exception>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializationInfo.Add(System.String,System.Object)">
      <summary>Adds a new key-value pair</summary>
      <param name="key">value identifier</param>
      <param name="value">value</param>
      <exception cref="T:System.ArgumentNullException">key</exception>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializationInfo.Contains(System.String)">
      <summary>Gets a value indicating if the key is in the data entries.</summary>
      <param name="key">key to test</param>
      <returns>true if key is in the data collection, false otherwise</returns>
    </member>
    <member name="T:QuickGraph.Serialization.GraphSerializer">
      <summary>Base class for Graph serializers. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:QuickGraph.Serialization.GraphSerializer.CreatedEdges">
      <summary>Created vertices table</summary>
    </member>
    <member name="P:QuickGraph.Serialization.GraphSerializer.CreatedVertices">
      <summary>Created vertices table</summary>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.CreateGraph(System.Type,System.Type,System.Type,System.Boolean,System.Boolean)">
      <param name="graphType" />
      <param name="vertexProviderType" />
      <param name="edgeProviderType" />
      <param name="directed" />
      <param name="allowParallelEdges" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes data from Xml stream.</summary>
      <param name="reader">xml stream</param>
      <returns>deserialized data</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.FormatID(QuickGraph.Concepts.IEdge)">
      <summary>Formats the edge ID number</summary>
      <param name="e">edge</param>
      <returns>e.ID formatted</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.FormatID(QuickGraph.Concepts.IVertex)">
      <summary>Formats the vertex ID number</summary>
      <param name="v">vertex</param>
      <returns>v.ID formatted</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.GetTypeQualifiedName(System.Object)">
      <summary>Returns qualifed type name of o</summary>
      <param name="o" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.GetTypeQualifiedName(System.Type)">
      <param name="t" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.MoveNextElement(System.Xml.XmlReader)">
      <summary>Moves reader to element with name = name</summary>
      <param name="reader" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.MovePastEndElement(System.Xml.XmlReader,System.String)">
      <param name="reader" />
      <param name="name" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToAttribute(System.Xml.XmlReader,System.String,System.Boolean)">
      <param name="reader" />
      <param name="name" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToElement(System.Xml.XmlReader,System.String)">
      <summary>Moves reader to element with name = name</summary>
      <param name="reader" />
      <param name="name" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToElement(System.Xml.XmlReader,System.String,System.String)">
      <param name="reader" />
      <param name="name" />
      <param name="name2" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.ParseEdgeID(System.String)">
      <summary>Parses edge id of the form 'edd' where dd is the id number</summary>
      <param name="id">id identifier</param>
      <returns>id number</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.ParseVertexID(System.String)">
      <summary>Parses vertex id of the form 'vdd' where dd is the id number</summary>
      <param name="id">id identifier</param>
      <returns>id number</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.ReadEndGraphElem(System.Xml.XmlReader)">
      <param name="reader" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.ReadGraphElem(System.Xml.XmlReader)">
      <summary>Reads graph data and creates new graph instance</summary>
      <param name="reader">xml reader opened on graph data</param>
      <returns>created graph instance</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.ReadVertexOrEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <summary>Reads vertex or edge data</summary>
      <param name="reader" />
      <param name="g" />
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <summary>Serializes g to xml</summary>
      <param name="writer">xml writer</param>
      <param name="g">graph to serialize</param>
      <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
      <exception cref="T:System.ArgumentException">g vertex or edge does not implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable" />. </exception>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
      <summary>Serializes the filtered graph g to xml</summary>
      <param name="writer">xml writer</param>
      <param name="baseGraph">"base" graph of g</param>
      <param name="g">graph to serialize</param>
      <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
      <exception cref="T:System.ArgumentException">g vertex or edge does not implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable" />. </exception>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.WriteEdgeElem(System.Xml.XmlWriter,QuickGraph.Concepts.IEdge,QuickGraph.Serialization.GraphSerializationInfo)">
      <summary>Writes a vertex element and it's custom data stored in info.</summary>
      <param name="writer">xml writer</param>
      <param name="e">edge to store</param>
      <param name="info">edge custom data</param>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.WriteEndGraphElem(System.Xml.XmlWriter)">
      <summary>Closes the graph element.</summary>
      <param name="writer">xml writer</param>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.WriteGraphElem(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
      <summary>Create the graph element and stores graph level data.</summary>
      <param name="writer">xml writer</param>
      <param name="baseGraph">"base" graph of g</param>
      <param name="g">graph to serialize</param>
    </member>
    <member name="M:QuickGraph.Serialization.GraphSerializer.WriteVertexElem(System.Xml.XmlWriter,QuickGraph.Concepts.IVertex,QuickGraph.Serialization.GraphSerializationInfo)">
      <summary>Writes a vertex element and it's custom data stored in info.</summary>
      <param name="writer">xml writer</param>
      <param name="v">vertex to store</param>
      <param name="info">vertex custom data</param>
    </member>
    <member name="T:QuickGraph.Serialization.GxlGraphSerializer">
      <summary>Graph serializer to the GXL format.</summary>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <param name="reader" />
      <param name="g" />
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadEndGraphElem(System.Xml.XmlReader)">
      <param name="reader" />
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadGraphElem(System.Xml.XmlReader)">
      <summary>Reads graph data and creates new graph instance</summary>
      <param name="reader">xml reader opened on graph data</param>
      <returns>created graph instance</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadInfo(System.Xml.XmlReader)">
      <summary>Reads custom info from GraphMl</summary>
      <param name="reader">xml reader</param>
      <returns>custom data</returns>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadVertex(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <param name="reader" />
      <param name="g" />
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadVertexOrEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
      <summary>Reads vertex or edge data</summary>
      <param name="reader" />
      <param name="g" />
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteEdgeElem(System.Xml.XmlWriter,QuickGraph.Concepts.IEdge,QuickGraph.Serialization.GraphSerializationInfo)">
      <summary>Writes a vertex element and it's custom data stored in info.</summary>
      <param name="writer">xml writer</param>
      <param name="e">edge to store</param>
      <param name="info">edge custom data</param>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteEndGraphElem(System.Xml.XmlWriter)">
      <summary>Closes the graph element.</summary>
      <param name="writer">xml writer</param>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteGraphElem(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
      <summary>Create the graph element and stores graph level data.</summary>
      <param name="writer">xml writer</param>
      <param name="baseGraph">"base" graph of g</param>
      <param name="g">graph to serialize</param>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteInfo(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Writes custom info to GraphMl</summary>
      <param name="writer">xml writer</param>
      <param name="info">custom data</param>
    </member>
    <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteVertexElem(System.Xml.XmlWriter,QuickGraph.Concepts.IVertex,QuickGraph.Serialization.GraphSerializationInfo)">
      <summary>Writes a vertex element and it's custom data stored in info.</summary>
      <param name="writer">xml writer</param>
      <param name="v">vertex to store</param>
      <param name="info">vertex custom data</param>
    </member>
    <member name="P:QuickGraph.Serialization.SerializableEdge.Entries">
      <summary>Gets the dictionary of key-and-value pairs</summary>
      <value>Data entries</value>
    </member>
    <member name="M:QuickGraph.Serialization.SerializableEdge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.Serialization.SerializableEdge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="P:QuickGraph.Serialization.SerializableVertex.Entries">
      <summary>Gets the dictionary of key-and-value pairs</summary>
      <value>Data entries</value>
    </member>
    <member name="M:QuickGraph.Serialization.SerializableVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Reads no data from serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is serializing</exception>
    </member>
    <member name="M:QuickGraph.Serialization.SerializableVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Adds nothing to serialization info</summary>
      <param name="info">data holder</param>
      <exception cref="T:System.ArgumentNullException">info is null</exception>
      <exception cref="T:System.ArgumentException">info is not serializing</exception>
    </member>
    <member name="T:QuickGraph.Serialization.XmlGraphSerializer">
      <summary>A wrapper for serializings graphs</summary>
    </member>
    <member name="P:QuickGraph.Serialization.XmlGraphSerializer.Graph">
      <summary>Serialized graph</summary>
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.GetTypeQualifiedName(System.Type)">
      <param name="t" />
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.MoveToAttribute(System.Xml.XmlReader,System.String)">
      <param name="reader" />
      <param name="name" />
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.ReadGraphXml(System.Xml.XmlReader)">
      <param name="reader" />
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.ReadXml(System.Xml.XmlReader)">
      <summary>Reads graph data from Xml and create the graph object.</summary>
      <param name="reader">opened xml reader</param>
      <returns>deserialized graph</returns>
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.Serialize(System.Xml.XmlWriter)">
      <summary>Serializes graph to xml. <see cref="M:QuickGraph.Serialization.XmlGraphSerializer.WriteXml(System.Xml.XmlWriter)" /></summary>
      <param name="writer" />
    </member>
    <member name="M:QuickGraph.Serialization.XmlGraphSerializer.WriteXml(System.Xml.XmlWriter)">
      <summary>Serializes the graph to xml</summary>
      <param name="writer">opened xml writer</param>
    </member>
  </members>
</doc>